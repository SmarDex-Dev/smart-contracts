{
  "address": "0x7753F36E711B66a0350a753aba9F5651BAE76A1D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPair",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad870615a1a921893f6020c54140297ff475d28b542666a07ce630ccbbd14cf9",
  "receipt": {
    "to": null,
    "from": "0xcaEc63ce78a0D4DAb2b5112295789A542A0fdAee",
    "contractAddress": "0x7753F36E711B66a0350a753aba9F5651BAE76A1D",
    "transactionIndex": 35,
    "gasUsed": "5216679",
    "logsBloom": "0x
    "blockHash": "0x46730203b0db3b8f68b411c5ab0fbf9888e8469b439bc29c177437dfb0308bfa",
    "transactionHash": "0xad870615a1a921893f6020c54140297ff475d28b542666a07ce630ccbbd14cf9",
    "logs": [],
    "blockNumber": 16793955,
    "cumulativeGasUsed": "11103001",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcaEc63ce78a0D4DAb2b5112295789A542A0fdAee"
  ],
  "numDeployments": 1,
  "solcInputHash": "cbaf68a9c57cd2fa5a7f845752ac1261",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPair\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allPairsLength()\":{\"returns\":{\"_0\":\"quantity in uint256\"}},\"createPair(address,address)\":{\"params\":{\"_tokenA\":\"address of tokenA\",\"_tokenB\":\"address of tokenB\"},\"returns\":{\"pair_\":\"address of the pair created\"}},\"setFeeTo(address)\":{\"params\":{\"_feeTo\":\"address to replace\"}},\"setFeeToSetter(address)\":{\"params\":{\"_feeToSetter\":\"address to replace\"}}},\"stateVariables\":{\"allPairs\":{\"params\":{\"_index\":\"index of the pair\"},\"return\":\"address of the pair\",\"returns\":{\"_0\":\"address of the pair\"}}},\"title\":\"SmardexFactory\",\"version\":1},\"userdoc\":{\"events\":{\"PairCreated(address,address,address,uint256)\":{\"notice\":\"emitted at each SmardexPair created\"}},\"kind\":\"user\",\"methods\":{\"allPairs(uint256)\":{\"notice\":\"return the address of the pair at index\"},\"allPairsLength()\":{\"notice\":\"return the quantity of pairs\"},\"createPair(address,address)\":{\"notice\":\"create pair with 2 address\"},\"feeTo()\":{\"notice\":\"return which address fees will be transferred\"},\"feeToSetter()\":{\"notice\":\"return which address can update feeTo\"},\"getPair(address,address)\":{\"notice\":\"return the address of the pair of 2 tokens\"},\"setFeeTo(address)\":{\"notice\":\"set the address who will receive fees, can only be call by feeToSetter\"},\"setFeeToSetter(address)\":{\"notice\":\"set the address who can update feeTo, can only be call by feeToSetter\"}},\"notice\":\"facilitates creation of SmardexPair to swap tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SmardexFactory.sol\":\"SmardexFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/core/SmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"./SmardexPair.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/ISmardexFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmardexFactory\\r\\n * @notice facilitates creation of SmardexPair to swap tokens.\\r\\n */\\r\\ncontract SmardexFactory is ISmardexFactory {\\r\\n    address public feeTo;\\r\\n    address public feeToSetter;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public getPair;\\r\\n    address[] public allPairs;\\r\\n\\r\\n    constructor(address _feeToSetter) {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function allPairsLength() external view returns (uint256) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_) {\\r\\n        require(_tokenA != _tokenB, \\\"SmarDex: IDENTICAL_ADDRESSES\\\");\\r\\n        (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\r\\n        require(_token0 != address(0), \\\"SmarDex: ZERO_ADDRESS\\\");\\r\\n        require(getPair[_token0][_token1] == address(0), \\\"SmarDex: PAIR_EXISTS\\\"); // single check is sufficient\\r\\n        bytes32 _salt = keccak256(abi.encodePacked(_token0, _token1));\\r\\n        SmardexPair pair = new SmardexPair{ salt: _salt }();\\r\\n        pair.initialize(_token0, _token1);\\r\\n        pair_ = address(pair);\\r\\n        getPair[_token0][_token1] = pair_;\\r\\n        getPair[_token1][_token0] = pair_; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair_);\\r\\n        emit PairCreated(_token0, _token1, pair_, allPairs.length);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function setFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == feeToSetter, \\\"SmarDex: FORBIDDEN\\\");\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function setFeeToSetter(address _feeToSetter) external {\\r\\n        require(msg.sender == feeToSetter, \\\"SmarDex: FORBIDDEN\\\");\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e33f1f3c43a38adfac956d7998488ad313c009b5cdf7937c75d701b7cc4d1ce\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/SmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"./libraries/SmardexLibrary.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/ISmardexPair.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexFactory.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexSwapCallback.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexMintCallback.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmardexPair\\r\\n * @notice Pair contract that allows user to swap 2 ERC20-strict tokens in a decentralised and automated way\\r\\n */\\r\\ncontract SmardexPair is ISmardexPair, ERC20Permit {\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    /**\\r\\n     * @notice swap parameters used by function swap\\r\\n     * @param amountCalculated return amount from getAmountIn/Out is always positive but to avoid too much cast, is int\\r\\n     * @param fictiveReserveIn fictive reserve of the in-token of the pair\\r\\n     * @param fictiveReserveOut fictive reserve of the out-token of the pair\\r\\n     * @param priceAverageIn in-token ratio component of the price average\\r\\n     * @param priceAverageOut out-token ratio component of the price average\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param balanceIn contract balance of the in-token\\r\\n     * @param balanceOut contract balance of the out-token\\r\\n     */\\r\\n    struct SwapParams {\\r\\n        int256 amountCalculated;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 balanceIn;\\r\\n        uint256 balanceOut;\\r\\n    }\\r\\n\\r\\n    uint8 private constant CONTRACT_UNLOCKED = 1;\\r\\n    uint8 private constant CONTRACT_LOCKED = 2;\\r\\n    uint256 private constant MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n    bytes4 private constant AUTOSWAP_SELECTOR = bytes4(keccak256(bytes(\\\"executeWork(address,address)\\\")));\\r\\n\\r\\n    address public factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    // smardex new fictive reserves\\r\\n    uint128 internal fictiveReserve0;\\r\\n    uint128 internal fictiveReserve1; // accessible via getFictiveReserves()\\r\\n\\r\\n    // moving average on the price\\r\\n    uint128 internal priceAverage0;\\r\\n    uint128 internal priceAverage1;\\r\\n    uint40 internal priceAverageLastTimestamp; // accessible via getPriceAverage()\\r\\n\\r\\n    // fee for FEE_POOL\\r\\n    uint104 internal feeToAmount0;\\r\\n    uint104 internal feeToAmount1; // accessible via getFees()\\r\\n\\r\\n    // reentrancy\\r\\n    uint8 private lockStatus = CONTRACT_UNLOCKED;\\r\\n\\r\\n    modifier lock() {\\r\\n        require(lockStatus == CONTRACT_UNLOCKED, \\\"SmarDex: LOCKED\\\");\\r\\n        lockStatus = CONTRACT_LOCKED;\\r\\n        _;\\r\\n        lockStatus = CONTRACT_UNLOCKED;\\r\\n    }\\r\\n\\r\\n    constructor() ERC20(\\\"SmarDex LP-Token\\\", \\\"SDEX-LP\\\") ERC20Permit(\\\"SmarDex LP-Token\\\") {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function initialize(address _token0, address _token1) external override {\\r\\n        require(msg.sender == factory, \\\"SmarDex: FORBIDDEN\\\"); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getReserves() external view override returns (uint256 reserve0_, uint256 reserve1_) {\\r\\n        reserve0_ = IERC20(token0).balanceOf(address(this)) - feeToAmount0;\\r\\n        reserve1_ = IERC20(token1).balanceOf(address(this)) - feeToAmount1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getFictiveReserves() external view override returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_) {\\r\\n        fictiveReserve0_ = fictiveReserve0;\\r\\n        fictiveReserve1_ = fictiveReserve1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getFees() external view override returns (uint256 fees0_, uint256 fees1_) {\\r\\n        fees0_ = feeToAmount0;\\r\\n        fees1_ = feeToAmount1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 priceAverageLastTimestamp_)\\r\\n    {\\r\\n        priceAverage0_ = priceAverage0;\\r\\n        priceAverage1_ = priceAverage1;\\r\\n        priceAverageLastTimestamp_ = priceAverageLastTimestamp;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) public pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_) {\\r\\n        (priceAverageIn_, priceAverageOut_) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n            _fictiveReserveIn,\\r\\n            _fictiveReserveOut,\\r\\n            _priceAverageLastTimestamp,\\r\\n            _priceAverageIn,\\r\\n            _priceAverageOut,\\r\\n            _currentTimestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external override returns (uint256 liquidity_) {\\r\\n        liquidity_ = _mintBeforeFee(_to, _amount0, _amount1, _payer);\\r\\n\\r\\n        // we call feeTo out of the internal locked mint (_mintExt) function to be able to swap fees in here\\r\\n        _feeToSwap();\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function burn(address _to) external override returns (uint256 amount0_, uint256 amount1_) {\\r\\n        (amount0_, amount1_) = _burnBeforeFee(_to);\\r\\n\\r\\n        // we call feeTo out of the internal locked burn (_burnExt) function to be able to swap fees in here\\r\\n        _feeToSwap();\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external override lock returns (int256 amount0_, int256 amount1_) {\\r\\n        require(_amountSpecified != 0, \\\"SmarDex: ZERO_AMOUNT\\\");\\r\\n\\r\\n        SwapParams memory _params = SwapParams({\\r\\n            amountCalculated: 0,\\r\\n            fictiveReserveIn: 0,\\r\\n            fictiveReserveOut: 0,\\r\\n            priceAverageIn: 0,\\r\\n            priceAverageOut: 0,\\r\\n            token0: token0,\\r\\n            token1: token1,\\r\\n            balanceIn: 0,\\r\\n            balanceOut: 0\\r\\n        });\\r\\n\\r\\n        (\\r\\n            _params.balanceIn,\\r\\n            _params.balanceOut,\\r\\n            _params.fictiveReserveIn,\\r\\n            _params.fictiveReserveOut,\\r\\n            _params.priceAverageIn,\\r\\n            _params.priceAverageOut\\r\\n        ) = _zeroForOne\\r\\n            ? (\\r\\n                IERC20(_params.token0).balanceOf(address(this)) - feeToAmount0,\\r\\n                IERC20(_params.token1).balanceOf(address(this)) - feeToAmount1,\\r\\n                fictiveReserve0,\\r\\n                fictiveReserve1,\\r\\n                priceAverage0,\\r\\n                priceAverage1\\r\\n            )\\r\\n            : (\\r\\n                IERC20(_params.token1).balanceOf(address(this)) - feeToAmount1,\\r\\n                IERC20(_params.token0).balanceOf(address(this)) - feeToAmount0,\\r\\n                fictiveReserve1,\\r\\n                fictiveReserve0,\\r\\n                priceAverage1,\\r\\n                priceAverage0\\r\\n            );\\r\\n\\r\\n        // compute new price average\\r\\n        (_params.priceAverageIn, _params.priceAverageOut) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n            _params.fictiveReserveIn,\\r\\n            _params.fictiveReserveOut,\\r\\n            priceAverageLastTimestamp,\\r\\n            _params.priceAverageIn,\\r\\n            _params.priceAverageOut,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // SSTORE new price average\\r\\n        (priceAverage0, priceAverage1, priceAverageLastTimestamp) = _zeroForOne\\r\\n            ? (_params.priceAverageIn.toUint128(), _params.priceAverageOut.toUint128(), uint40(block.timestamp))\\r\\n            : (_params.priceAverageOut.toUint128(), _params.priceAverageIn.toUint128(), uint40(block.timestamp));\\r\\n\\r\\n        if (_amountSpecified > 0) {\\r\\n            uint256 _temp;\\r\\n            (_temp, , , _params.fictiveReserveIn, _params.fictiveReserveOut) = SmardexLibrary.getAmountOut(\\r\\n                _amountSpecified.toUint256(),\\r\\n                _params.balanceIn,\\r\\n                _params.balanceOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.priceAverageIn,\\r\\n                _params.priceAverageOut\\r\\n            );\\r\\n            _params.amountCalculated = _temp.toInt256();\\r\\n        } else {\\r\\n            uint256 _temp;\\r\\n            (_temp, , , _params.fictiveReserveIn, _params.fictiveReserveOut) = SmardexLibrary.getAmountIn(\\r\\n                (-_amountSpecified).toUint256(),\\r\\n                _params.balanceIn,\\r\\n                _params.balanceOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.priceAverageIn,\\r\\n                _params.priceAverageOut\\r\\n            );\\r\\n            _params.amountCalculated = _temp.toInt256();\\r\\n        }\\r\\n\\r\\n        (amount0_, amount1_) = _zeroForOne\\r\\n            ? (\\r\\n                _amountSpecified > 0\\r\\n                    ? (_amountSpecified, -_params.amountCalculated)\\r\\n                    : (_params.amountCalculated, _amountSpecified)\\r\\n            )\\r\\n            : (\\r\\n                _amountSpecified > 0\\r\\n                    ? (-_params.amountCalculated, _amountSpecified)\\r\\n                    : (_amountSpecified, _params.amountCalculated)\\r\\n            );\\r\\n\\r\\n        require(_to != _params.token0 && _to != _params.token1, \\\"SmarDex: INVALID_TO\\\");\\r\\n        if (_zeroForOne) {\\r\\n            if (amount1_ < 0) {\\r\\n                TransferHelper.safeTransfer(_params.token1, _to, uint256(-amount1_));\\r\\n            }\\r\\n            ISmardexSwapCallback(msg.sender).smardexSwapCallback(amount0_, amount1_, _data);\\r\\n            uint256 _balanceInBefore = _params.balanceIn;\\r\\n            _params.balanceIn = IERC20(token0).balanceOf(address(this));\\r\\n            require(\\r\\n                _balanceInBefore + feeToAmount0 + (amount0_).toUint256() <= _params.balanceIn,\\r\\n                \\\"SmarDex: INSUFFICIENT_TOKEN0_INPUT_AMOUNT\\\"\\r\\n            );\\r\\n            _params.balanceOut = IERC20(token1).balanceOf(address(this));\\r\\n        } else {\\r\\n            if (amount0_ < 0) {\\r\\n                TransferHelper.safeTransfer(_params.token0, _to, uint256(-amount0_));\\r\\n            }\\r\\n            ISmardexSwapCallback(msg.sender).smardexSwapCallback(amount0_, amount1_, _data);\\r\\n            uint256 _balanceInBefore = _params.balanceIn;\\r\\n            _params.balanceIn = IERC20(token1).balanceOf(address(this));\\r\\n            require(\\r\\n                _balanceInBefore + feeToAmount1 + (amount1_).toUint256() <= _params.balanceIn,\\r\\n                \\\"SmarDex: INSUFFICIENT_TOKEN1_INPUT_AMOUNT\\\"\\r\\n            );\\r\\n            _params.balanceOut = IERC20(token0).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        // update feeTopart\\r\\n        bool _feeOn = ISmardexFactory(factory).feeTo() != address(0);\\r\\n        if (_zeroForOne) {\\r\\n            if (_feeOn) {\\r\\n                feeToAmount0 += ((uint256(amount0_) * SmardexLibrary.FEES_POOL) / SmardexLibrary.FEES_BASE).toUint104();\\r\\n            }\\r\\n            _update(\\r\\n                _params.balanceIn,\\r\\n                _params.balanceOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.priceAverageIn,\\r\\n                _params.priceAverageOut\\r\\n            );\\r\\n        } else {\\r\\n            if (_feeOn) {\\r\\n                feeToAmount1 += ((uint256(amount1_) * SmardexLibrary.FEES_POOL) / SmardexLibrary.FEES_BASE).toUint104();\\r\\n            }\\r\\n            _update(\\r\\n                _params.balanceOut,\\r\\n                _params.balanceIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.priceAverageOut,\\r\\n                _params.priceAverageIn\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Swap(msg.sender, _to, amount0_, amount1_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update fictive reserves and emit the Sync event\\r\\n     * @param _balance0 the new balance of token0\\r\\n     * @param _balance1 the new balance of token1\\r\\n     * @param _fictiveReserve0 the new fictive reserves of token0\\r\\n     * @param _fictiveReserve1 the new fictive reserves of token1\\r\\n     * @param _priceAverage0 the new priceAverage of token0\\r\\n     * @param _priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    function _update(\\r\\n        uint256 _balance0,\\r\\n        uint256 _balance1,\\r\\n        uint256 _fictiveReserve0,\\r\\n        uint256 _fictiveReserve1,\\r\\n        uint256 _priceAverage0,\\r\\n        uint256 _priceAverage1\\r\\n    ) private {\\r\\n        require(_fictiveReserve0 > 0 && _fictiveReserve1 > 0, \\\"SmarDex: FICTIVE_RESERVES_TOO_LOW\\\");\\r\\n        require(_fictiveReserve0 <= type(uint128).max && _fictiveReserve1 <= type(uint128).max, \\\"SmarDex: OVERFLOW\\\");\\r\\n        fictiveReserve0 = uint128(_fictiveReserve0);\\r\\n        fictiveReserve1 = uint128(_fictiveReserve1);\\r\\n\\r\\n        emit Sync(\\r\\n            _balance0 - feeToAmount0,\\r\\n            _balance1 - feeToAmount1,\\r\\n            _fictiveReserve0,\\r\\n            _fictiveReserve1,\\r\\n            _priceAverage0,\\r\\n            _priceAverage1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfers feeToAmount of tokens 0 and 1 to feeTo, and reset feeToAmounts\\r\\n     * @return feeOn_ if part of the fees goes to feeTo\\r\\n     */\\r\\n    function _mintFee() private returns (bool feeOn_) {\\r\\n        address _feeTo = ISmardexFactory(factory).feeTo();\\r\\n        feeOn_ = _feeTo != address(0);\\r\\n        if (feeOn_) {\\r\\n            // gas saving\\r\\n            uint256 _feeToAmount0 = feeToAmount0;\\r\\n            uint256 _feeToAmount1 = feeToAmount1;\\r\\n\\r\\n            if (_feeToAmount0 > 0) {\\r\\n                TransferHelper.safeTransfer(token0, _feeTo, _feeToAmount0);\\r\\n                feeToAmount0 = 0;\\r\\n            }\\r\\n            if (_feeToAmount1 > 0) {\\r\\n                TransferHelper.safeTransfer(token1, _feeTo, _feeToAmount1);\\r\\n                feeToAmount1 = 0;\\r\\n            }\\r\\n        } else {\\r\\n            feeToAmount0 = 0;\\r\\n            feeToAmount1 = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance.\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @param _payer address of the payer to provide token for the mint\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function _mintBeforeFee(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) internal lock returns (uint256 liquidity_) {\\r\\n        _mintFee();\\r\\n\\r\\n        uint256 _fictiveReserve0;\\r\\n        uint256 _fictiveReserve1;\\r\\n\\r\\n        // gas saving\\r\\n        uint256 _balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 _balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n\\r\\n        ISmardexMintCallback(msg.sender).smardexMintCallback(\\r\\n            ISmardexMintCallback.MintCallbackData({\\r\\n                token0: token0,\\r\\n                token1: token1,\\r\\n                amount0: _amount0,\\r\\n                amount1: _amount1,\\r\\n                payer: _payer\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // gas savings\\r\\n        uint256 _balance0after = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 _balance1after = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        require(_balance0after >= _balance0 + _amount0, \\\"SmarDex: INSUFFICIENT_AMOUNT_0\\\");\\r\\n        require(_balance1after >= _balance1 + _amount1, \\\"SmarDex: INSUFFICIENT_AMOUNT_1\\\");\\r\\n\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity_ = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\r\\n            _mint(address(0xdead), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n            _fictiveReserve0 = _balance0after / 2;\\r\\n            _fictiveReserve1 = _balance1after / 2;\\r\\n        } else {\\r\\n            liquidity_ = Math.min((_amount0 * _totalSupply) / _balance0, (_amount1 * _totalSupply) / _balance1);\\r\\n\\r\\n            // update proportionally the fictiveReserves\\r\\n            _fictiveReserve0 = (fictiveReserve0 * (_totalSupply + liquidity_)) / _totalSupply;\\r\\n            _fictiveReserve1 = (fictiveReserve1 * (_totalSupply + liquidity_)) / _totalSupply;\\r\\n        }\\r\\n\\r\\n        require(liquidity_ > 0, \\\"SmarDex: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\r\\n        _mint(_to, liquidity_);\\r\\n\\r\\n        _update(_balance0after, _balance1after, _fictiveReserve0, _fictiveReserve1, priceAverage0, priceAverage1);\\r\\n\\r\\n        emit Mint(msg.sender, _to, _amount0, _amount1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned.\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function _burnBeforeFee(address _to) internal lock returns (uint256 amount0_, uint256 amount1_) {\\r\\n        _mintFee();\\r\\n\\r\\n        // gas savings\\r\\n        address _token0 = token0;\\r\\n        address _token1 = token1;\\r\\n        uint256 _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint256 _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint256 _liquidity = balanceOf(address(this));\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n\\r\\n        // pro-rata distribution\\r\\n        amount0_ = (_liquidity * _balance0) / _totalSupply;\\r\\n        amount1_ = (_liquidity * _balance1) / _totalSupply;\\r\\n        require(amount0_ > 0 && amount1_ > 0, \\\"SmarDex: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\r\\n\\r\\n        // update proportionally the fictiveReserves\\r\\n        uint256 _fictiveReserve0 = fictiveReserve0;\\r\\n        uint256 _fictiveReserve1 = fictiveReserve1;\\r\\n        _fictiveReserve0 -= (_fictiveReserve0 * _liquidity) / _totalSupply;\\r\\n        _fictiveReserve1 -= (_fictiveReserve1 * _liquidity) / _totalSupply;\\r\\n\\r\\n        _burn(address(this), _liquidity);\\r\\n        TransferHelper.safeTransfer(_token0, _to, amount0_);\\r\\n        TransferHelper.safeTransfer(_token1, _to, amount1_);\\r\\n\\r\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(_balance0, _balance1, _fictiveReserve0, _fictiveReserve1, priceAverage0, priceAverage1);\\r\\n\\r\\n        emit Burn(msg.sender, _to, amount0_, amount1_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice execute function \\\"executeWork(address,address)\\\" of the feeTo contract. Doesn't revert tx if it reverts\\r\\n     */\\r\\n    function _feeToSwap() internal {\\r\\n        address _feeTo = ISmardexFactory(factory).feeTo();\\r\\n\\r\\n        // call contract destination for handling fees\\r\\n        // We don't handle return values so it does not revert for LP if something went wrong in feeTo\\r\\n        _feeTo.call(abi.encodeWithSelector(AUTOSWAP_SELECTOR, token0, token1));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1248b6bcc51ede0d8f34daf26d9e16d146975ed2e807be8367117536c92f0700\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexFactory {\\r\\n    /**\\r\\n     * @notice emitted at each SmardexPair created\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param pair address of the SmardexPair created\\r\\n     * @param totalPair number of SmardexPair created so far\\r\\n     */\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 totalPair);\\r\\n\\r\\n    /**\\r\\n     * @notice return which address fees will be transferred\\r\\n     */\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice return which address can update feeTo\\r\\n     */\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair of 2 tokens\\r\\n     */\\r\\n    function getPair(address _tokenA, address _tokenB) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair at index\\r\\n     * @param _index index of the pair\\r\\n     * @return pair_ address of the pair\\r\\n     */\\r\\n    function allPairs(uint256 _index) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the quantity of pairs\\r\\n     * @return quantity in uint256\\r\\n     */\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice create pair with 2 address\\r\\n     * @param _tokenA address of tokenA\\r\\n     * @param _tokenB address of tokenB\\r\\n     * @return pair_ address of the pair created\\r\\n     */\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice set the address who will receive fees, can only be call by feeToSetter\\r\\n     * @param _feeTo address to replace\\r\\n     */\\r\\n    function setFeeTo(address _feeTo) external;\\r\\n\\r\\n    /**\\r\\n     * @notice set the address who can update feeTo, can only be call by feeToSetter\\r\\n     * @param _feeToSetter address to replace\\r\\n     */\\r\\n    function setFeeToSetter(address _feeToSetter) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x261cf491e3905b97810e0190600173519ea2dea458f2c43f7d46ec37867399bd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice callback data for mint\\r\\n     * @param token0 address of the first token of the pair\\r\\n     * @param token1 address of the second token of the pair\\r\\n     * @param amount0 amount of token0 to provide\\r\\n     * @param amount1 amount of token1 to provide\\r\\n     * @param payer address of the payer to provide token for the mint\\r\\n     */\\r\\n    struct MintCallbackData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback to implement when calling SmardexPair.mint\\r\\n     * @param _data callback data for mint\\r\\n     */\\r\\n    function smardexMintCallback(MintCallbackData calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x977073d28b3e0a3c25812d0ae9995d0f3dc90334f5e21bce53f34d570f2caf3b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\n\\r\\ninterface ISmardexPair is IERC20, IERC20Permit {\\r\\n    /**\\r\\n     * @notice emitted at each mint\\r\\n     * @param sender address calling the mint function (usualy the Router contract)\\r\\n     * @param to address that receives the LP-tokens\\r\\n     * @param amount0 amount of token0 to be added in liquidity\\r\\n     * @param amount1 amount of token1 to be added in liquidity\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each burn\\r\\n     * @param sender address calling the burn function (usualy the Router contract)\\r\\n     * @param to address that receives the tokens\\r\\n     * @param amount0 amount of token0 to be withdrawn\\r\\n     * @param amount1 amount of token1 to be withdrawn\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each swap\\r\\n     * @param sender address calling the swap function (usualy the Router contract)\\r\\n     * @param to address that receives the out-tokens\\r\\n     * @param amount0 amount of token0 to be swapped\\r\\n     * @param amount1 amount of token1 to be swapped\\r\\n     * @dev one of the 2 amount is always negative, the other one is always positive. The positive one is the one that\\r\\n     * the user send to the contract, the negative one is the one that the contract send to the user.\\r\\n     */\\r\\n    event Swap(address indexed sender, address indexed to, int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time the fictive reserves are changed (mint, burn, swap)\\r\\n     * @param reserve0 the new reserve of token0\\r\\n     * @param reserve1 the new reserve of token1\\r\\n     * @param fictiveReserve0 the new fictive reserve of token0\\r\\n     * @param fictiveReserve1 the new fictive reserve of token1\\r\\n     * @param priceAverage0 the new priceAverage of token0\\r\\n     * @param priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    event Sync(\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 fictiveReserve0,\\r\\n        uint256 fictiveReserve1,\\r\\n        uint256 priceAverage0,\\r\\n        uint256 priceAverage1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token0 address\\r\\n     * @return address of the token0\\r\\n     */\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token1 address\\r\\n     * @return address of the token1\\r\\n     */\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice called once by the factory at time of deployment\\r\\n     * @param _token0 address of token0\\r\\n     * @param _token1 address of token1\\r\\n     */\\r\\n    function initialize(address _token0, address _token1) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return current Reserves of both token in the pair,\\r\\n     *  corresponding to token balance - pending fees\\r\\n     * @return reserve0_ current reserve of token0 - pending fee0\\r\\n     * @return reserve1_ current reserve of token1 - pending fee1\\r\\n     */\\r\\n    function getReserves() external view returns (uint256 reserve0_, uint256 reserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current Fictives Reserves of both token in the pair\\r\\n     * @return fictiveReserve0_ current fictive reserve of token0\\r\\n     * @return fictiveReserve1_ current fictive reserve of token1\\r\\n     */\\r\\n    function getFictiveReserves() external view returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current pending fees of both token in the pair\\r\\n     * @return fees0_ current pending fees of token0\\r\\n     * @return fees1_ current pending fees of token1\\r\\n     */\\r\\n    function getFees() external view returns (uint256 fees0_, uint256 fees1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return last updated price average at timestamp of both token in the pair,\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @return priceAverage0_ current price for token0\\r\\n     * @return priceAverage1_ current price for token1\\r\\n     * @return blockTimestampLast_ last block timestamp when price was updated\\r\\n     */\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 blockTimestampLast_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current price average of both token in the pair for provided currentTimeStamp\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @param _fictiveReserveIn,\\r\\n     * @param _fictiveReserveOut,\\r\\n     * @param _priceAverageLastTimestamp,\\r\\n     * @param _priceAverageIn current price for token0\\r\\n     * @param _priceAverageOut current price for token1\\r\\n     * @param _currentTimestamp block timestamp to get price\\r\\n     * @return priceAverageIn_ current price for token0\\r\\n     * @return priceAverageOut_ current price for token1\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) external pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance. Should be called from a contract\\r\\n     * that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external returns (uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned. Should be called from a contract that makes safety checks like the\\r\\n     * SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function burn(address _to) external returns (uint256 amount0_, uint256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps tokens. Sends to the defined address the amount of token0 and token1 defined in parameters.\\r\\n     * Tokens to trade should be already sent in the contract.\\r\\n     * Swap function will check if the resulted balance is correct with current reserves and reserves fictive.\\r\\n     * Should be called from a contract that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @param _zeroForOne token0 to token1\\r\\n     * @param _amountSpecified amount of token wanted\\r\\n     * @param _data used for flash swap, data.length must be 0 for regular swap\\r\\n     */\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external returns (int256 amount0_, int256 amount1_);\\r\\n}\\r\\n\",\"keccak256\":\"0x99c9f21c0778e1e5632d820a954d3acf1bbeb448674e490ed6b376376e86f590\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexSwapCallback {\\r\\n    /**\\r\\n     * @notice callback data for swap\\r\\n     * @param _amount0Delta amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _amount1Delta amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _data for Router path and payer for the swap (see router for details)\\r\\n     */\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8415a46df379867182515a94c05b42caa0d863a23fab158d84627d9ed9d40014\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/SmardexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\nlibrary SmardexLibrary {\\r\\n    /// @notice amount of fees sent to LP, not in percent but in FEES_BASE\\r\\n    uint256 public constant FEES_LP = 5;\\r\\n\\r\\n    /// @notice amount of fees sent to the pool, not in percent but in FEES_BASE. if feeTo is null, sent to the LP\\r\\n    uint256 public constant FEES_POOL = 2;\\r\\n\\r\\n    /// @notice total amount of fees, not in percent but in FEES_BASE\\r\\n    uint256 public constant FEES_TOTAL = FEES_LP + FEES_POOL;\\r\\n\\r\\n    /// @notice base of the FEES\\r\\n    uint256 public constant FEES_BASE = 10000;\\r\\n\\r\\n    /// @notice ratio of quantity that is send to the user, after removing the fees, not in percent but in FEES_BASE\\r\\n    uint256 public constant REVERSE_FEES_TOTAL = FEES_BASE - FEES_TOTAL;\\r\\n\\r\\n    /// @notice precision for approxEq, not in percent but in APPROX_PRECISION_BASE\\r\\n    uint256 public constant APPROX_PRECISION = 1;\\r\\n\\r\\n    /// @notice base of the APPROX_PRECISION\\r\\n    uint256 public constant APPROX_PRECISION_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice number of seconds to reset priceAverage\\r\\n    uint256 private constant MAX_BLOCK_DIFF_SECONDS = 300;\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 numbers are approximatively equal, using APPROX_PRECISION\\r\\n     * @param _x number to compare\\r\\n     * @param _y number to compare\\r\\n     * @return true if numbers are approximatively equal, false otherwise\\r\\n     */\\r\\n    function approxEq(uint256 _x, uint256 _y) internal pure returns (bool) {\\r\\n        if (_x > _y) {\\r\\n            return _x < (_y + (_y * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        } else {\\r\\n            return _y < (_x + (_x * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 ratio are approximatively equal: _xNum _/ xDen ~= _yNum / _yDen\\r\\n     * @param _xNum numerator of the first ratio to compare\\r\\n     * @param _xDen denominator of the first ratio to compare\\r\\n     * @param _yNum numerator of the second ratio to compare\\r\\n     * @param _yDen denominator of the second ratio to compare\\r\\n     * @return true if ratio are approximatively equal, false otherwise\\r\\n     */\\r\\n    function ratioApproxEq(uint256 _xNum, uint256 _xDen, uint256 _yNum, uint256 _yDen) internal pure returns (bool) {\\r\\n        return approxEq(_xNum * _yDen, _xDen * _yNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update priceAverage given old timestamp, new timestamp and prices\\r\\n     * @param _fictiveReserveIn ratio component of the new price of the in-token\\r\\n     * @param _fictiveReserveOut ratio component of the new price of the out-token\\r\\n     * @param _priceAverageLastTimestamp timestamp of the last priceAvregae update (0, if never updated)\\r\\n     * @param _priceAverageIn ratio component of the last priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the last priceAverage of the out-token\\r\\n     * @param _currentTimestamp timestamp of the priceAverage to update\\r\\n     * @return newPriceAverageIn_ ratio component of the updated priceAverage of the in-token\\r\\n     * @return newPriceAverageOut_ ratio component of the updated priceAverage of the out-token\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) internal pure returns (uint256 newPriceAverageIn_, uint256 newPriceAverageOut_) {\\r\\n        require(_currentTimestamp >= _priceAverageLastTimestamp, \\\"SmardexPair: INVALID_TIMESTAMP\\\");\\r\\n\\r\\n        // very first time\\r\\n        if (_priceAverageLastTimestamp == 0) {\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ = _fictiveReserveOut;\\r\\n        }\\r\\n        // another tx has been done in the same block\\r\\n        else if (_priceAverageLastTimestamp == _currentTimestamp) {\\r\\n            newPriceAverageIn_ = _priceAverageIn;\\r\\n            newPriceAverageOut_ = _priceAverageOut;\\r\\n        }\\r\\n        // need to compute new linear-average price\\r\\n        else {\\r\\n            // compute new price:\\r\\n            uint256 _timeDiff = Math.min(_currentTimestamp - _priceAverageLastTimestamp, MAX_BLOCK_DIFF_SECONDS);\\r\\n\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ =\\r\\n                (((MAX_BLOCK_DIFF_SECONDS - _timeDiff) * _priceAverageOut * newPriceAverageIn_) /\\r\\n                    _priceAverageIn +\\r\\n                    _timeDiff *\\r\\n                    _fictiveReserveOut) /\\r\\n                MAX_BLOCK_DIFF_SECONDS;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountIn so that the price reach the price Average\\r\\n     * @param _amountIn the amountIn requested, it's the maximum possible value for firstAmountIn_\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @param _priceAverageIn ratio component of the priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the priceAverage of the out-token\\r\\n     * @return firstAmountIn_ the first amount of in-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountIn\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountIn_ will be set to _amountIn\\r\\n     */\\r\\n    function computeFirstTradeQtyIn(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut\\r\\n    ) internal pure returns (uint256 firstAmountIn_) {\\r\\n        // default value\\r\\n        firstAmountIn_ = _amountIn;\\r\\n\\r\\n        // if trade is in the good direction\\r\\n        if (_fictiveReserveOut * _priceAverageIn > _fictiveReserveIn * _priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _toSub = _fictiveReserveIn * (FEES_BASE + REVERSE_FEES_TOTAL - FEES_POOL);\\r\\n            uint256 _toDiv = (REVERSE_FEES_TOTAL + FEES_LP) << 1;\\r\\n            uint256 _inSqrt = (((_fictiveReserveIn * _fictiveReserveOut) << 2) / _priceAverageOut) *\\r\\n                _priceAverageIn *\\r\\n                (REVERSE_FEES_TOTAL * (FEES_BASE - FEES_POOL)) +\\r\\n                (_fictiveReserveIn * _fictiveReserveIn * (FEES_LP * FEES_LP));\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            if (_inSqrt < (_toSub + _amountIn * _toDiv) ** 2) {\\r\\n                firstAmountIn_ = (Math.sqrt(_inSqrt) - _toSub) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountOut so that the price reach the price Average\\r\\n     * @param _amountOut the amountOut requested, it's the maximum possible value for firstAmountOut_\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @param _priceAverageIn ratio component of the priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the priceAverage of the out-token\\r\\n     * @return firstAmountOut_ the first amount of out-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountOut\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountOut_ will be set to _amountOut\\r\\n     */\\r\\n    function computeFirstTradeQtyOut(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut\\r\\n    ) internal pure returns (uint256 firstAmountOut_) {\\r\\n        // default value\\r\\n        firstAmountOut_ = _amountOut;\\r\\n\\r\\n        // if trade is in the good direction\\r\\n        if (_fictiveReserveOut * _priceAverageIn > _fictiveReserveIn * _priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _fictiveReserveOutPredFees = (_fictiveReserveIn * FEES_LP * _priceAverageOut) / _priceAverageIn;\\r\\n            uint256 _toAdd = ((_fictiveReserveOut * REVERSE_FEES_TOTAL) << 1) + _fictiveReserveOutPredFees;\\r\\n            uint256 _toDiv = REVERSE_FEES_TOTAL << 1;\\r\\n            uint256 _inSqrt = (((_fictiveReserveOut * _fictiveReserveOutPredFees) << 2) *\\r\\n                (REVERSE_FEES_TOTAL * (FEES_BASE - FEES_POOL))) /\\r\\n                FEES_LP +\\r\\n                _fictiveReserveOutPredFees *\\r\\n                _fictiveReserveOutPredFees;\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            if (_inSqrt > (_toAdd - _amountOut * _toDiv) ** 2) {\\r\\n                firstAmountOut_ = (_toAdd - Math.sqrt(_inSqrt)) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute fictive reserves\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token\\r\\n     */\\r\\n    function computeFictiveReserves(\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    ) internal pure returns (uint256 newFictiveReserveIn_, uint256 newFictiveReserveOut_) {\\r\\n        if (_reserveOut * _fictiveReserveIn < _reserveIn * _fictiveReserveOut) {\\r\\n            uint256 _temp = (((_reserveOut * _reserveOut) / _fictiveReserveOut) * _fictiveReserveIn) / _reserveIn;\\r\\n            newFictiveReserveIn_ =\\r\\n                (_temp * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut +\\r\\n                (_reserveOut * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut;\\r\\n            newFictiveReserveOut_ = _reserveOut + _temp;\\r\\n        } else {\\r\\n            newFictiveReserveIn_ = (_fictiveReserveIn * _reserveOut) / _fictiveReserveOut + _reserveIn;\\r\\n            newFictiveReserveOut_ = (_reserveIn * _fictiveReserveOut) / _fictiveReserveIn + _reserveOut;\\r\\n        }\\r\\n\\r\\n        // div all values by 4\\r\\n        newFictiveReserveIn_ >>= 2;\\r\\n        newFictiveReserveOut_ >>= 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountIn is specified\\r\\n     * @param _amountIn qty of token that arrives in the contract\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return amountOut_ qty of token that leaves in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleOut(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _amountInWithFee = _amountIn * REVERSE_FEES_TOTAL;\\r\\n        uint256 _numerator = _amountInWithFee * _fictiveReserveOut;\\r\\n        uint256 _denominator = _fictiveReserveIn * FEES_BASE + _amountInWithFee;\\r\\n        amountOut_ = _numerator / _denominator;\\r\\n\\r\\n        // update new reserves and add lp-fees to pools\\r\\n        uint256 _amountInWithFeeLp = (_amountInWithFee + (_amountIn * FEES_LP)) / FEES_BASE;\\r\\n        newReserveIn_ = _reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _reserveOut - amountOut_;\\r\\n        newFictiveReserveOut_ = _fictiveReserveOut - amountOut_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountOut is specified\\r\\n     * @param _amountOut qty of token that leaves in the contract\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return amountIn_ qty of token that arrives in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleIn(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _numerator = _fictiveReserveIn * _amountOut * FEES_BASE;\\r\\n        uint256 _denominator = (_fictiveReserveOut - _amountOut) * REVERSE_FEES_TOTAL;\\r\\n        amountIn_ = _numerator / _denominator + 1;\\r\\n\\r\\n        // update new reserves\\r\\n        uint256 _amountInWithFeeLp = (amountIn_ * (REVERSE_FEES_TOTAL + FEES_LP)) / FEES_BASE;\\r\\n        newReserveIn_ = _reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _reserveOut - _amountOut;\\r\\n        newFictiveReserveOut_ = _fictiveReserveOut - _amountOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _amountIn quantity of token the user want to swap (to sell)\\r\\n     * @param _reserveIn reserves of the selling token (getReserve())\\r\\n     * @param _reserveOut reserves of the buying token (getReserve())\\r\\n     * @param _fictiveReserveIn fictive reserve of the selling token (getFictiveReserves())\\r\\n     * @param _fictiveReserveOut fictive reserve of the buying token (getFictiveReserves())\\r\\n     * @param _priceAverageIn price average of the selling token\\r\\n     * @param _priceAverageOut price average of the buying token\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_amountIn > 0, \\\"SmarDexLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _reserveIn > 0 && _reserveOut > 0 && _fictiveReserveIn > 0 && _fictiveReserveOut > 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _amountInWithFees = (_amountIn * REVERSE_FEES_TOTAL) / FEES_BASE;\\r\\n        uint256 _firstAmountIn = computeFirstTradeQtyIn(\\r\\n            _amountInWithFees,\\r\\n            _fictiveReserveIn,\\r\\n            _fictiveReserveOut,\\r\\n            _priceAverageIn,\\r\\n            _priceAverageOut\\r\\n        );\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountIn == _amountInWithFees &&\\r\\n            ratioApproxEq(_fictiveReserveIn, _fictiveReserveOut, _priceAverageIn, _priceAverageOut)\\r\\n        ) {\\r\\n            (_fictiveReserveIn, _fictiveReserveOut) = computeFictiveReserves(\\r\\n                _reserveIn,\\r\\n                _reserveOut,\\r\\n                _fictiveReserveIn,\\r\\n                _fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // avoid stack too deep\\r\\n        {\\r\\n            uint256 _firstAmountInNoFees = (_firstAmountIn * FEES_BASE) / REVERSE_FEES_TOTAL;\\r\\n            (\\r\\n                amountOut_,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                _firstAmountInNoFees,\\r\\n                _reserveIn,\\r\\n                _reserveOut,\\r\\n                _fictiveReserveIn,\\r\\n                _fictiveReserveOut\\r\\n            );\\r\\n\\r\\n            // update amountIn in case there is a second trade\\r\\n            _amountIn -= _firstAmountInNoFees;\\r\\n        }\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountIn < _amountInWithFees) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountOutNoFees;\\r\\n            (\\r\\n                _secondAmountOutNoFees,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                _amountIn,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n            amountOut_ += _secondAmountOutNoFees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _amountOut quantity of token the user want to swap (to buy)\\r\\n     * @param _reserveIn reserves of the selling token (getReserve())\\r\\n     * @param _reserveOut reserves of the buying token (getReserve())\\r\\n     * @param _fictiveReserveIn fictive reserve of the selling token (getFictiveReserves())\\r\\n     * @param _fictiveReserveOut fictive reserve of the buying token (getFictiveReserves())\\r\\n     * @param _priceAverageIn price average of the selling token\\r\\n     * @param _priceAverageOut price average of the buying token\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_amountOut > 0, \\\"SmarDexLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _amountOut < _fictiveReserveOut &&\\r\\n                _reserveIn > 0 &&\\r\\n                _reserveOut > 0 &&\\r\\n                _fictiveReserveIn > 0 &&\\r\\n                _fictiveReserveOut > 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _firstAmountOut = computeFirstTradeQtyOut(\\r\\n            _amountOut,\\r\\n            _fictiveReserveIn,\\r\\n            _fictiveReserveOut,\\r\\n            _priceAverageIn,\\r\\n            _priceAverageOut\\r\\n        );\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountOut == _amountOut &&\\r\\n            ratioApproxEq(_fictiveReserveIn, _fictiveReserveOut, _priceAverageIn, _priceAverageOut)\\r\\n        ) {\\r\\n            (_fictiveReserveIn, _fictiveReserveOut) = computeFictiveReserves(\\r\\n                _reserveIn,\\r\\n                _reserveOut,\\r\\n                _fictiveReserveIn,\\r\\n                _fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = applyKConstRuleIn(\\r\\n            _firstAmountOut,\\r\\n            _reserveIn,\\r\\n            _reserveOut,\\r\\n            _fictiveReserveIn,\\r\\n            _fictiveReserveOut\\r\\n        );\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountOut < _amountOut) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountIn;\\r\\n            (\\r\\n                _secondAmountIn,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleIn(\\r\\n                _amountOut - _firstAmountOut,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n            amountIn_ += _secondAmountIn;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x79afac3254ab43f5700d3ccfaf522baa9daf4e740e6dd8c7dc9b34a59b62dace\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n/**\\r\\n * @title TransferHelper\\r\\n * @notice helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\n * @custom:from Uniswap lib, adapted to version 0.8.17\\r\\n * @custom:url https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x60ecd8f2f8adab497b83061cd90c8ef6995bb629bbb0c5a88ddf08868cf9f8f4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051615e54380380615e5483398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b615dc1806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af61461011b578063c9c6539614610130578063e6a4390514610143578063f46901ed1461018457600080fd5b8063017e7e581461008d578063094b7415146100d75780631e3dd18b146100f7578063574f2ba31461010a575b600080fd5b6000546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6001546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6100ad610105366004610774565b610197565b6003546040519081526020016100ce565b61012e6101293660046107b6565b6101ce565b005b6100ad61013e3660046107d8565b61029b565b6100ad6101513660046107d8565b600260209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b61012e6101923660046107b6565b61069e565b600381815481106101a757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff163314610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f536d61724465783a20464f5242494444454e000000000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f536d61724465783a204944454e544943414c5f41444452455353455300000000604482015260640161024b565b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061036f578385610372565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166103f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f536d61724465783a205a45524f5f414444524553530000000000000000000000604482015260640161024b565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260026020908152604080832085851684529091529020541615610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536d61724465783a20504149525f455849535453000000000000000000000000604482015260640161024b565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b1660348201526000906048016040516020818303038152906040528051906020012090506000816040516104f690610766565b8190604051809103906000f5905080158015610516573d6000803e3d6000fd5b506040517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301529192509082169063485cc95590604401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff848116600081815260026020818152604080842089871680865290835281852080549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015293975087937f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f536d61724465783a20464f5242494444454e0000000000000000000000000000604482015260640161024b565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6155a9806200080c83390190565b60006020828403121561078657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107b157600080fd5b919050565b6000602082840312156107c857600080fd5b6107d18261078d565b9392505050565b600080604083850312156107eb57600080fd5b6107f48361078d565b91506108026020840161078d565b9050925092905056fe610140604052600c80546001600160f81b0316600160f81b1790553480156200002757600080fd5b506040518060400160405280601081526020016f29b6b0b92232bc10262816aa37b5b2b760811b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280601081526020016f29b6b0b92232bc10262816aa37b5b2b760811b815250604051806040016040528060078152602001660534445582d4c560cc1b8152508160039081620000c6919062000228565b506004620000d5828262000228565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060c052610120525050600780546001600160a01b0319163317905550620002f4915050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001ae57607f821691505b602082108103620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022357600081815260208120601f850160051c81016020861015620001fe5750805b601f850160051c820191505b818110156200021f578281556001016200020a565b5050505b505050565b81516001600160401b0381111562000244576200024462000183565b6200025c8162000255845462000199565b84620001d5565b602080601f8311600181146200029457600084156200027b5750858301515b600019600386901b1c1916600185901b1785556200021f565b600085815260208120601f198616915b82811015620002c557888601518255948401946001909101908401620002a4565b5085821015620002e45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161012051615265620003446000396000612ce401526000612d3301526000612d0e01526000612c6701526000612c9101526000612cbb01526152656000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806389afcb44116100ee578063d21220a711610097578063dd62ed3e11610071578063dd62ed3e14610415578063ee2046c71461045b578063f74bfe8e146104ad578063fb753b69146104c057600080fd5b8063d21220a7146103a9578063d505accf146103c9578063db8d55f1146103dc57600080fd5b8063a457c2d7116100c8578063a457c2d714610363578063a9059cbb14610376578063c45a01551461038957600080fd5b806389afcb441461031657806395d89b41146103295780639a20767b1461033157600080fd5b806323b872dd1161015b578063395093511161013557806339509351146102a5578063485cc955146102b857806370a08231146102cd5780637ecebe001461030357600080fd5b806323b872dd1461027b578063313ce5671461028e5780633644e5151461029d57600080fd5b80630dfe16811161018c5780630dfe16811461021157806318160ddd146102565780631f18b3711461026857600080fd5b806306fdde03146101b35780630902f1ac146101d1578063095ea7b3146101ee575b600080fd5b6101bb6104d3565b6040516101c89190614bc1565b60405180910390f35b6101d9610565565b604080519283526020830191909152016101c8565b6102016101fc366004614c34565b6106f2565b60405190151581526020016101c8565b6008546102319073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c8565b6002545b6040519081526020016101c8565b6101d9610276366004614c6e565b61070c565b610201610289366004614d0d565b611735565b604051601281526020016101c8565b61025a611759565b6102016102b3366004614c34565b611768565b6102cb6102c6366004614d4e565b6117b4565b005b61025a6102db366004614d87565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61025a610311366004614d87565b611888565b6101d9610324366004614d87565b6118b3565b6101bb6118d1565b600a546fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166101d9565b610201610371366004614c34565b6118e0565b610201610384366004614c34565b6119b1565b6007546102319073ffffffffffffffffffffffffffffffffffffffff1681565b6009546102319073ffffffffffffffffffffffffffffffffffffffff1681565b6102cb6103d7366004614da4565b6119bf565b600c546cffffffffffffffffffffffffff65010000000000820481169172010000000000000000000000000000000000009004166101d9565b61025a610423366004614d4e565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b600b54600c54604080516fffffffffffffffffffffffffffffffff8085168252700100000000000000000000000000000000909404909316602084015264ffffffffff909116908201526060016101c8565b61025a6104bb366004614e1b565b611b7e565b6101d96104ce366004614e65565b611b9e565b6060600380546104e290614ea8565b80601f016020809104026020016040519081016040528092919081815260200182805461050e90614ea8565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b5050505050905090565b600c546008546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000928392650100000000009091046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190614ef5565b6106239190614f3d565b600c546009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292945072010000000000000000000000000000000000009091046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190614ef5565b6106ec9190614f3d565b90509091565b600033610700818585611bbe565b60019150505b92915050565b600c5460009081907f0100000000000000000000000000000000000000000000000000000000000000900460ff166001146107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f536d61724465783a204c4f434b4544000000000000000000000000000000000060448201526064015b60405180910390fd5b600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0200000000000000000000000000000000000000000000000000000000000000179055600085900361085c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536d61724465783a205a45524f5f414d4f554e54000000000000000000000000604482015260640161079f565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260085473ffffffffffffffffffffffffffffffffffffffff90811660a08301526009541660c082015260e0810182905261010081019190915286610a8657600c5460c08201516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015272010000000000000000000000000000000000009092046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190614ef5565b61098d9190614f3d565b600c5460a08301516040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152650100000000009092046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190614ef5565b610a489190614f3d565b600a54600b546fffffffffffffffffffffffffffffffff70010000000000000000000000000000000080840482169382169290810482169116610c46565b600c5460a08201516040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152650100000000009092046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190614ef5565b610b419190614f3d565b600c5460c08301516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015272010000000000000000000000000000000000009092046cffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190614ef5565b610c099190614f3d565b600a54600b546fffffffffffffffffffffffffffffffff808316927001000000000000000000000000000000009081900482169280831692919004165b6fffffffffffffffffffffffffffffffff90811660808801819052918116606088018190529281166040880181905293166020870181905261010087019490945260e0860194909452600c54610ca79464ffffffffff909116919042611d71565b6080830152606082015286610cd657610cc38160800151611e7a565b610cd08260600151611e7a565b42610cf2565b610ce38160600151611e7a565b610cf08260800151611e7a565b425b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff929092169190911790557fffffffffffffffffffffffffffffffff000000000000000000000000000000007001000000000000000000000000000000006fffffffffffffffffffffffffffffffff9283160216911617600b556000861315610dd3576000610db2610d8e88611f20565b8360e001518461010001518560200151866040015187606001518860800151611f8c565b6040870152602086015250909150610dcb9050816121fd565b825250610e2a565b6000610e0d610de9610de489614f50565b611f20565b8360e0015184610100015185602001518660400151876060015188608001516122af565b6040870152602086015250909150610e269050816121fd565b8252505b86610e515760008613610e405780518690610e6e565b8051610e4b90614f50565b86610e6e565b60008613610e6157805186610e6e565b80518690610e6e90614f50565b60a0830151919450925073ffffffffffffffffffffffffffffffffffffffff898116911614801590610ed057508060c0015173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b610f36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f536d61724465783a20494e56414c49445f544f00000000000000000000000000604482015260640161079f565b86156111d3576000821215610f5d57610f5d8160c001518984610f5890614f50565b6124bc565b6040517fa1dab4eb000000000000000000000000000000000000000000000000000000008152339063a1dab4eb90610f9f90869086908a908a90600401614f88565b600060405180830381600087803b158015610fb957600080fd5b505af1158015610fcd573d6000803e3d6000fd5b5050505060e08101516008546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190614ef5565b60e0830181905261107885611f20565b600c5461109d906501000000000090046cffffffffffffffffffffffffff1684614fe3565b6110a79190614fe3565b1115611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f536d61724465783a20494e53554646494349454e545f544f4b454e305f494e5060448201527f55545f414d4f554e540000000000000000000000000000000000000000000000606482015260840161079f565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c79190614ef5565b6101008301525061146e565b60008312156111ef576111ef8160a001518985610f5890614f50565b6040517fa1dab4eb000000000000000000000000000000000000000000000000000000008152339063a1dab4eb9061123190869086908a908a90600401614f88565b600060405180830381600087803b15801561124b57600080fd5b505af115801561125f573d6000803e3d6000fd5b5050505060e08101516009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190614ef5565b60e0830181905261130a84611f20565b600c5461133c90720100000000000000000000000000000000000090046cffffffffffffffffffffffffff1684614fe3565b6113469190614fe3565b11156113d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f536d61724465783a20494e53554646494349454e545f544f4b454e315f494e5060448201527f55545f414d4f554e540000000000000000000000000000000000000000000000606482015260840161079f565b6008546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190614ef5565b610100830152505b60008073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190614ff6565b73ffffffffffffffffffffffffffffffffffffffff161415905087156115e55780156115b95761155e61271061154f600287615013565b6115599190615059565b612652565b600c80546005906115889084906501000000000090046cffffffffffffffffffffffffff16615094565b92506101000a8154816cffffffffffffffffffffffffff02191690836cffffffffffffffffffffffffff1602179055505b6115e08260e0015183610100015184602001518560400151866060015187608001516126f1565b61168b565b8015611664576115fc61271061154f600286615013565b600c8054601290611633908490720100000000000000000000000000000000000090046cffffffffffffffffffffffffff16615094565b92506101000a8154816cffffffffffffffffffffffffff02191690836cffffffffffffffffffffffffff1602179055505b61168b8261010001518360e0015184604001518560200151866080015187606001516126f1565b604080518581526020810185905273ffffffffffffffffffffffffffffffffffffffff8b169133917fa4228e1eb11eb9b31069d9ed20e7af9a010ca1a02d4855cee54e08e188fcc32c910160405180910390a35050600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f010000000000000000000000000000000000000000000000000000000000000017905590969095509350505050565b600033611743858285612907565b61174e8585856129de565b506001949350505050565b6000611763612c4d565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061070090829086906117af908790614fe3565b611bbe565b60075473ffffffffffffffffffffffffffffffffffffffff163314611835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f536d61724465783a20464f5242494444454e0000000000000000000000000000604482015260640161079f565b6008805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560098054929093169116179055565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812054610706565b6000806118bf83612d81565b90925090506118cc613319565b915091565b6060600480546104e290614ea8565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156119a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161079f565b61174e8286868403611bbe565b6000336107008185856129de565b83421115611a29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161079f565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888611a588c6134ba565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000611ac0826134ef565b90506000611ad082878787613558565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161079f565b611b728a8a8a611bbe565b50505050505050505050565b6000611b8c85858585613580565b9050611b96613319565b949350505050565b600080611baf888888888888611d71565b90999098509650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff8216611d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008085831015611dde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536d6172646578506169723a20494e56414c49445f54494d455354414d500000604482015260640161079f565b85600003611df0575086905085611e6f565b828603611e01575083905082611e6f565b6000611e18611e108886614f3d565b61012c613d1e565b899350905061012c611e2a8983615013565b878588611e398661012c614f3d565b611e439190615013565b611e4d9190615013565b611e579190615059565b611e619190614fe3565b611e6b9190615059565b9150505b965096945050505050565b60006fffffffffffffffffffffffffffffffff821115611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3238206269747300000000000000000000000000000000000000000000000000606482015260840161079f565b5090565b600080821215611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161079f565b6000806000806000808c11612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f536d61724465784c6962726172793a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e540000000000000000000000000000000000000000000000606482015260840161079f565b60008b118015612033575060008a115b801561203f5750600089115b801561204b5750600088115b6120d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f536d61724465784c6962726172793a20494e53554646494349454e545f4c495160448201527f5549444954590000000000000000000000000000000000000000000000000000606482015260840161079f565b60006127106120e860026005614fe3565b6120f490612710614f3d565b6120fe908f615013565b6121089190615059565b90506000612119828c8c8c8c613d36565b9050818114801561213157506121318b8b8b8b613e98565b15612148576121428d8d8d8d613eb6565b909b5099505b600061215660026005614fe3565b61216290612710614f3d565b61216e61271084615013565b6121789190615059565b9050612187818f8f8f8f613f9f565b809850819950829a50839b50849c505050505050808f6121a79190614f3d565b9e5050818110156121ec576121be86868686613eb6565b909450925060006121d28f88888888613f9f565b929a509098509650945090506121e88189614fe3565b9750505b505097509750975097509792505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e74323536000000000000000000000000000000000000000000000000606482015260840161079f565b6000806000806000808c11612346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f536d61724465784c6962726172793a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e5400000000000000000000000000000000000000000000606482015260840161079f565b878c108015612355575060008b115b8015612361575060008a115b801561236d5750600089115b80156123795750600088115b612405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f536d61724465784c6962726172793a20494e53554646494349454e545f4c495160448201527f5549444954590000000000000000000000000000000000000000000000000000606482015260840161079f565b60006124148d8b8b8b8b614068565b90508c8114801561242c575061242c8a8a8a8a613e98565b156124435761243d8c8c8c8c613eb6565b909a5098505b612450818d8d8d8d6141bb565b9399509197509550935091508c8110156124ac5761247085858585613eb6565b80935081945050506000612492828f6124899190614f3d565b878787876141bb565b9299509097509550935090506124a88188614fe3565b9650505b5097509750975097509792505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161255391906150c1565b6000604051808303816000865af19150503d8060008114612590576040519150601f19603f3d011682016040523d82523d6000602084013e612595565b606091505b50915091508180156125bf5750805115806125bf5750808060200190518101906125bf91906150dd565b61264b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161079f565b5050505050565b60006cffffffffffffffffffffffffff821115611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3034206269747300000000000000000000000000000000000000000000000000606482015260840161079f565b6000841180156127015750600083115b61278d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f536d61724465783a20464943544956455f52455345525645535f544f4f5f4c4f60448201527f5700000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b6fffffffffffffffffffffffffffffffff84118015906127bd57506fffffffffffffffffffffffffffffffff8311155b612823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536d61724465783a204f564552464c4f57000000000000000000000000000000604482015260640161079f565b6fffffffffffffffffffffffffffffffff8381167001000000000000000000000000000000000290851617600a55600c547f2a368c7f33bb86e2d999940a3989d849031aff29b750f67947e6b8e8c3d2ffd690612899906cffffffffffffffffffffffffff650100000000009091041688614f3d565b600c546128cb90720100000000000000000000000000000000000090046cffffffffffffffffffffffffff1688614f3d565b6040805192835260208301919091528101869052606081018590526080810184905260a0810183905260c00160405180910390a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146129d857818110156129cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161079f565b6129d88484848403611bbe565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316612a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff8216612b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015612bda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36129d8565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015612cb357507f000000000000000000000000000000000000000000000000000000000000000046145b15612cdd57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600c5460009081907f0100000000000000000000000000000000000000000000000000000000000000900460ff16600114612e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f536d61724465783a204c4f434b45440000000000000000000000000000000000604482015260640161079f565b600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0200000000000000000000000000000000000000000000000000000000000000179055612e696142a0565b506008546009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff928316929091169060009083906370a0823190602401602060405180830381865afa158015612ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f089190614ef5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015612f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9c9190614ef5565b306000908152602081905260409020546002549192509080612fbe8584615013565b612fc89190615059565b975080612fd58484615013565b612fdf9190615059565b9650600088118015612ff15750600087115b61307d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f536d61724465783a20494e53554646494349454e545f4c49515549444954595f60448201527f4255524e45440000000000000000000000000000000000000000000000000000606482015260840161079f565b600a546fffffffffffffffffffffffffffffffff80821691700100000000000000000000000000000000900416826130b58584615013565b6130bf9190615059565b6130c99083614f3d565b9150826130d68583615013565b6130e09190615059565b6130ea9082614f3d565b90506130f63085614463565b613101888c8c6124bc565b61310c878c8b6124bc565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8916906370a0823190602401602060405180830381865afa158015613176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319a9190614ef5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290965073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa158015613207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322b9190614ef5565b600b5490955061326c9087908790859085906fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166126f1565b604080518b8152602081018b905273ffffffffffffffffffffffffffffffffffffffff8d169133917f5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2910160405180910390a35050600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f010000000000000000000000000000000000000000000000000000000000000017905550959794965093945050505050565b600754604080517f017e7e58000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163017e7e589160048083019260209291908290030181865afa158015613389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ad9190614ff6565b604080518082018252601c81527f65786563757465576f726b28616464726573732c616464726573732900000000602091820152600854600954835173ffffffffffffffffffffffffffffffffffffffff9283166024820152908216604480830191909152845180830390910181526064909101845291820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3048c0290000000000000000000000000000000000000000000000000000000017905291519293509083169161347d91906150c1565b6000604051808303816000865af19150503d80600081146129d8576040519150601f19603f3d011682016040523d82523d6000602084013e6129d8565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b60006107066134fc612c4d565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061356987878787614627565b9150915061357681614716565b5095945050505050565b600c546000907f0100000000000000000000000000000000000000000000000000000000000000900460ff16600114613615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f536d61724465783a204c4f434b45440000000000000000000000000000000000604482015260640161079f565b600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001790556136666142a0565b506008546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000918291829173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156136da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fe9190614ef5565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137969190614ef5565b905060006137a360025490565b6040805160a08101825260085473ffffffffffffffffffffffffffffffffffffffff90811682526009548116602083019081528284018e8152606084018e81528d84166080860190815295517f797c4a1300000000000000000000000000000000000000000000000000000000815294518416600486015291518316602485015251604484015251606483015291519091166084820152909150339063797c4a139060a401600060405180830381600087803b15801561386257600080fd5b505af1158015613876573d6000803e3d6000fd5b50506008546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a0823190602401602060405180830381865afa1580156138eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390f9190614ef5565b6009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a79190614ef5565b90506139b38b86614fe3565b821015613a1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536d61724465783a20494e53554646494349454e545f414d4f554e545f300000604482015260640161079f565b613a268a85614fe3565b811015613a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536d61724465783a20494e53554646494349454e545f414d4f554e545f310000604482015260640161079f565b82600003613ae5576103e8613aac613aa78c8e615013565b6148cc565b613ab69190614f3d565b9750613ac661dead6103e86149b4565b613ad1600283615059565b9650613ade600282615059565b9550613b9a565b613b1785613af3858e615013565b613afd9190615059565b85613b08868e615013565b613b129190615059565b613d1e565b975082613b248982614fe3565b600a54613b4391906fffffffffffffffffffffffffffffffff16615013565b613b4d9190615059565b965082613b5a8982614fe3565b600a54613b8d919070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16615013565b613b979190615059565b95505b60008811613c2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f536d61724465783a20494e53554646494349454e545f4c49515549444954595f60448201527f4d494e5445440000000000000000000000000000000000000000000000000000606482015260840161079f565b613c348c896149b4565b600b54613c7290839083908a908a906fffffffffffffffffffffffffffffffff808216917001000000000000000000000000000000009004166126f1565b604080518c8152602081018c905273ffffffffffffffffffffffffffffffffffffffff8e169133917f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee910160405180910390a35050600c80547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0100000000000000000000000000000000000000000000000000000000000000179055509398975050505050505050565b6000818310613d2d5781613d2f565b825b9392505050565b84613d418286615013565b613d4b8486615013565b1115613e8f5760006002613d60816005614fe3565b613d6c90612710614f3d565b613d7890612710614fe3565b613d829190614f3d565b613d8c9087615013565b9050600060016005613d9f600282614fe3565b613dab90612710614f3d565b613db59190614fe3565b901b90506000613dc6600580615013565b613dd08980615013565b613dda9190615013565b613de76002612710614f3d565b613df360026005614fe3565b613dff90612710614f3d565b613e099190615013565b87876002613e178c8e615013565b613e2292911b615059565b613e2c9190615013565b613e369190615013565b613e409190614fe3565b90506002613e4e838b615013565b613e589085614fe3565b613e62919061521a565b811015613e8b578183613e74836148cc565b613e7e9190614f3d565b613e889190615059565b93505b5050505b95945050505050565b6000613e8f613ea78387615013565b613eb18587615013565b614aa7565b600080613ec38387615013565b613ecd8587615013565b1015613f4a576000868585613ee28980615013565b613eec9190615059565b613ef69190615013565b613f009190615059565b905083613f0d8688615013565b613f179190615059565b84613f228784615013565b613f2c9190615059565b613f369190614fe3565b9250613f428187614fe3565b915050613f8f565b8583613f568787615013565b613f609190615059565b613f6a9190614fe3565b91508484613f788589615013565b613f829190615059565b613f8c9190614fe3565b90505b600291821c96911c945092505050565b60008080808080613fb260026005614fe3565b613fbe90612710614f3d565b613fc8908c615013565b90506000613fd68883615013565b9050600082613fe76127108c615013565b613ff19190614fe3565b9050613ffd8183615059565b9750600061271060058f6140119190615013565b61401b9086614fe3565b6140259190615059565b9050614031818e614fe3565b975061403d818c614fe3565b9550614049898d614f3d565b9650614055898b614f3d565b9450505050509550955095509550959050565b846140738286615013565b61407d8486615013565b1115613e8f5760008383614092600589615013565b61409c9190615013565b6140a69190615059565b905060008160016140b960026005614fe3565b6140c590612710614f3d565b6140cf9089615013565b6140da92911b614fe3565b9050600060016140ec60026005614fe3565b6140f890612710614f3d565b901b905060006141088480615013565b60056141176002612710614f3d565b61412360026005614fe3565b61412f90612710614f3d565b6141399190615013565b6002614145888d615013565b61415092911b615013565b61415a9190615059565b6141649190614fe3565b90506002614172838c615013565b61417c9085614f3d565b614186919061521a565b8111156141ae5781614197826148cc565b6141a19085614f3d565b6141ab9190615059565b94505b5050505095945050505050565b600080808080806127106141cf8c8a615013565b6141d99190615013565b905060006141e960026005614fe3565b6141f590612710614f3d565b6141ff8d8a614f3d565b6142099190615013565b90506142158183615059565b614220906001614fe3565b965060006127106005614234600282614fe3565b61424090612710614f3d565b61424a9190614fe3565b614254908a615013565b61425e9190615059565b905061426a818d614fe3565b9650614276818b614fe3565b94506142828d8c614f3d565b955061428e8d8a614f3d565b93505050509550955095509550959050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015614310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143349190614ff6565b73ffffffffffffffffffffffffffffffffffffffff8116158015935090915061443757600c546cffffffffffffffffffffffffff650100000000008204811691720100000000000000000000000000000000000090041681156143de576008546143b59073ffffffffffffffffffffffffffffffffffffffff1684846124bc565b600c80547fffffffffffffffffffffffffffff00000000000000000000000000ffffffffff1690555b8015614431576009546144089073ffffffffffffffffffffffffffffffffffffffff1684836124bc565b600c80547fff00000000000000000000000000ffffffffffffffffffffffffffffffffffff1690555b50505090565b600c80547fff0000000000000000000000000000000000000000000000000000ffffffffff1690555090565b73ffffffffffffffffffffffffffffffffffffffff8216614506576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156145bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561465e575060009050600361470d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156146b2573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166147065760006001925092505061470d565b9150600090505b94509492505050565b600081600481111561472a5761472a615229565b036147325750565b600181600481111561474657614746615229565b036147ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161079f565b60028160048111156147c1576147c1615229565b03614828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161079f565b600381600481111561483c5761483c615229565b036148c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161079f565b50565b6000816000036148de57506000919050565b600060016148eb84614b09565b901c6001901b905060018184816149045761490461502a565b048201901c9050600181848161491c5761491c61502a565b048201901c905060018184816149345761493461502a565b048201901c9050600181848161494c5761494c61502a565b048201901c905060018184816149645761496461502a565b048201901c9050600181848161497c5761497c61502a565b048201901c905060018184816149945761499461502a565b048201901c9050613d2f818285816149ae576149ae61502a565b04613d1e565b73ffffffffffffffffffffffffffffffffffffffff8216614a31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161079f565b8060026000828254614a439190614fe3565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600081831115614add57620f4240614ac0600184615013565b614aca9190615059565b614ad49083614fe3565b83109050610706565b620f4240614aec600185615013565b614af69190615059565b614b009084614fe3565b82109050610706565b600080608083901c15614b1e57608092831c92015b604083901c15614b3057604092831c92015b602083901c15614b4257602092831c92015b601083901c15614b5457601092831c92015b600883901c15614b6657600892831c92015b600483901c15614b7857600492831c92015b600283901c15614b8a57600292831c92015b600183901c156107065760010192915050565b60005b83811015614bb8578181015183820152602001614ba0565b50506000910152565b6020815260008251806020840152614be0816040850160208701614b9d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff811681146148c957600080fd5b60008060408385031215614c4757600080fd5b8235614c5281614c12565b946020939093013593505050565b80151581146148c957600080fd5b600080600080600060808688031215614c8657600080fd5b8535614c9181614c12565b94506020860135614ca181614c60565b935060408601359250606086013567ffffffffffffffff80821115614cc557600080fd5b818801915088601f830112614cd957600080fd5b813581811115614ce857600080fd5b896020828501011115614cfa57600080fd5b9699959850939650602001949392505050565b600080600060608486031215614d2257600080fd5b8335614d2d81614c12565b92506020840135614d3d81614c12565b929592945050506040919091013590565b60008060408385031215614d6157600080fd5b8235614d6c81614c12565b91506020830135614d7c81614c12565b809150509250929050565b600060208284031215614d9957600080fd5b8135613d2f81614c12565b600080600080600080600060e0888a031215614dbf57600080fd5b8735614dca81614c12565b96506020880135614dda81614c12565b95506040880135945060608801359350608088013560ff81168114614dfe57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060008060808587031215614e3157600080fd5b8435614e3c81614c12565b935060208501359250604085013591506060850135614e5a81614c12565b939692955090935050565b60008060008060008060c08789031215614e7e57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600181811c90821680614ebc57607f821691505b6020821081036134e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060208284031215614f0757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561070657610706614f0e565b60007f80000000000000000000000000000000000000000000000000000000000000008203614f8157614f81614f0e565b5060000390565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b8082018082111561070657610706614f0e565b60006020828403121561500857600080fd5b8151613d2f81614c12565b808202811582820484141761070657610706614f0e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261508f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6cffffffffffffffffffffffffff8181168382160190808211156150ba576150ba614f0e565b5092915050565b600082516150d3818460208701614b9d565b9190910192915050565b6000602082840312156150ef57600080fd5b8151613d2f81614c60565b600181815b8085111561515357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561513957615139614f0e565b8085161561514657918102915b93841c93908002906150ff565b509250929050565b60008261516a57506001610706565b8161517757506000610706565b816001811461518d5760028114615197576151b3565b6001915050610706565b60ff8411156151a8576151a8614f0e565b50506001821b610706565b5060208310610133831016604e8410600b84101617156151d6575081810a610706565b6151e083836150fa565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561521257615212614f0e565b029392505050565b6000613d2f60ff84168361515b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000811000aa164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allPairsLength()": {
        "returns": {
          "_0": "quantity in uint256"
        }
      },
      "createPair(address,address)": {
        "params": {
          "_tokenA": "address of tokenA",
          "_tokenB": "address of tokenB"
        },
        "returns": {
          "pair_": "address of the pair created"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "_feeTo": "address to replace"
        }
      },
      "setFeeToSetter(address)": {
        "params": {
          "_feeToSetter": "address to replace"
        }
      }
    },
    "stateVariables": {
      "allPairs": {
        "params": {
          "_index": "index of the pair"
        },
        "return": "address of the pair",
        "returns": {
          "_0": "address of the pair"
        }
      }
    },
    "title": "SmardexFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PairCreated(address,address,address,uint256)": {
        "notice": "emitted at each SmardexPair created"
      }
    },
    "kind": "user",
    "methods": {
      "allPairs(uint256)": {
        "notice": "return the address of the pair at index"
      },
      "allPairsLength()": {
        "notice": "return the quantity of pairs"
      },
      "createPair(address,address)": {
        "notice": "create pair with 2 address"
      },
      "feeTo()": {
        "notice": "return which address fees will be transferred"
      },
      "feeToSetter()": {
        "notice": "return which address can update feeTo"
      },
      "getPair(address,address)": {
        "notice": "return the address of the pair of 2 tokens"
      },
      "setFeeTo(address)": {
        "notice": "set the address who will receive fees, can only be call by feeToSetter"
      },
      "setFeeToSetter(address)": {
        "notice": "set the address who can update feeTo, can only be call by feeToSetter"
      }
    },
    "notice": "facilitates creation of SmardexPair to swap tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4098,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4100,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4106,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 4109,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}