{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\n\nimport \"./IERC20Permit.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/core/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity =0.8.17;\r\n\r\n/**\r\n * @title TransferHelper\r\n * @notice helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\n * @custom:from Uniswap lib, adapted to version 0.8.17\r\n * @custom:url https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\r\n */\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeApprove: approve failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{ value: value }(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/FarmingRange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n// libraries\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// interfaces\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\r\nimport \"./interfaces/IFarmingRange.sol\";\r\n\r\n/**\r\n * @title FarmingRange\r\n * @notice Farming Range allows users to stake LP Tokens to receive various rewards\r\n * @custom:from Contract taken from the alpaca protocol, adapted to version 0.8.17 and modified with more functions\r\n * @custom:url https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/solidity/contracts/6.12/GrazingRange.sol\r\n */\r\ncontract FarmingRange is IFarmingRange, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(uint256 => RewardInfo[]) public campaignRewardInfo;\r\n\r\n    CampaignInfo[] public campaignInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    uint256 public rewardInfoLimit;\r\n    address public immutable rewardManager;\r\n\r\n    constructor(address _rewardManager) {\r\n        rewardInfoLimit = 52;\r\n        require(_rewardManager != address(0), \"FarmingRange::constructor::Reward manager is not defined\");\r\n        rewardManager = _rewardManager;\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external onlyOwner {\r\n        rewardInfoLimit = _updatedRewardInfoLimit;\r\n        emit SetRewardInfoLimit(rewardInfoLimit);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function addCampaignInfo(\r\n        IERC20 _stakingToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _startBlock\r\n    ) external virtual onlyOwner {\r\n        require(_startBlock > block.number, \"FarmingRange::addCampaignInfo::Start block should be in the future\");\r\n        campaignInfo.push(\r\n            CampaignInfo({\r\n                stakingToken: _stakingToken,\r\n                rewardToken: _rewardToken,\r\n                startBlock: _startBlock,\r\n                lastRewardBlock: _startBlock,\r\n                accRewardPerShare: 0,\r\n                totalStaked: 0,\r\n                totalRewards: 0\r\n            })\r\n        );\r\n        emit AddCampaignInfo(campaignInfo.length - 1, _stakingToken, _rewardToken, _startBlock);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function addRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock\r\n    ) public virtual onlyOwner nonReentrant {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        require(\r\n            rewardInfo.length < rewardInfoLimit,\r\n            \"FarmingRange::addRewardInfo::reward info length exceeds the limit\"\r\n        );\r\n        require(\r\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock >= block.number,\r\n            \"FarmingRange::addRewardInfo::reward period ended\"\r\n        );\r\n        require(\r\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock < _endBlock,\r\n            \"FarmingRange::addRewardInfo::bad new endblock\"\r\n        );\r\n        uint256 _startBlock = rewardInfo.length == 0 ? campaign.startBlock : rewardInfo[rewardInfo.length - 1].endBlock;\r\n        uint256 _blockRange = _endBlock - _startBlock;\r\n        uint256 _totalRewards = _rewardPerBlock * _blockRange;\r\n        campaign.totalRewards = campaign.totalRewards + _totalRewards;\r\n        rewardInfo.push(RewardInfo({ endBlock: _endBlock, rewardPerBlock: _rewardPerBlock }));\r\n        _transferFromWithAllowance(campaign.rewardToken, _totalRewards, _campaignID);\r\n        emit AddRewardInfo(_campaignID, rewardInfo.length - 1, _endBlock, _rewardPerBlock);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function addRewardInfoMultiple(\r\n        uint256 _campaignID,\r\n        uint256[] calldata _endBlock,\r\n        uint256[] calldata _rewardPerBlock\r\n    ) external onlyOwner {\r\n        require(_endBlock.length == _rewardPerBlock.length, \"FarmingRange::addRewardMultiple::wrong parameters length\");\r\n        for (uint256 _i; _i != _endBlock.length; ) {\r\n            addRewardInfo(_campaignID, _endBlock[_i], _rewardPerBlock[_i]);\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function updateRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _rewardIndex,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock\r\n    ) public virtual onlyOwner nonReentrant {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        RewardInfo storage selectedRewardInfo = rewardInfo[_rewardIndex];\r\n        uint256 _previousEndBlock = selectedRewardInfo.endBlock;\r\n        _updateCampaign(_campaignID);\r\n        require(_previousEndBlock >= block.number, \"FarmingRange::updateRewardInfo::reward period ended\");\r\n        if (_rewardIndex != 0) {\r\n            require(\r\n                rewardInfo[_rewardIndex - 1].endBlock < _endBlock,\r\n                \"FarmingRange::updateRewardInfo::bad new endblock\"\r\n            );\r\n        }\r\n        if (rewardInfo.length > _rewardIndex + 1) {\r\n            require(\r\n                _endBlock < rewardInfo[_rewardIndex + 1].endBlock,\r\n                \"FarmingRange::updateRewardInfo::reward period end is in next range\"\r\n            );\r\n        }\r\n        (bool _refund, uint256 _diff) = _updateRewardsDiff(\r\n            _rewardIndex,\r\n            _endBlock,\r\n            _rewardPerBlock,\r\n            rewardInfo,\r\n            campaign,\r\n            selectedRewardInfo\r\n        );\r\n        if (!_refund && _diff != 0) {\r\n            _transferFromWithAllowance(campaign.rewardToken, _diff, _campaignID);\r\n        }\r\n        // If _endblock is changed, and if we have another range after the updated one,\r\n        // we need to update rewardPerBlock to distribute on the next new range or we could run out of tokens\r\n        if (_endBlock != _previousEndBlock && rewardInfo.length - 1 > _rewardIndex) {\r\n            RewardInfo storage nextRewardInfo = rewardInfo[_rewardIndex + 1];\r\n            uint256 _nextRewardInfoEndBlock = nextRewardInfo.endBlock;\r\n            uint256 _initialBlockRange = _nextRewardInfoEndBlock - _previousEndBlock;\r\n            uint256 _nextBlockRange = _nextRewardInfoEndBlock - _endBlock;\r\n            uint256 _currentRewardPerBlock = nextRewardInfo.rewardPerBlock;\r\n            uint256 _initialNextTotal = _initialBlockRange * _currentRewardPerBlock;\r\n            _currentRewardPerBlock = (_currentRewardPerBlock * _initialBlockRange) / _nextBlockRange;\r\n            uint256 _nextTotal = _nextBlockRange * _currentRewardPerBlock;\r\n            nextRewardInfo.rewardPerBlock = _currentRewardPerBlock;\r\n            if (_nextTotal < _initialNextTotal) {\r\n                campaign.rewardToken.safeTransfer(rewardManager, _initialNextTotal - _nextTotal);\r\n                campaign.totalRewards -= _initialNextTotal - _nextTotal;\r\n            }\r\n        }\r\n        // UPDATE total\r\n        campaign.totalRewards = _refund ? campaign.totalRewards - _diff : campaign.totalRewards + _diff;\r\n        selectedRewardInfo.endBlock = _endBlock;\r\n        selectedRewardInfo.rewardPerBlock = _rewardPerBlock;\r\n        emit UpdateRewardInfo(_campaignID, _rewardIndex, _endBlock, _rewardPerBlock);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function updateRewardMultiple(\r\n        uint256 _campaignID,\r\n        uint256[] memory _rewardIndex,\r\n        uint256[] memory _endBlock,\r\n        uint256[] memory _rewardPerBlock\r\n    ) public onlyOwner {\r\n        require(\r\n            _rewardIndex.length == _endBlock.length && _rewardIndex.length == _rewardPerBlock.length,\r\n            \"FarmingRange::updateRewardMultiple::wrong parameters length\"\r\n        );\r\n        for (uint256 _i; _i != _rewardIndex.length; ) {\r\n            updateRewardInfo(_campaignID, _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function updateCampaignsRewards(\r\n        uint256[] calldata _campaignID,\r\n        uint256[][] calldata _rewardIndex,\r\n        uint256[][] calldata _endBlock,\r\n        uint256[][] calldata _rewardPerBlock\r\n    ) external onlyOwner {\r\n        require(\r\n            _campaignID.length == _rewardIndex.length &&\r\n                _rewardIndex.length == _endBlock.length &&\r\n                _rewardIndex.length == _rewardPerBlock.length,\r\n            \"FarmingRange::updateCampaignsRewards::wrong rewardInfo length\"\r\n        );\r\n        for (uint256 _i; _i != _campaignID.length; ) {\r\n            updateRewardMultiple(_campaignID[_i], _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function removeLastRewardInfo(uint256 _campaignID) external virtual onlyOwner {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        uint256 _rewardInfoLength = rewardInfo.length;\r\n        require(_rewardInfoLength != 0, \"FarmingRange::updateCampaignsRewards::no rewardInfoLen\");\r\n        RewardInfo storage lastRewardInfo = rewardInfo[_rewardInfoLength - 1];\r\n        uint256 _lastRewardInfoEndBlock = lastRewardInfo.endBlock;\r\n        require(_lastRewardInfoEndBlock > block.number, \"FarmingRange::removeLastRewardInfo::reward period ended\");\r\n        _updateCampaign(_campaignID);\r\n        if (lastRewardInfo.rewardPerBlock != 0) {\r\n            (bool _refund, uint256 _diff) = _updateRewardsDiff(\r\n                _rewardInfoLength - 1,\r\n                _lastRewardInfoEndBlock,\r\n                0,\r\n                rewardInfo,\r\n                campaign,\r\n                lastRewardInfo\r\n            );\r\n            if (_refund) {\r\n                campaign.totalRewards = campaign.totalRewards - _diff;\r\n            }\r\n        }\r\n        rewardInfo.pop();\r\n        emit RemoveRewardInfo(_campaignID, _rewardInfoLength - 1);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256) {\r\n        return campaignRewardInfo[_campaignID].length;\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function campaignInfoLen() external view returns (uint256) {\r\n        return campaignInfo.length;\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function currentEndBlock(uint256 _campaignID) external view virtual returns (uint256) {\r\n        return _endBlockOf(_campaignID, block.number);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function currentRewardPerBlock(uint256 _campaignID) external view virtual returns (uint256) {\r\n        return _rewardPerBlockOf(_campaignID, block.number);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) public pure returns (uint256) {\r\n        if ((_from >= _endBlock) || (_from > _to)) {\r\n            return 0;\r\n        }\r\n        if (_to <= _endBlock) {\r\n            return _to - _from;\r\n        }\r\n        return _endBlock - _from;\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256) {\r\n        return\r\n            _pendingReward(_campaignID, userInfo[_campaignID][_user].amount, userInfo[_campaignID][_user].rewardDebt);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function updateCampaign(uint256 _campaignID) external nonReentrant {\r\n        _updateCampaign(_campaignID);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function massUpdateCampaigns() external nonReentrant {\r\n        uint256 _length = campaignInfo.length;\r\n        for (uint256 _i; _i != _length; ) {\r\n            _updateCampaign(_i);\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function deposit(uint256 _campaignID, uint256 _amount) public nonReentrant {\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\r\n        _updateCampaign(_campaignID);\r\n        if (user.amount != 0) {\r\n            uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\r\n            if (_pending != 0) {\r\n                campaign.rewardToken.safeTransfer(address(msg.sender), _pending);\r\n            }\r\n        }\r\n        if (_amount != 0) {\r\n            user.amount = user.amount + _amount;\r\n            campaign.totalStaked = campaign.totalStaked + _amount;\r\n            campaign.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / (1e20);\r\n        emit Deposit(msg.sender, _amount, _campaignID);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function depositWithPermit(\r\n        uint256 _campaignID,\r\n        uint256 _amount,\r\n        bool _approveMax,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external {\r\n        SafeERC20.safePermit(\r\n            IERC20Permit(address(campaignInfo[_campaignID].stakingToken)),\r\n            msg.sender,\r\n            address(this),\r\n            _approveMax ? type(uint256).max : _amount,\r\n            _deadline,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n\r\n        deposit(_campaignID, _amount);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function withdraw(uint256 _campaignID, uint256 _amount) external nonReentrant {\r\n        _withdraw(_campaignID, _amount);\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function harvest(uint256[] calldata _campaignIDs) external nonReentrant {\r\n        for (uint256 _i; _i != _campaignIDs.length; ) {\r\n            _withdraw(_campaignIDs[_i], 0);\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRange\r\n    function emergencyWithdraw(uint256 _campaignID) external nonReentrant {\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\r\n        uint256 _amount = user.amount;\r\n        campaign.totalStaked = campaign.totalStaked - _amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        campaign.stakingToken.safeTransfer(msg.sender, _amount);\r\n        emit EmergencyWithdraw(msg.sender, _amount, _campaignID);\r\n    }\r\n\r\n    /**\r\n     * @notice function to trick the compilator to use safeTransferFrom in try catch\r\n     * @param _token token to interact with\r\n     * @param _from address who own token\r\n     * @param _to address to transfer token\r\n     * @param _amount quantity to be transferred\r\n     */\r\n    function attemptTransfer(IERC20 _token, address _from, address _to, uint256 _amount) external {\r\n        require(msg.sender == address(this), \"FarmingRange::attemptTransfer::Sender not farming\"); // this function should be called only by this contract\r\n        _token.safeTransferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice return the endblock of the phase that contains _blockNumber\r\n     * @param _campaignID the campaign id of the phases to check\r\n     * @param _blockNumber the block number to check\r\n     * @return the endblock of the phase that contains _blockNumber\r\n     */\r\n    function _endBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\r\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\r\n        uint256 _len = rewardInfo.length;\r\n        if (_len == 0) {\r\n            return 0;\r\n        }\r\n        for (uint256 _i; _i != _len; ) {\r\n            if (_blockNumber <= rewardInfo[_i].endBlock) {\r\n                return rewardInfo[_i].endBlock;\r\n            }\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n        /// @dev when couldn't find any reward info, it means that _blockNumber exceed endblock\r\n        /// so return the latest reward info.\r\n        return rewardInfo[_len - 1].endBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice return the rewardPerBlock of the phase that contains _blockNumber\r\n     * @param _campaignID the campaign id of the phases to check\r\n     * @param _blockNumber the block number to check\r\n     * @return the rewardPerBlock of the phase that contains _blockNumber\r\n     */\r\n    function _rewardPerBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\r\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\r\n        uint256 _len = rewardInfo.length;\r\n        if (_len == 0) {\r\n            return 0;\r\n        }\r\n        for (uint256 _i; _i != _len; ) {\r\n            if (_blockNumber <= rewardInfo[_i].endBlock) {\r\n                return rewardInfo[_i].rewardPerBlock;\r\n            }\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\r\n        /// so return 0\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice in case of reward update, return reward diff and refund user if needed\r\n     * @param _rewardIndex the number of the phase to update\r\n     * @param _endBlock new endblock of the phase\r\n     * @param _rewardPerBlock new rewardPerBlock of the phase\r\n     * @param rewardInfo pointer on the array of rewardInfo in storage\r\n     * @param campaign pointer on the campaign in storage\r\n     * @param selectedRewardInfo pointer on the selectedRewardInfo in storage\r\n     * @return refund_ boolean, true if user got refund\r\n     * @return diff_ the reward difference\r\n     */\r\n    function _updateRewardsDiff(\r\n        uint256 _rewardIndex,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock,\r\n        RewardInfo[] storage rewardInfo,\r\n        CampaignInfo storage campaign,\r\n        RewardInfo storage selectedRewardInfo\r\n    ) internal virtual returns (bool refund_, uint256 diff_) {\r\n        uint256 _previousStartBlock = _rewardIndex == 0 ? campaign.startBlock : rewardInfo[_rewardIndex - 1].endBlock;\r\n        uint256 _newStartBlock = block.number > _previousStartBlock ? block.number : _previousStartBlock;\r\n        uint256 _previousBlockRange = selectedRewardInfo.endBlock - _previousStartBlock;\r\n        uint256 _newBlockRange = _endBlock - _newStartBlock;\r\n        uint256 _selectedRewardPerBlock = selectedRewardInfo.rewardPerBlock;\r\n        uint256 _accumulatedRewards = (_newStartBlock - _previousStartBlock) * _selectedRewardPerBlock;\r\n        uint256 _previousTotalRewards = _selectedRewardPerBlock * _previousBlockRange;\r\n        uint256 _totalRewards = _rewardPerBlock * _newBlockRange;\r\n        refund_ = _previousTotalRewards > _totalRewards + _accumulatedRewards;\r\n        diff_ = refund_\r\n            ? _previousTotalRewards - _totalRewards - _accumulatedRewards\r\n            : _totalRewards + _accumulatedRewards - _previousTotalRewards;\r\n        if (refund_) {\r\n            campaign.rewardToken.safeTransfer(rewardManager, diff_);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice transfer tokens from rewardManger to this contract.\r\n     * @param _rewardToken to reward token to be transferred from the rewardManager to this contract\r\n     * @param _amount qty to be transferred\r\n     * @param _campaignID id of the campaign so the rewardManager can fetch the rewardToken address to transfer\r\n     *\r\n     * @dev in case of fail, not enough allowance is considered to be the reason, so we call resetAllowance(uint256) on\r\n     * the reward manager (which will reset allowance to uint256.max) and we try again to transfer\r\n     */\r\n    function _transferFromWithAllowance(IERC20 _rewardToken, uint256 _amount, uint256 _campaignID) internal {\r\n        try this.attemptTransfer(_rewardToken, rewardManager, address(this), _amount) {} catch {\r\n            rewardManager.call(abi.encodeWithSignature(\"resetAllowance(uint256)\", _campaignID));\r\n            _rewardToken.safeTransferFrom(rewardManager, address(this), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice View function to retrieve pending Reward.\r\n     * @param _campaignID pending reward of campaign id\r\n     * @param _amount qty of staked token\r\n     * @param _rewardDebt user info rewardDebt\r\n     * @return pending rewards\r\n     */\r\n    function _pendingReward(\r\n        uint256 _campaignID,\r\n        uint256 _amount,\r\n        uint256 _rewardDebt\r\n    ) internal view virtual returns (uint256) {\r\n        CampaignInfo memory _campaign = campaignInfo[_campaignID];\r\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\r\n        uint256 _accRewardPerShare = _campaign.accRewardPerShare;\r\n\r\n        if (block.number > _campaign.lastRewardBlock && _campaign.totalStaked != 0) {\r\n            uint256 _cursor = _campaign.lastRewardBlock;\r\n            for (uint256 _i; _i != _rewardInfo.length; ) {\r\n                uint256 _multiplier = getMultiplier(_cursor, block.number, _rewardInfo[_i].endBlock);\r\n                if (_multiplier != 0) {\r\n                    _cursor = _rewardInfo[_i].endBlock;\r\n                    _accRewardPerShare =\r\n                        _accRewardPerShare +\r\n                        ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / _campaign.totalStaked);\r\n                }\r\n                unchecked {\r\n                    ++_i;\r\n                }\r\n            }\r\n        }\r\n        return ((_amount * _accRewardPerShare) / 1e20) - _rewardDebt;\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the given campaign to be up-to-date.\r\n     *         NOTE: All rewards relating to periods devoid of any depositors are sent back to the reward manager.\r\n     * @param _campaignID campaign id\r\n     */\r\n    function _updateCampaign(uint256 _campaignID) internal virtual {\r\n        require(campaignInfo.length > _campaignID, \"FarmingRange::_updateCampaign::Campaign id not valid\");\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\r\n        if (block.number <= campaign.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (campaign.totalStaked == 0) {\r\n            uint256 _amount;\r\n            for (uint256 _i; _i != _rewardInfo.length; ) {\r\n                if (_rewardInfo[_i].endBlock >= campaign.lastRewardBlock) {\r\n                    uint256 _startBlock = _i != 0 ? _rewardInfo[_i - 1].endBlock : campaign.lastRewardBlock;\r\n                    bool _lastRewardInfo = _rewardInfo[_i].endBlock > block.number;\r\n                    uint256 _blockRange = (_lastRewardInfo ? block.number : _rewardInfo[_i].endBlock) -\r\n                        (_startBlock > campaign.lastRewardBlock ? _startBlock : campaign.lastRewardBlock);\r\n                    _amount += _rewardInfo[_i].rewardPerBlock * _blockRange;\r\n                    if (_lastRewardInfo) {\r\n                        break;\r\n                    }\r\n                }\r\n                unchecked {\r\n                    ++_i;\r\n                }\r\n            }\r\n\r\n            if (_amount != 0) {\r\n                campaign.rewardToken.safeTransfer(rewardManager, _amount);\r\n            }\r\n\r\n            campaign.lastRewardBlock = block.number;\r\n\r\n            return;\r\n        }\r\n        /// @dev for each reward info\r\n        for (uint256 _i; _i != _rewardInfo.length; ) {\r\n            // @dev get multiplier based on current Block and rewardInfo's end block\r\n            // multiplier will be a range of either (current block - campaign.lastRewardBlock)\r\n            // or (reward info's endblock - campaign.lastRewardBlock) or 0\r\n            uint256 _multiplier = getMultiplier(campaign.lastRewardBlock, block.number, _rewardInfo[_i].endBlock);\r\n            if (_multiplier != 0) {\r\n                // @dev if currentBlock exceed end block, use end block as the last reward block\r\n                // so that for the next iteration, previous endBlock will be used as the last reward block\r\n                if (block.number > _rewardInfo[_i].endBlock) {\r\n                    campaign.lastRewardBlock = _rewardInfo[_i].endBlock;\r\n                } else {\r\n                    campaign.lastRewardBlock = block.number;\r\n                }\r\n                campaign.accRewardPerShare =\r\n                    campaign.accRewardPerShare +\r\n                    ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / campaign.totalStaked);\r\n            }\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\r\n     * @param _campaignID campaign id\r\n     * @param _amount amount to withdraw\r\n     */\r\n    function _withdraw(uint256 _campaignID, uint256 _amount) internal {\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\r\n        require(user.amount >= _amount, \"FarmingRange::withdraw::bad withdraw amount\");\r\n        _updateCampaign(_campaignID);\r\n        uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\r\n        if (_pending != 0) {\r\n            campaign.rewardToken.safeTransfer(msg.sender, _pending);\r\n        }\r\n        if (_amount != 0) {\r\n            user.amount = user.amount - _amount;\r\n            campaign.totalStaked = campaign.totalStaked - _amount;\r\n            campaign.stakingToken.safeTransfer(msg.sender, _amount);\r\n        }\r\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / 1e20;\r\n\r\n        emit Withdraw(msg.sender, _amount, _campaignID);\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/FarmingRangeL2Arbitrum.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"./FarmingRange.sol\";\r\n\r\n// interfaces\r\nimport \"./interfaces/IFarmingRangeL2Arbitrum.sol\";\r\nimport \"./interfaces/IArbSys.sol\";\r\n\r\n/**\r\n * @title FarmingRangeArbitrum\r\n * @notice Farming Range allows users to stake LP Tokens to receive various rewards on Arbitrum\r\n * @custom:from Contract taken from the alpaca protocol, adapted to version 0.8.17 and modified with more functions\r\n * @custom:url https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/solidity/contracts/6.12/GrazingRange.sol\r\n */\r\ncontract FarmingRangeL2Arbitrum is FarmingRange, IFarmingRangeArbitrum {\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor(address _rewardManager) FarmingRange(_rewardManager) {}\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function addCampaignInfo(\r\n        IERC20 _stakingToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _startBlock\r\n    ) external override onlyOwner {\r\n        require(\r\n            _startBlock > arbitrumBlockNumber(),\r\n            \"FarmingRange::addCampaignInfo::Start block should be in the future\"\r\n        );\r\n        campaignInfo.push(\r\n            CampaignInfo({\r\n                stakingToken: _stakingToken,\r\n                rewardToken: _rewardToken,\r\n                startBlock: _startBlock,\r\n                lastRewardBlock: _startBlock,\r\n                accRewardPerShare: 0,\r\n                totalStaked: 0,\r\n                totalRewards: 0\r\n            })\r\n        );\r\n        emit AddCampaignInfo(campaignInfo.length - 1, _stakingToken, _rewardToken, _startBlock);\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function addRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock\r\n    ) public override onlyOwner nonReentrant {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        require(\r\n            rewardInfo.length < rewardInfoLimit,\r\n            \"FarmingRange::addRewardInfo::reward info length exceeds the limit\"\r\n        );\r\n        require(\r\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock >= arbitrumBlockNumber(),\r\n            \"FarmingRange::addRewardInfo::reward period ended\"\r\n        );\r\n        require(\r\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock < _endBlock,\r\n            \"FarmingRange::addRewardInfo::bad new endblock\"\r\n        );\r\n        uint256 _startBlock = rewardInfo.length == 0 ? campaign.startBlock : rewardInfo[rewardInfo.length - 1].endBlock;\r\n        uint256 _blockRange = _endBlock - _startBlock;\r\n        uint256 _totalRewards = _rewardPerBlock * _blockRange;\r\n        campaign.totalRewards = campaign.totalRewards + _totalRewards;\r\n        rewardInfo.push(RewardInfo({ endBlock: _endBlock, rewardPerBlock: _rewardPerBlock }));\r\n        _transferFromWithAllowance(campaign.rewardToken, _totalRewards, _campaignID);\r\n        emit AddRewardInfo(_campaignID, rewardInfo.length - 1, _endBlock, _rewardPerBlock);\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function updateRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _rewardIndex,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock\r\n    ) public override onlyOwner nonReentrant {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        RewardInfo storage selectedRewardInfo = rewardInfo[_rewardIndex];\r\n        uint256 _previousEndBlock = selectedRewardInfo.endBlock;\r\n        _updateCampaign(_campaignID);\r\n        require(_previousEndBlock >= arbitrumBlockNumber(), \"FarmingRange::updateRewardInfo::reward period ended\");\r\n        if (_rewardIndex != 0) {\r\n            require(\r\n                rewardInfo[_rewardIndex - 1].endBlock < _endBlock,\r\n                \"FarmingRange::updateRewardInfo::bad new endblock\"\r\n            );\r\n        }\r\n        if (rewardInfo.length > _rewardIndex + 1) {\r\n            require(\r\n                _endBlock < rewardInfo[_rewardIndex + 1].endBlock,\r\n                \"FarmingRange::updateRewardInfo::reward period end is in next range\"\r\n            );\r\n        }\r\n        (bool _refund, uint256 _diff) = _updateRewardsDiff(\r\n            _rewardIndex,\r\n            _endBlock,\r\n            _rewardPerBlock,\r\n            rewardInfo,\r\n            campaign,\r\n            selectedRewardInfo\r\n        );\r\n        if (!_refund && _diff != 0) {\r\n            _transferFromWithAllowance(campaign.rewardToken, _diff, _campaignID);\r\n        }\r\n        // If _endblock is changed, and if we have another range after the updated one,\r\n        // we need to update rewardPerBlock to distribute on the next new range or we could run out of tokens\r\n        if (_endBlock != _previousEndBlock && rewardInfo.length - 1 > _rewardIndex) {\r\n            RewardInfo storage nextRewardInfo = rewardInfo[_rewardIndex + 1];\r\n            uint256 _nextRewardInfoEndBlock = nextRewardInfo.endBlock;\r\n            uint256 _initialBlockRange = _nextRewardInfoEndBlock - _previousEndBlock;\r\n            uint256 _nextBlockRange = _nextRewardInfoEndBlock - _endBlock;\r\n            uint256 _currentRewardPerBlock = nextRewardInfo.rewardPerBlock;\r\n            uint256 _initialNextTotal = _initialBlockRange * _currentRewardPerBlock;\r\n            _currentRewardPerBlock = (_currentRewardPerBlock * _initialBlockRange) / _nextBlockRange;\r\n            uint256 _nextTotal = _nextBlockRange * _currentRewardPerBlock;\r\n            nextRewardInfo.rewardPerBlock = _currentRewardPerBlock;\r\n            if (_nextTotal < _initialNextTotal) {\r\n                campaign.rewardToken.safeTransfer(rewardManager, _initialNextTotal - _nextTotal);\r\n                campaign.totalRewards -= _initialNextTotal - _nextTotal;\r\n            }\r\n        }\r\n        // UPDATE total\r\n        campaign.totalRewards = _refund ? campaign.totalRewards - _diff : campaign.totalRewards + _diff;\r\n        selectedRewardInfo.endBlock = _endBlock;\r\n        selectedRewardInfo.rewardPerBlock = _rewardPerBlock;\r\n        emit UpdateRewardInfo(_campaignID, _rewardIndex, _endBlock, _rewardPerBlock);\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function removeLastRewardInfo(uint256 _campaignID) external override onlyOwner {\r\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        uint256 _rewardInfoLength = rewardInfo.length;\r\n        require(_rewardInfoLength != 0, \"FarmingRange::updateCampaignsRewards::no rewardInfoLen\");\r\n        RewardInfo storage lastRewardInfo = rewardInfo[_rewardInfoLength - 1];\r\n        uint256 _lastRewardInfoEndBlock = lastRewardInfo.endBlock;\r\n        require(\r\n            _lastRewardInfoEndBlock > arbitrumBlockNumber(),\r\n            \"FarmingRange::removeLastRewardInfo::reward period ended\"\r\n        );\r\n        _updateCampaign(_campaignID);\r\n        if (lastRewardInfo.rewardPerBlock != 0) {\r\n            (bool _refund, uint256 _diff) = _updateRewardsDiff(\r\n                _rewardInfoLength - 1,\r\n                _lastRewardInfoEndBlock,\r\n                0,\r\n                rewardInfo,\r\n                campaign,\r\n                lastRewardInfo\r\n            );\r\n            if (_refund) {\r\n                campaign.totalRewards = campaign.totalRewards - _diff;\r\n            }\r\n        }\r\n        rewardInfo.pop();\r\n        emit RemoveRewardInfo(_campaignID, _rewardInfoLength - 1);\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function currentEndBlock(uint256 _campaignID) external view override returns (uint256) {\r\n        return _endBlockOf(_campaignID, arbitrumBlockNumber());\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function currentRewardPerBlock(uint256 _campaignID) external view override returns (uint256) {\r\n        return _rewardPerBlockOf(_campaignID, arbitrumBlockNumber());\r\n    }\r\n\r\n    /// @inheritdoc IFarmingRangeArbitrum\r\n    function arbitrumBlockNumber() public view returns (uint256) {\r\n        return ARBSYS.arbBlockNumber();\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function _updateRewardsDiff(\r\n        uint256 _rewardIndex,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock,\r\n        RewardInfo[] storage rewardInfo,\r\n        CampaignInfo storage campaign,\r\n        RewardInfo storage selectedRewardInfo\r\n    ) internal override returns (bool refund_, uint256 diff_) {\r\n        uint256 blockNumber = arbitrumBlockNumber();\r\n        uint256 _previousStartBlock = _rewardIndex == 0 ? campaign.startBlock : rewardInfo[_rewardIndex - 1].endBlock;\r\n        uint256 _newStartBlock = blockNumber > _previousStartBlock ? blockNumber : _previousStartBlock;\r\n        uint256 _previousBlockRange = selectedRewardInfo.endBlock - _previousStartBlock;\r\n        uint256 _newBlockRange = _endBlock - _newStartBlock;\r\n        uint256 _selectedRewardPerBlock = selectedRewardInfo.rewardPerBlock;\r\n        uint256 _accumulatedRewards = (_newStartBlock - _previousStartBlock) * _selectedRewardPerBlock;\r\n        uint256 _previousTotalRewards = _selectedRewardPerBlock * _previousBlockRange;\r\n        uint256 _totalRewards = _rewardPerBlock * _newBlockRange;\r\n        refund_ = _previousTotalRewards > _totalRewards + _accumulatedRewards;\r\n        diff_ = refund_\r\n            ? _previousTotalRewards - _totalRewards - _accumulatedRewards\r\n            : _totalRewards + _accumulatedRewards - _previousTotalRewards;\r\n        if (refund_) {\r\n            campaign.rewardToken.safeTransfer(rewardManager, diff_);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function _pendingReward(\r\n        uint256 _campaignID,\r\n        uint256 _amount,\r\n        uint256 _rewardDebt\r\n    ) internal view override returns (uint256) {\r\n        CampaignInfo memory _campaign = campaignInfo[_campaignID];\r\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\r\n        uint256 _accRewardPerShare = _campaign.accRewardPerShare;\r\n        uint256 blockNumber = arbitrumBlockNumber();\r\n\r\n        if (blockNumber > _campaign.lastRewardBlock && _campaign.totalStaked != 0) {\r\n            uint256 _cursor = _campaign.lastRewardBlock;\r\n            for (uint256 _i; _i != _rewardInfo.length; ) {\r\n                uint256 _multiplier = getMultiplier(_cursor, blockNumber, _rewardInfo[_i].endBlock);\r\n                if (_multiplier != 0) {\r\n                    _cursor = _rewardInfo[_i].endBlock;\r\n                    _accRewardPerShare =\r\n                        _accRewardPerShare +\r\n                        ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / _campaign.totalStaked);\r\n                }\r\n                unchecked {\r\n                    ++_i;\r\n                }\r\n            }\r\n        }\r\n        return ((_amount * _accRewardPerShare) / 1e20) - _rewardDebt;\r\n    }\r\n\r\n    /// @inheritdoc FarmingRange\r\n    function _updateCampaign(uint256 _campaignID) internal override {\r\n        require(campaignInfo.length > _campaignID, \"FarmingRange::_updateCampaign::Campaign id not valid\");\r\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\r\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\r\n        uint256 blockNumber = arbitrumBlockNumber();\r\n\r\n        if (blockNumber <= campaign.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (campaign.totalStaked == 0) {\r\n            uint256 _amount;\r\n            for (uint256 _i; _i != _rewardInfo.length; ) {\r\n                if (_rewardInfo[_i].endBlock >= campaign.lastRewardBlock) {\r\n                    uint256 _startBlock = _i != 0 ? _rewardInfo[_i - 1].endBlock : campaign.lastRewardBlock;\r\n                    bool _lastRewardInfo = _rewardInfo[_i].endBlock > blockNumber;\r\n                    uint256 _blockRange = (_lastRewardInfo ? blockNumber : _rewardInfo[_i].endBlock) -\r\n                        (_startBlock > campaign.lastRewardBlock ? _startBlock : campaign.lastRewardBlock);\r\n                    _amount += _rewardInfo[_i].rewardPerBlock * _blockRange;\r\n                    if (_lastRewardInfo) {\r\n                        break;\r\n                    }\r\n                }\r\n                unchecked {\r\n                    ++_i;\r\n                }\r\n            }\r\n\r\n            if (_amount != 0) {\r\n                campaign.rewardToken.safeTransfer(rewardManager, _amount);\r\n            }\r\n\r\n            campaign.lastRewardBlock = blockNumber;\r\n\r\n            return;\r\n        }\r\n        /// @dev for each reward info\r\n        for (uint256 _i; _i != _rewardInfo.length; ) {\r\n            // @dev get multiplier based on current Block and rewardInfo's end block\r\n            // multiplier will be a range of either (current block - campaign.lastRewardBlock)\r\n            // or (reward info's endblock - campaign.lastRewardBlock) or 0\r\n            uint256 _multiplier = getMultiplier(campaign.lastRewardBlock, blockNumber, _rewardInfo[_i].endBlock);\r\n            if (_multiplier != 0) {\r\n                // @dev if currentBlock exceed end block, use end block as the last reward block\r\n                // so that for the next iteration, previous endBlock will be used as the last reward block\r\n                if (blockNumber > _rewardInfo[_i].endBlock) {\r\n                    campaign.lastRewardBlock = _rewardInfo[_i].endBlock;\r\n                } else {\r\n                    campaign.lastRewardBlock = blockNumber;\r\n                }\r\n                campaign.accRewardPerShare =\r\n                    campaign.accRewardPerShare +\r\n                    ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / campaign.totalStaked);\r\n            }\r\n            unchecked {\r\n                ++_i;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nArbSys constant ARBSYS = ArbSys(address(100));\r\n\r\ninterface ArbSys {\r\n    /**\r\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\r\n     * @return block number as int\r\n     */\r\n    function arbBlockNumber() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/rewards/interfaces/IFarmingRange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// interfaces\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ninterface IFarmingRange {\r\n    /**\r\n     * @notice Info of each user.\r\n     * @param amount How many Staking tokens the user has provided.\r\n     * @param rewardDebt We do some fancy math here. Basically, any point in time, the amount of reward\r\n     *  entitled to a user but is pending to be distributed is:\r\n     *\r\n     *    pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\r\n     *\r\n     *  Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n     *    1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\r\n     *    2. User receives the pending reward sent to his/her address.\r\n     *    3. User's `amount` gets updated.\r\n     *    4. User's `rewardDebt` gets updated.\r\n     *\r\n     * from: https://github.com/jazz-defi/contracts/blob/master/MasterChefV2.sol\r\n     */\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /**\r\n     * @notice Info of each reward distribution campaign.\r\n     * @param stakingToken address of Staking token contract.\r\n     * @param rewardToken address of Reward token contract\r\n     * @param startBlock start block of the campaign\r\n     * @param lastRewardBlock last block number that Reward Token distribution occurs.\r\n     * @param accRewardPerShare accumulated Reward Token per share, times 1e20.\r\n     * @param totalStaked total staked amount each campaign's stake token, typically,\r\n     * @param totalRewards total amount of reward to be distributed until the end of the last phase\r\n     *\r\n     * @dev each campaign has the same stake token, so no need to track it separetely\r\n     */\r\n    struct CampaignInfo {\r\n        IERC20 stakingToken;\r\n        IERC20 rewardToken;\r\n        uint256 startBlock;\r\n        uint256 lastRewardBlock;\r\n        uint256 accRewardPerShare;\r\n        uint256 totalStaked;\r\n        uint256 totalRewards;\r\n    }\r\n\r\n    /**\r\n     * @notice Info about a reward-phase\r\n     * @param endBlock block number of the end of the phase\r\n     * @param rewardPerBlock amount of reward to be distributed per block in this phase\r\n     */\r\n    struct RewardInfo {\r\n        uint256 endBlock;\r\n        uint256 rewardPerBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice emitted at each deposit\r\n     * @param user address that deposit its funds\r\n     * @param amount amount deposited\r\n     * @param campaign campaingId on which the user has deposited funds\r\n     */\r\n    event Deposit(address indexed user, uint256 amount, uint256 campaign);\r\n\r\n    /**\r\n     * @notice emitted at each withdraw\r\n     * @param user address that withdrawn its funds\r\n     * @param amount amount withdrawn\r\n     * @param campaign campaingId on which the user has withdrawn funds\r\n     */\r\n    event Withdraw(address indexed user, uint256 amount, uint256 campaign);\r\n\r\n    /**\r\n     * @notice emitted at each emergency withdraw\r\n     * @param user address that emergency-withdrawn its funds\r\n     * @param amount amount emergency-withdrawn\r\n     * @param campaign campaingId on which the user has emergency-withdrawn funds\r\n     */\r\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 campaign);\r\n\r\n    /**\r\n     * @notice emitted at each campaign added\r\n     * @param campaignID new campaign id\r\n     * @param stakingToken token address to be staked in this campaign\r\n     * @param rewardToken token address of the rewards in this campaign\r\n     * @param startBlock starting block of this campaign\r\n     */\r\n    event AddCampaignInfo(uint256 indexed campaignID, IERC20 stakingToken, IERC20 rewardToken, uint256 startBlock);\r\n\r\n    /**\r\n     * @notice emitted at each phase of reward added\r\n     * @param campaignID campaign id on which rewards were added\r\n     * @param phase number of the new phase added (latest at the moment of add)\r\n     * @param endBlock number of the block that the phase stops (phase starts at the endblock of the previous phase's\r\n     * endblock, and if it's the phase 0, it start at the startBlock of the campaign struct)\r\n     * @param rewardPerBlock amount of reward distributed per block in this phase\r\n     */\r\n    event AddRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\r\n\r\n    /**\r\n     * @notice emitted when a reward phase is updated\r\n     * @param campaignID campaign id on which the rewards-phase is updated\r\n     * @param phase id of phase updated\r\n     * @param endBlock new endblock of the phase\r\n     * @param rewardPerBlock new rewardPerBlock of the phase\r\n     */\r\n    event UpdateRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\r\n\r\n    /**\r\n     * @notice emitted when a reward phase is removed\r\n     * @param campaignID campaign id on which the rewards-phase is removed\r\n     * @param phase id of phase removed (only the latest phase can be removed)\r\n     */\r\n    event RemoveRewardInfo(uint256 indexed campaignID, uint256 indexed phase);\r\n\r\n    /**\r\n     * @notice emitted when the rewardInfoLimit is updated\r\n     * @param rewardInfoLimit new max phase amount per campaign\r\n     */\r\n    event SetRewardInfoLimit(uint256 rewardInfoLimit);\r\n\r\n    /**\r\n     * @notice set new reward info limit, defining how many phases are allowed\r\n     * @param _updatedRewardInfoLimit new reward info limit\r\n     */\r\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external;\r\n\r\n    /**\r\n     * @notice reward campaign, one campaign represent a pair of staking and reward token,\r\n     * last reward Block and acc reward Per Share\r\n     * @param _stakingToken staking token address\r\n     * @param _rewardToken reward token address\r\n     * @param _startBlock block number when the campaign will start\r\n     */\r\n    function addCampaignInfo(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _startBlock) external;\r\n\r\n    /**\r\n     * @notice add a new reward info, when a new reward info is added, the reward\r\n     * & its end block will be extended by the newly pushed reward info.\r\n     * @param _campaignID id of the campaign\r\n     * @param _endBlock end block of this reward info\r\n     * @param _rewardPerBlock reward per block to distribute until the end\r\n     */\r\n    function addRewardInfo(uint256 _campaignID, uint256 _endBlock, uint256 _rewardPerBlock) external;\r\n\r\n    /**\r\n     * @notice add multiple reward Info into a campaign in one tx.\r\n     * @param _campaignID id of the campaign\r\n     * @param _endBlock array of end blocks\r\n     * @param _rewardPerBlock array of reward per block\r\n     */\r\n    function addRewardInfoMultiple(\r\n        uint256 _campaignID,\r\n        uint256[] calldata _endBlock,\r\n        uint256[] calldata _rewardPerBlock\r\n    ) external;\r\n\r\n    /**\r\n     * @notice update one campaign reward info for a specified range index.\r\n     * @param _campaignID id of the campaign\r\n     * @param _rewardIndex index of the reward info\r\n     * @param _endBlock end block of this reward info\r\n     * @param _rewardPerBlock reward per block to distribute until the end\r\n     */\r\n    function updateRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _rewardIndex,\r\n        uint256 _endBlock,\r\n        uint256 _rewardPerBlock\r\n    ) external;\r\n\r\n    /**\r\n     * @notice update multiple campaign rewards info for all range index.\r\n     * @param _campaignID id of the campaign\r\n     * @param _rewardIndex array of reward info index\r\n     * @param _endBlock array of end block\r\n     * @param _rewardPerBlock array of rewardPerBlock\r\n     */\r\n    function updateRewardMultiple(\r\n        uint256 _campaignID,\r\n        uint256[] memory _rewardIndex,\r\n        uint256[] memory _endBlock,\r\n        uint256[] memory _rewardPerBlock\r\n    ) external;\r\n\r\n    /**\r\n     * @notice update multiple campaigns and rewards info for all range index.\r\n     * @param _campaignID array of campaign id\r\n     * @param _rewardIndex multi dimensional array of reward info index\r\n     * @param _endBlock multi dimensional array of end block\r\n     * @param _rewardPerBlock multi dimensional array of rewardPerBlock\r\n     */\r\n    function updateCampaignsRewards(\r\n        uint256[] calldata _campaignID,\r\n        uint256[][] calldata _rewardIndex,\r\n        uint256[][] calldata _endBlock,\r\n        uint256[][] calldata _rewardPerBlock\r\n    ) external;\r\n\r\n    /**\r\n     * @notice remove last reward info for specified campaign.\r\n     * @param _campaignID campaign id\r\n     */\r\n    function removeLastRewardInfo(uint256 _campaignID) external;\r\n\r\n    /**\r\n     * @notice return the entries amount of reward info for one campaign.\r\n     * @param _campaignID campaign id\r\n     * @return reward info quantity\r\n     */\r\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice return the number of campaigns.\r\n     * @return campaign quantity\r\n     */\r\n    function campaignInfoLen() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice return the end block of the current reward info for a given campaign.\r\n     * @param _campaignID campaign id\r\n     * @return reward info end block number\r\n     */\r\n    function currentEndBlock(uint256 _campaignID) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice return the reward per block of the current reward info for a given campaign.\r\n     * @param _campaignID campaign id\r\n     * @return current reward per block\r\n     */\r\n    function currentRewardPerBlock(uint256 _campaignID) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * Reward multiplier is the amount of blocks between from and to\r\n     * @param _from start block number\r\n     * @param _to end block number\r\n     * @param _endBlock end block number of the reward info\r\n     * @return block distance\r\n     */\r\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) external returns (uint256);\r\n\r\n    /**\r\n     * @notice View function to retrieve pending Reward.\r\n     * @param _campaignID pending reward of campaign id\r\n     * @param _user address to retrieve pending reward\r\n     * @return current pending reward\r\n     */\r\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Update reward variables of the given campaign to be up-to-date.\r\n     * @param _campaignID campaign id\r\n     */\r\n    function updateCampaign(uint256 _campaignID) external;\r\n\r\n    /**\r\n     * @notice Update reward variables for all campaigns. gas spending is HIGH in this method call, BE CAREFUL.\r\n     */\r\n    function massUpdateCampaigns() external;\r\n\r\n    /**\r\n     * @notice Deposit staking token in a campaign.\r\n     * @param _campaignID campaign id\r\n     * @param _amount amount to deposit\r\n     */\r\n    function deposit(uint256 _campaignID, uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice Deposit staking token in a campaign with the EIP-2612 signature off chain\r\n     * @param _campaignID campaign id\r\n     * @param _amount amount to deposit\r\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\r\n     * @param _deadline Unix timestamp after which the transaction will revert.\r\n     * @param _v The v component of the permit signature.\r\n     * @param _r The r component of the permit signature.\r\n     * @param _s The s component of the permit signature.\r\n     */\r\n    function depositWithPermit(\r\n        uint256 _campaignID,\r\n        uint256 _amount,\r\n        bool _approveMax,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\r\n     * @param _campaignID campaign id\r\n     * @param _amount amount to withdraw\r\n     */\r\n    function withdraw(uint256 _campaignID, uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice Harvest campaigns, will claim rewards token of every campaign ids in the array\r\n     * @param _campaignIDs array of campaign id\r\n     */\r\n    function harvest(uint256[] calldata _campaignIDs) external;\r\n\r\n    /**\r\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\r\n     * @param _campaignID campaign id\r\n     */\r\n    function emergencyWithdraw(uint256 _campaignID) external;\r\n\r\n    /**\r\n     * @notice get Reward info for a campaign ID and index, that is a set of {endBlock, rewardPerBlock}\r\n     *  indexed by campaign ID\r\n     * @param _campaignID campaign id\r\n     * @param _rewardIndex index of the reward info\r\n     * @return endBlock_ end block of this reward info\r\n     * @return rewardPerBlock_ reward per block to distribute\r\n     */\r\n    function campaignRewardInfo(\r\n        uint256 _campaignID,\r\n        uint256 _rewardIndex\r\n    ) external view returns (uint256 endBlock_, uint256 rewardPerBlock_);\r\n\r\n    /**\r\n     * @notice get a Campaign Reward info for a campaign ID\r\n     * @param _campaignID campaign id\r\n     * @return all params from CampaignInfo struct\r\n     */\r\n    function campaignInfo(\r\n        uint256 _campaignID\r\n    ) external view returns (IERC20, IERC20, uint256, uint256, uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice get a User Reward info for a campaign ID and user address\r\n     * @param _campaignID campaign id\r\n     * @param _user user address\r\n     * @return all params from UserInfo struct\r\n     */\r\n    function userInfo(uint256 _campaignID, address _user) external view returns (uint256, uint256);\r\n\r\n    /**\r\n     * @notice how many reward phases can be set for a campaign\r\n     * @return rewards phases size limit\r\n     */\r\n    function rewardInfoLimit() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice get reward Manager address holding rewards to distribute\r\n     * @return address of reward manager\r\n     */\r\n    function rewardManager() external view returns (address);\r\n}\r\n"
    },
    "contracts/rewards/interfaces/IFarmingRangeL2Arbitrum.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IFarmingRangeArbitrum {\r\n    /**\r\n     * @notice return arbitrum L2 block.number\r\n     */\r\n    function arbitrumBlockNumber() external returns (uint256);\r\n}\r\n"
    },
    "contracts/rewards/interfaces/IRewardManagerL2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n// interfaces\r\nimport \"./IFarmingRange.sol\";\r\n\r\ninterface IRewardManagerL2 {\r\n    /**\r\n     * @notice used to resetAllowance with farming contract to take rewards\r\n     * @param _campaignId campaign id\r\n     */\r\n    function resetAllowance(uint256 _campaignId) external;\r\n\r\n    /**\r\n     * @notice used to get the farming contract address\r\n     * @return farming contract address (or FarmingRange contract type in Solidity)\r\n     */\r\n    function farming() external view returns (IFarmingRange);\r\n}\r\n"
    },
    "contracts/rewards/interfaces/IRewardManagerWithdrawable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\ninterface IRewardManagerWithdrawable {\r\n    /**\r\n     * @notice used to get retrieve tokens\r\n     * @param _token token contract address to retrieve\r\n     * @param _amount amount of token to retrieve\r\n     * @param _to address to send the tokens\r\n     */\r\n    function withdrawFunds(address _token, uint256 _amount, address _to) external;\r\n}\r\n"
    },
    "contracts/rewards/RewardManagerL2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"./FarmingRange.sol\";\r\n\r\n// libraries\r\nimport \"../core/libraries/TransferHelper.sol\";\r\n\r\n// interfaces\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IRewardManagerL2.sol\";\r\n\r\n/**\r\n * @title RewardManagerL2\r\n * @notice RewardManagerL2 handles the creation of the contract farming\r\n * The RewardManager is the owner of the funds in the FarmingRange,\r\n * only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get\r\n * the funds back when updating of removing campaigns.\r\n */\r\ncontract RewardManagerL2 is IRewardManagerL2 {\r\n    bytes4 private constant TRANSFER_OWNERSHIP_SELECTOR = bytes4(keccak256(bytes(\"transferOwnership(address)\")));\r\n\r\n    IFarmingRange public immutable farming;\r\n\r\n    /**\r\n     * @param _farmingOwner address who will own the farming\r\n     */\r\n    constructor(address _farmingOwner) {\r\n        farming = new FarmingRange(address(this));\r\n\r\n        address(farming).call(abi.encodeWithSelector(TRANSFER_OWNERSHIP_SELECTOR, _farmingOwner));\r\n    }\r\n\r\n    /// @inheritdoc IRewardManagerL2\r\n    function resetAllowance(uint256 _campaignId) external {\r\n        require(_campaignId < farming.campaignInfoLen(), \"RewardManager:campaignId:wrong campaign ID\");\r\n\r\n        (, IERC20 _rewardToken, , , , , ) = farming.campaignInfo(_campaignId);\r\n\r\n        // In case of tokens like USDT, an approval must be set to zero before setting it to another value.\r\n        // Unlike most tokens, USDT does not ignore a non-zero current allowance value, leading to a possible\r\n        // transaction failure when you are trying to change the allowance.\r\n        if (_rewardToken.allowance(address(this), address(farming)) != 0) {\r\n            TransferHelper.safeApprove(address(_rewardToken), address(farming), 0);\r\n        }\r\n\r\n        // After ensuring that the allowance is zero (or it was zero to begin with), we then set the allowance to max.\r\n        TransferHelper.safeApprove(address(_rewardToken), address(farming), type(uint256).max);\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/RewardManagerL2Arbitrum.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"./FarmingRangeL2Arbitrum.sol\";\r\n\r\n// libraries\r\nimport \"../core/libraries/TransferHelper.sol\";\r\n\r\n// interfaces\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IRewardManagerL2.sol\";\r\n\r\n/**\r\n * @title RewardManagerL2Arbitrum\r\n * @notice RewardManagerL2Arbitrum handles the creation of the contract farming\r\n * The RewardManager is the owner of the funds in the FarmingRangeArbitrum,\r\n * only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get\r\n * the funds back when updating of removing campaigns.\r\n * Use only for Arbitrum chain\r\n */\r\ncontract RewardManagerL2Arbitrum is IRewardManagerL2 {\r\n    bytes4 private constant TRANSFER_OWNERSHIP_SELECTOR = bytes4(keccak256(bytes(\"transferOwnership(address)\")));\r\n\r\n    IFarmingRange public immutable farming;\r\n\r\n    /**\r\n     * @param _farmingOwner address who will own the farming\r\n     */\r\n    constructor(address _farmingOwner) {\r\n        farming = new FarmingRangeL2Arbitrum(address(this));\r\n\r\n        address(farming).call(abi.encodeWithSelector(TRANSFER_OWNERSHIP_SELECTOR, _farmingOwner));\r\n    }\r\n\r\n    /// @inheritdoc IRewardManagerL2\r\n    function resetAllowance(uint256 _campaignId) external {\r\n        require(_campaignId < farming.campaignInfoLen(), \"RewardManager:campaignId:wrong campaign ID\");\r\n\r\n        (, IERC20 _rewardToken, , , , , ) = farming.campaignInfo(_campaignId);\r\n\r\n        // In case of tokens like USDT, an approval must be set to zero before setting it to another value.\r\n        // Unlike most tokens, USDT does not ignore a non-zero current allowance value, leading to a possible\r\n        // transaction failure when you are trying to change the allowance.\r\n        if (_rewardToken.allowance(address(this), address(farming)) != 0) {\r\n            TransferHelper.safeApprove(address(_rewardToken), address(farming), 0);\r\n        }\r\n\r\n        // After ensuring that the allowance is zero (or it was zero to begin with), we then set the allowance to max.\r\n        TransferHelper.safeApprove(address(_rewardToken), address(farming), type(uint256).max);\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/RewardManagerWithdrawable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"./RewardManagerL2.sol\";\r\n\r\n// interfaces\r\nimport \"./interfaces/IRewardManagerWithdrawable.sol\";\r\n\r\n/**\r\n * @title RewardManagerWithdrawable\r\n * @notice RewardManagerWithdrawable handles the creation of the contract farming\r\n * The RewardManager is the owner of the funds in the FarmingRange,\r\n * only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get\r\n * the funds back when updating of removing campaigns. The specificity of the withdrawable reward manager\r\n * is that it's used for promoted campaigns, and thus the needs to be able to withdraw funds is here.\r\n */\r\ncontract RewardManagerWithdrawable is RewardManagerL2, IRewardManagerWithdrawable {\r\n    constructor(address _farming) RewardManagerL2(_farming) {}\r\n\r\n    /// @inheritdoc IRewardManagerWithdrawable\r\n    function withdrawFunds(address _token, uint256 _amount, address _to) external {\r\n        require(\r\n            msg.sender == Ownable(address(farming)).owner(),\r\n            \"RewardManager:withdrawFunds:Only the farming owner can withdraw funds\"\r\n        );\r\n\r\n        TransferHelper.safeTransfer(_token, _to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/RewardManagerWithdrawableArbitrum.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n// contracts\r\nimport \"./RewardManagerL2Arbitrum.sol\";\r\n\r\n// interfaces\r\nimport \"./interfaces/IRewardManagerWithdrawable.sol\";\r\n\r\n/**\r\n * @title RewardManagerWithdrawableArbitrum\r\n * @notice RewardManagerWithdrawableArbitrum handles the creation of the contract farming\r\n * The RewardManager is the owner of the funds in the FarmingRange,\r\n * only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get\r\n * the funds back when updating of removing campaigns. The specificity of the withdrawable reward manager\r\n * is that it's used for promoted campaigns, and thus the needs to be able to withdraw funds is here.\r\n */\r\ncontract RewardManagerWithdrawableArbitrum is RewardManagerL2Arbitrum, IRewardManagerWithdrawable {\r\n    constructor(address _farming) RewardManagerL2Arbitrum(_farming) {}\r\n\r\n    /// @inheritdoc IRewardManagerWithdrawable\r\n    function withdrawFunds(address _token, uint256 _amount, address _to) external {\r\n        require(\r\n            msg.sender == Ownable(address(farming)).owner(),\r\n            \"RewardManager:withdrawFunds:Only the farming owner can withdraw funds\"\r\n        );\r\n\r\n        TransferHelper.safeTransfer(_token, _to, _amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}