{
  "address": "0x391BeCc8DAaf32b9ba8e602e9527Bf9DA04C8deb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fictiveReserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fictiveReserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceAverageIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceAverageOut",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "feesLP",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "feesPool",
              "type": "uint128"
            }
          ],
          "internalType": "struct SmardexLibrary.GetAmountParameters",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountInFromPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fictiveReserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fictiveReserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceAverageIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceAverageOut",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "feesLP",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "feesPool",
              "type": "uint128"
            }
          ],
          "internalType": "struct SmardexLibrary.GetAmountParameters",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountOutFromPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newReserveOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFictiveReserveOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB_",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            }
          ],
          "internalType": "struct ISmardexMintCallback.MintCallbackData",
          "name": "_data",
          "type": "tuple"
        }
      ],
      "name": "smardexMintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "smardexSwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa3dafb5f9ece41b614876c2b19145f2463f830faf9f733b9735b00276dc9c5fd",
  "receipt": {
    "to": null,
    "from": "0x45C75bd8Bb9CF5263539b914925EabBF0441Eb14",
    "contractAddress": "0x391BeCc8DAaf32b9ba8e602e9527Bf9DA04C8deb",
    "transactionIndex": 98,
    "gasUsed": "4303632",
    "logsBloom": "0x
    "blockHash": "0x421adc3643d59dde8ec3e77a31f2f7d04486af1a2653e57954bcfb295701f394",
    "transactionHash": "0xa3dafb5f9ece41b614876c2b19145f2463f830faf9f733b9735b00276dc9c5fd",
    "logs": [],
    "blockNumber": 30036613,
    "cumulativeGasUsed": "11926371",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA8EF6FEa013034E62E2C4A9Ec1CDb059fE23Af33",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
  ],
  "numDeployments": 1,
  "solcInputHash": "1a3e5ed825e3a0bcaf935206aae1ecd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"feesLP\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feesPool\",\"type\":\"uint128\"}],\"internalType\":\"struct SmardexLibrary.GetAmountParameters\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountInFromPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"feesLP\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feesPool\",\"type\":\"uint128\"}],\"internalType\":\"struct SmardexLibrary.GetAmountParameters\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOutFromPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"internalType\":\"struct ISmardexMintCallback.MintCallbackData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"smardexMintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"smardexSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountADesired\":\"The amount of tokenA to add as liquidity if the B/A price is <= amountBDesired/amountADesired\",\"_amountAMin\":\"Bounds the extent to which the B/A price can go up before the transaction reverts. Must be <= amountADesired.\",\"_amountBDesired\":\"The amount of tokenB to add as liquidity if the A/B price is <= amountADesired/amountBDesired\",\"_amountBMin\":\"Bounds the extent to which the A/B price can go up before the transaction reverts. Must be <= amountBDesired.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_tokenA\":\"address of the first token in the pair\",\"_tokenB\":\"address of the second token in the pair\"},\"returns\":{\"amountA_\":\"The amount of tokenA sent to the pool.\",\"amountB_\":\"The amount of tokenB sent to the pool.\",\"liquidity_\":\"The amount of liquidity tokens minted.\"}},\"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountETHMin\":\"Bounds the extent to which the token/WETH price can go up before the transaction reverts. Must be <= msg.value.\",\"_amountTokenDesired\":\"The amount of token to add as liquidity if the WETH/token price is <= msg.value/amountTokenDesired (token depreciates).\",\"_amountTokenMin\":\"Bounds the extent to which the WETH/token price can go up before the transaction reverts. Must be <= amountTokenDesired.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_token\":\"A pool token.\"},\"returns\":{\"amountETH_\":\"The amount of ETH converted to WETH and sent to the pool.\",\"amountToken_\":\"The amount of token sent to the pool.\",\"liquidity_\":\"The amount of liquidity tokens minted.\"}},\"getAmountIn((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))\":{\"params\":{\"_param\":\"all the parameters required to get amount from struct GetAmountParameters\"},\"returns\":{\"amountIn_\":\"The amount of token the user would spend to receive _amountOut\",\"newFictiveReserveIn_\":\"fictive reserve of the selling token after the swap\",\"newFictiveReserveOut_\":\"fictive reserve of the buying token after the swap\",\"newReserveIn_\":\"reserves of the selling token after the swap\",\"newReserveOut_\":\"reserves of the buying token after the swap\"}},\"getAmountInFromPair(uint256,address,address)\":{\"params\":{\"_amountOut\":\"quantity of token the user want to swap (to sell)\",\"_tokenIn\":\"address of the token the user want to sell\",\"_tokenOut\":\"address of the token the user want to buy\"},\"returns\":{\"amountIn_\":\"The amount of token the user would spend to receive _amountOut\",\"newFictiveReserveIn_\":\"fictive reserve of the selling token after the swap\",\"newFictiveReserveOut_\":\"fictive reserve of the buying token after the swap\",\"newReserveIn_\":\"reserves of the selling token after the swap\",\"newReserveOut_\":\"reserves of the buying token after the swap\"}},\"getAmountOut((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))\":{\"params\":{\"_param\":\"all the parameters required to get amount from struct GetAmountParameters\"},\"returns\":{\"amountOut_\":\"The amount of token the user would receive\",\"newFictiveReserveIn_\":\"fictive reserve of the selling token after the swap\",\"newFictiveReserveOut_\":\"fictive reserve of the buying token after the swap\",\"newReserveIn_\":\"reserves of the selling token after the swap\",\"newReserveOut_\":\"reserves of the buying token after the swap\"}},\"getAmountOutFromPair(uint256,address,address)\":{\"params\":{\"_amountIn\":\"quantity of token the user want to swap (to buy)\",\"_tokenIn\":\"address of the token the user want to sell\",\"_tokenOut\":\"address of the token the user want to buy\"},\"returns\":{\"amountOut_\":\"The amount of token the user would receive\",\"newFictiveReserveIn_\":\"fictive reserve of the selling token after the swap\",\"newFictiveReserveOut_\":\"fictive reserve of the buying token after the swap\",\"newReserveIn_\":\"reserves of the selling token after the swap\",\"newReserveOut_\":\"reserves of the buying token after the swap\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountAMin\":\"The minimum amount of tokenA that must be received for the transaction not to revert.\",\"_amountBMin\":\"The minimum amount of tokenB that must be received for the transaction not to revert.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_liquidity\":\"The amount of liquidity tokens to remove.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_tokenA\":\"A pool token.\",\"_tokenB\":\"A pool token.\"},\"returns\":{\"amountA_\":\"The amount of tokenA received.\",\"amountB_\":\"The amount of tokenB received.\"}},\"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountETHMin\":\"The minimum amount of ETH that must be received for the transaction not to revert.\",\"_amountTokenMin\":\"The minimum amount of token that must be received for the transaction not to revert.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_liquidity\":\"The amount of liquidity tokens to remove.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_token\":\"A pool token.\"},\"returns\":{\"amountETH_\":\"The amount of ETH received.\",\"amountToken_\":\"The amount of token received.\"}},\"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"params\":{\"_amountETHMin\":\"The minimum amount of ETH that must be received for the transaction not to revert.\",\"_amountTokenMin\":\"The minimum amount of token that must be received for the transaction not to revert.\",\"_approveMax\":\"Whether or not the approval amount in the signature is for liquidity or uint(-1).\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_liquidity\":\"The amount of liquidity tokens to remove.\",\"_r\":\"The r component of the permit signature.\",\"_s\":\"The s component of the permit signature.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_token\":\"A pool token.\",\"_v\":\"The v component of the permit signature.\"},\"returns\":{\"amountETH_\":\"The amount of ETH received.\",\"amountToken_\":\"The amount of token received.\"}},\"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"params\":{\"_amountAMin\":\"The minimum amount of tokenA that must be received for the transaction not to revert.\",\"_amountBMin\":\"The minimum amount of tokenB that must be received for the transaction not to revert.\",\"_approveMax\":\"Whether or not the approval amount in the signature is for liquidity or uint(-1).\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_liquidity\":\"The amount of liquidity tokens to remove.\",\"_r\":\"The r component of the permit signature.\",\"_s\":\"The s component of the permit signature.\",\"_to\":\"Recipient of the liquidity tokens.\",\"_tokenA\":\"A pool token.\",\"_tokenB\":\"A pool token.\",\"_v\":\"The v component of the permit signature.\"},\"returns\":{\"amountA_\":\"The amount of tokenA received.\",\"amountB_\":\"The amount of tokenB received.\"}},\"smardexMintCallback((address,address,uint256,uint256,address))\":{\"params\":{\"_data\":\"callback data for mint\"}},\"smardexSwapCallback(int256,int256,bytes)\":{\"params\":{\"_amount0Delta\":\"amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\",\"_amount1Delta\":\"amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\",\"_data\":\"for Router path and payer for the swap (see router for details)\"}},\"swapETHForExactTokens(uint256,address[],address,uint256)\":{\"params\":{\"_amountOut\":\"The amount of tokens to receive.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of output tokens.\"},\"returns\":{\"amountIn_\":\"The input token amount.\"}},\"swapExactETHForTokens(uint256,address[],address,uint256)\":{\"params\":{\"_amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of the output tokens.\"},\"returns\":{\"amountOut_\":\"The input token amount.\"}},\"swapExactTokensForETH(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountIn\":\"The amount of input tokens to send.\",\"_amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of ETH.\"},\"returns\":{\"amountOut_\":\"The input token amount.\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountIn\":\"The amount of input tokens to send.\",\"_amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of the output tokens.\"},\"returns\":{\"amountOut_\":\"The output token amount.\"}},\"swapTokensForExactETH(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountInMax\":\"The maximum amount of input tokens that can be required before the transaction reverts.\",\"_amountOut\":\"The amount of ETH to receive.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of ETH.\"},\"returns\":{\"amountIn_\":\"The input token amount.\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountInMax\":\"The maximum amount of input tokens that can be required before the transaction reverts.\",\"_amountOut\":\"The amount of output tokens to receive.\",\"_deadline\":\"Unix timestamp after which the transaction will revert.\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"_to\":\"Recipient of the output tokens.\"},\"returns\":{\"amountIn_\":\"The input token amount.\"}}},\"stateVariables\":{\"DEFAULT_AMOUNT_IN_CACHED\":{\"details\":\"Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value\"},\"WETH\":{\"return\":\"address of the WETH token (Wrapped Ether)\",\"returns\":{\"_0\":\"address of the WETH token (Wrapped Ether)\"}},\"amountInCached\":{\"details\":\"Transient storage variable used for returning the computed amount in for an exact output swap.\"},\"factory\":{\"return\":\"address of the factory\",\"returns\":{\"_0\":\"address of the factory\"}}},\"title\":\"SmardexRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"get WETH address\"},\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\"},\"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to an ERC-20=WETH pool with ETH. msg.value is the amount of ETH to add as liquidity. if the token/WETH price is <= amountTokenDesired/msg.value (WETH depreciates).\"},\"factory()\":{\"notice\":\"get the factory address\"},\"getAmountIn((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))\":{\"notice\":\"return the amount of tokens the user should spend by doing a swap\"},\"getAmountInFromPair(uint256,address,address)\":{\"notice\":\"return the amount of tokens the user should spend by doing a swap by directly              fetching data from the pair tokenIn/tokenOut\"},\"getAmountOut((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))\":{\"notice\":\"return the amount of tokens the user would get by doing a swap\"},\"getAmountOutFromPair(uint256,address,address)\":{\"notice\":\"return the amount of tokens the user should spend by doing a swap by directly              fetching data from the pair tokenIn/tokenOut\"},\"quote(uint256,uint256,uint256)\":{\"notice\":\"Given some asset amount and reserves, returns an amount of the other asset representing equivalent value.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from an ERC-20=ERC-20 pool.\"},\"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from an ERC-20=WETH pool and receive ETH.\"},\"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Removes liquidity from an ERC-20=WETH pool and receive ETH without pre-approval\"},\"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Removes liquidity from an ERC-20=WETH pool and receive ETH.\"},\"smardexMintCallback((address,address,uint256,uint256,address))\":{\"notice\":\"callback to implement when calling SmardexPair.mint\"},\"smardexSwapCallback(int256,int256,bytes)\":{\"notice\":\"callback data for swap\"},\"swapETHForExactTokens(uint256,address[],address,uint256)\":{\"notice\":\"Receive an exact amount of tokens for as little ETH as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist). msg.value The maximum amount of ETH that can be required before the transaction reverts.\"},\"swapExactETHForTokens(uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapExactTokensForETH(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapTokensForExactETH(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Receive an exact amount of ETH for as few input tokens as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Receive an exact amount of output tokens for as few input tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate tokens to trade through (if, for example, a direct pair does not exist).\"}},\"notice\":\"Router for execution of swaps and liquidity management on SmardexPair\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/SmardexRouter.sol\":\"SmardexRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/core/interfaces/ISmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexFactory {\\r\\n    /**\\r\\n     * @notice emitted at each SmardexPair created\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param pair address of the SmardexPair created\\r\\n     * @param totalPair number of SmardexPair created so far\\r\\n     */\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 totalPair);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the feeTo is updated\\r\\n     * @param previousFeeTo the previous feeTo address\\r\\n     * @param newFeeTo the new feeTo address\\r\\n     */\\r\\n    event FeeToUpdated(address indexed previousFeeTo, address indexed newFeeTo);\\r\\n\\r\\n    /**\\r\\n     * @notice return which address fees will be transferred\\r\\n     */\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair of 2 tokens\\r\\n     */\\r\\n    function getPair(address _tokenA, address _tokenB) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair at index\\r\\n     * @param _index index of the pair\\r\\n     * @return pair_ address of the pair\\r\\n     */\\r\\n    function allPairs(uint256 _index) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the quantity of pairs\\r\\n     * @return quantity in uint256\\r\\n     */\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP at pair creation\\r\\n     * @return feesPool_ numerator of fees sent to Pool at pair creation\\r\\n     */\\r\\n    function getDefaultFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice create pair with 2 address\\r\\n     * @param _tokenA address of tokenA\\r\\n     * @param _tokenB address of tokenB\\r\\n     * @return pair_ address of the pair created\\r\\n     */\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice set the address who will receive fees, can only be call by the owner\\r\\n     * @param _feeTo address to replace\\r\\n     */\\r\\n    function setFeeTo(address _feeTo) external;\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool for each new pair (onlyOwner)\\r\\n     * @notice sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadffd220721bcff23b4bda9ac128c1e1dd70df26dd8abdb041df12012993da31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice callback data for mint\\r\\n     * @param token0 address of the first token of the pair\\r\\n     * @param token1 address of the second token of the pair\\r\\n     * @param amount0 amount of token0 to provide\\r\\n     * @param amount1 amount of token1 to provide\\r\\n     * @param payer address of the payer to provide token for the mint\\r\\n     */\\r\\n    struct MintCallbackData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback to implement when calling SmardexPair.mint\\r\\n     * @param _data callback data for mint\\r\\n     */\\r\\n    function smardexMintCallback(MintCallbackData calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x977073d28b3e0a3c25812d0ae9995d0f3dc90334f5e21bce53f34d570f2caf3b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\n\\r\\ninterface ISmardexPair is IERC20, IERC20Permit {\\r\\n    /**\\r\\n     * @notice swap parameters used by function swap\\r\\n     * @param amountCalculated return amount from getAmountIn/Out is always positive but to avoid too much cast, is int\\r\\n     * @param fictiveReserveIn fictive reserve of the in-token of the pair\\r\\n     * @param fictiveReserveOut fictive reserve of the out-token of the pair\\r\\n     * @param priceAverageIn in-token ratio component of the price average\\r\\n     * @param priceAverageOut out-token ratio component of the price average\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param balanceIn contract balance of the in-token\\r\\n     * @param balanceOut contract balance of the out-token\\r\\n     */\\r\\n    struct SwapParams {\\r\\n        int256 amountCalculated;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 balanceIn;\\r\\n        uint256 balanceOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each mint\\r\\n     * @param sender address calling the mint function (usually the Router contract)\\r\\n     * @param to address that receives the LP-tokens\\r\\n     * @param amount0 amount of token0 to be added in liquidity\\r\\n     * @param amount1 amount of token1 to be added in liquidity\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each burn\\r\\n     * @param sender address calling the burn function (usually the Router contract)\\r\\n     * @param to address that receives the tokens\\r\\n     * @param amount0 amount of token0 to be withdrawn\\r\\n     * @param amount1 amount of token1 to be withdrawn\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each swap\\r\\n     * @param sender address calling the swap function (usually the Router contract)\\r\\n     * @param to address that receives the out-tokens\\r\\n     * @param amount0 amount of token0 to be swapped\\r\\n     * @param amount1 amount of token1 to be swapped\\r\\n     * @dev one of the 2 amount is always negative, the other one is always positive. The positive one is the one that\\r\\n     * the user send to the contract, the negative one is the one that the contract send to the user.\\r\\n     */\\r\\n    event Swap(address indexed sender, address indexed to, int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time the fictive reserves are changed (mint, burn, swap)\\r\\n     * @param reserve0 the new reserve of token0\\r\\n     * @param reserve1 the new reserve of token1\\r\\n     * @param fictiveReserve0 the new fictive reserve of token0\\r\\n     * @param fictiveReserve1 the new fictive reserve of token1\\r\\n     * @param priceAverage0 the new priceAverage of token0\\r\\n     * @param priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    event Sync(\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 fictiveReserve0,\\r\\n        uint256 fictiveReserve1,\\r\\n        uint256 priceAverage0,\\r\\n        uint256 priceAverage1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token0 address\\r\\n     * @return address of the token0\\r\\n     */\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token1 address\\r\\n     * @return address of the token1\\r\\n     */\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice called once by the factory at time of deployment\\r\\n     * @param _token0 address of token0\\r\\n     * @param _token1 address of token1\\r\\n     * @param _feesLP uint128 feesLP numerator\\r\\n     * @param _feesPool uint128 feesPool numerator\\r\\n     */\\r\\n    function initialize(address _token0, address _token1, uint128 _feesLP, uint128 _feesPool) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return current Reserves of both token in the pair,\\r\\n     *  corresponding to token balance - pending fees\\r\\n     * @return reserve0_ current reserve of token0 - pending fee0\\r\\n     * @return reserve1_ current reserve of token1 - pending fee1\\r\\n     */\\r\\n    function getReserves() external view returns (uint256 reserve0_, uint256 reserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current fictive reserves of both token in the pair\\r\\n     * @return fictiveReserve0_ current fictive reserve of token0\\r\\n     * @return fictiveReserve1_ current fictive reserve of token1\\r\\n     */\\r\\n    function getFictiveReserves() external view returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current pending fees of both token in the pair\\r\\n     * @return fees0_ current pending fees of token0\\r\\n     * @return fees1_ current pending fees of token1\\r\\n     */\\r\\n    function getFeeToAmounts() external view returns (uint256 fees0_, uint256 fees1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP\\r\\n     * @return feesPool_ numerator of fees sent to Pool\\r\\n     */\\r\\n    function getPairFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice return last updated price average at timestamp of both token in the pair,\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @return priceAverage0_ current price for token0\\r\\n     * @return priceAverage1_ current price for token1\\r\\n     * @return blockTimestampLast_ last block timestamp when price was updated\\r\\n     */\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 blockTimestampLast_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current price average of both token in the pair for provided currentTimeStamp\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @param _fictiveReserveIn,\\r\\n     * @param _fictiveReserveOut,\\r\\n     * @param _priceAverageLastTimestamp,\\r\\n     * @param _priceAverageIn current price for token0\\r\\n     * @param _priceAverageOut current price for token1\\r\\n     * @param _currentTimestamp block timestamp to get price\\r\\n     * @return priceAverageIn_ current price for token0\\r\\n     * @return priceAverageOut_ current price for token1\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) external pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance. Should be called from a contract\\r\\n     * that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external returns (uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned. Should be called from a contract that makes safety checks like the\\r\\n     * SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function burn(address _to) external returns (uint256 amount0_, uint256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps tokens. Sends to the defined address the amount of token0 and token1 defined in parameters.\\r\\n     * Tokens to trade should be already sent in the contract.\\r\\n     * Swap function will check if the resulted balance is correct with current reserves and reserves fictive.\\r\\n     * Should be called from a contract that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @param _zeroForOne token0 to token1\\r\\n     * @param _amountSpecified amount of token wanted\\r\\n     * @param _data used for flash swap, data.length must be 0 for regular swap\\r\\n     */\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external returns (int256 amount0_, int256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool of the pair\\r\\n     * @notice sum of new feesLp and feesPool must be <= 100_000\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe0ee503851666f03f283bf91c3ff399bfb3e610b75ed225974e9b25243ea9f75\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexSwapCallback {\\r\\n    /**\\r\\n     * @notice callback data for swap from SmardexRouter\\r\\n     * @param path path of the swap, array of token addresses tightly packed\\r\\n     * @param payer address of the payer for the swap\\r\\n     */\\r\\n    struct SwapCallbackData {\\r\\n        bytes path;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback data for swap\\r\\n     * @param _amount0Delta amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _amount1Delta amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _data for Router path and payer for the swap (see router for details)\\r\\n     */\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x19dee8a83b6c55ff9a4f62aac5ec820140ea09ed6db85511c7c20c6f87977e8e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/SmardexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\nlibrary SmardexLibrary {\\r\\n    /// @notice base of the FEES\\r\\n    uint256 public constant FEES_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice max fees of feesLP and feesPool sum, 10% FEES_BASE\\r\\n    uint256 public constant FEES_MAX = FEES_BASE / 10;\\r\\n\\r\\n    /// @notice precision for approxEq, not in percent but in APPROX_PRECISION_BASE\\r\\n    uint256 public constant APPROX_PRECISION = 1;\\r\\n\\r\\n    /// @notice base of the APPROX_PRECISION\\r\\n    uint256 public constant APPROX_PRECISION_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice number of seconds to reset priceAverage\\r\\n    uint256 private constant MAX_BLOCK_DIFF_SECONDS = 300;\\r\\n\\r\\n    /// @notice parameters of getAmountIn and getAmountOut\\r\\n    struct GetAmountParameters {\\r\\n        uint256 amount;\\r\\n        uint256 reserveIn;\\r\\n        uint256 reserveOut;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        uint128 feesLP;\\r\\n        uint128 feesPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 numbers are approximately equal, using APPROX_PRECISION\\r\\n     * @param _x number to compare\\r\\n     * @param _y number to compare\\r\\n     * @return true if numbers are approximately equal, false otherwise\\r\\n     */\\r\\n    function approxEq(uint256 _x, uint256 _y) internal pure returns (bool) {\\r\\n        if (_x > _y) {\\r\\n            return _x < (_y + (_y * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        } else {\\r\\n            return _y < (_x + (_x * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 ratio are approximately equal: _xNum _/ xDen ~= _yNum / _yDen\\r\\n     * @param _xNum numerator of the first ratio to compare\\r\\n     * @param _xDen denominator of the first ratio to compare\\r\\n     * @param _yNum numerator of the second ratio to compare\\r\\n     * @param _yDen denominator of the second ratio to compare\\r\\n     * @return true if ratio are approximately equal, false otherwise\\r\\n     */\\r\\n    function ratioApproxEq(uint256 _xNum, uint256 _xDen, uint256 _yNum, uint256 _yDen) internal pure returns (bool) {\\r\\n        return approxEq(_xNum * _yDen, _xDen * _yNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update priceAverage given old timestamp, new timestamp and prices\\r\\n     * @param _fictiveReserveIn ratio component of the new price of the in-token\\r\\n     * @param _fictiveReserveOut ratio component of the new price of the out-token\\r\\n     * @param _priceAverageLastTimestamp timestamp of the last priceAverage update (0, if never updated)\\r\\n     * @param _priceAverageIn ratio component of the last priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the last priceAverage of the out-token\\r\\n     * @param _currentTimestamp timestamp of the priceAverage to update\\r\\n     * @return newPriceAverageIn_ ratio component of the updated priceAverage of the in-token\\r\\n     * @return newPriceAverageOut_ ratio component of the updated priceAverage of the out-token\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) internal pure returns (uint256 newPriceAverageIn_, uint256 newPriceAverageOut_) {\\r\\n        require(_currentTimestamp >= _priceAverageLastTimestamp, \\\"SmardexPair: INVALID_TIMESTAMP\\\");\\r\\n\\r\\n        // very first time\\r\\n        if (_priceAverageLastTimestamp == 0) {\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ = _fictiveReserveOut;\\r\\n        }\\r\\n        // another tx has been done in the same timestamp\\r\\n        else if (_priceAverageLastTimestamp == _currentTimestamp) {\\r\\n            newPriceAverageIn_ = _priceAverageIn;\\r\\n            newPriceAverageOut_ = _priceAverageOut;\\r\\n        }\\r\\n        // need to compute new linear-average price\\r\\n        else {\\r\\n            // compute new price:\\r\\n            uint256 _timeDiff = Math.min(_currentTimestamp - _priceAverageLastTimestamp, MAX_BLOCK_DIFF_SECONDS);\\r\\n\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ =\\r\\n                (((MAX_BLOCK_DIFF_SECONDS - _timeDiff) * _priceAverageOut * newPriceAverageIn_) /\\r\\n                    _priceAverageIn +\\r\\n                    _timeDiff *\\r\\n                    _fictiveReserveOut) /\\r\\n                MAX_BLOCK_DIFF_SECONDS;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountIn so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountIn_ the first amount of in-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountIn\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountIn_ will be set to _amountIn\\r\\n     */\\r\\n    function computeFirstTradeQtyIn(GetAmountParameters memory _param) internal pure returns (uint256 firstAmountIn_) {\\r\\n        // default value\\r\\n        firstAmountIn_ = _param.amount;\\r\\n\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _toSub = _param.fictiveReserveIn * ((FEES_BASE * 2) - (_param.feesPool * 2) - _param.feesLP);\\r\\n            uint256 _toDiv = (FEES_BASE - _param.feesPool) * 2;\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveIn * _param.fictiveReserveOut) * 4) / _param.priceAverageOut) *\\r\\n                _param.priceAverageIn *\\r\\n                ((FEES_BASE - _param.feesPool - _param.feesLP) * (FEES_BASE - _param.feesPool)) +\\r\\n                ((_param.fictiveReserveIn * _param.fictiveReserveIn) * (_param.feesLP * _param.feesLP));\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toSub + _param.amount * _toDiv;\\r\\n            if (_inSqrt < _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountIn_ = (Math.sqrt(_inSqrt) - _toSub) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountOut so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountOut_ the first amount of out-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountOut\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountOut_ will be set to _amountOut\\r\\n     */\\r\\n    function computeFirstTradeQtyOut(\\r\\n        GetAmountParameters memory _param\\r\\n    ) internal pure returns (uint256 firstAmountOut_) {\\r\\n        // default value\\r\\n        firstAmountOut_ = _param.amount;\\r\\n        uint256 _reverseFeesTotal = FEES_BASE - _param.feesPool - _param.feesLP;\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _fictiveReserveOutPredFees = (_param.fictiveReserveIn * _param.feesLP * _param.priceAverageOut) /\\r\\n                _param.priceAverageIn;\\r\\n            uint256 _toAdd = ((_param.fictiveReserveOut * _reverseFeesTotal) * 2) + _fictiveReserveOutPredFees;\\r\\n            uint256 _toDiv = _reverseFeesTotal * 2;\\r\\n\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveOut * _fictiveReserveOutPredFees) * 4) *\\r\\n                (_reverseFeesTotal * (FEES_BASE - _param.feesPool))) /\\r\\n                _param.feesLP +\\r\\n                (_fictiveReserveOutPredFees * _fictiveReserveOutPredFees);\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toAdd - _param.amount * _toDiv;\\r\\n            if (_inSqrt > _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountOut_ = (_toAdd - Math.sqrt(_inSqrt)) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute fictive reserves\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token\\r\\n     */\\r\\n    function computeFictiveReserves(\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    ) internal pure returns (uint256 newFictiveReserveIn_, uint256 newFictiveReserveOut_) {\\r\\n        if (_reserveOut * _fictiveReserveIn < _reserveIn * _fictiveReserveOut) {\\r\\n            uint256 _temp = (((_reserveOut * _reserveOut) / _fictiveReserveOut) * _fictiveReserveIn) / _reserveIn;\\r\\n            newFictiveReserveIn_ =\\r\\n                (_temp * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut +\\r\\n                (_reserveOut * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut;\\r\\n            newFictiveReserveOut_ = _reserveOut + _temp;\\r\\n        } else {\\r\\n            newFictiveReserveIn_ = (_fictiveReserveIn * _reserveOut) / _fictiveReserveOut + _reserveIn;\\r\\n            newFictiveReserveOut_ = (_reserveIn * _fictiveReserveOut) / _fictiveReserveIn + _reserveOut;\\r\\n        }\\r\\n\\r\\n        // div all values by 4\\r\\n        newFictiveReserveIn_ /= 4;\\r\\n        newFictiveReserveOut_ /= 4;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountIn is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ qty of token that leaves in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _amountInWithFee = _param.amount * (FEES_BASE - _param.feesLP - _param.feesPool);\\r\\n        uint256 _numerator = _amountInWithFee * _param.fictiveReserveOut;\\r\\n        uint256 _denominator = _param.fictiveReserveIn * FEES_BASE + _amountInWithFee;\\r\\n        amountOut_ = _numerator / _denominator;\\r\\n\\r\\n        // update new reserves and add lp-fees to pools\\r\\n        uint256 _amountInWithFeeLp = (_amountInWithFee + (_param.amount * _param.feesLP)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - amountOut_;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - amountOut_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountOut is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ qty of token that arrives in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _numerator = _param.fictiveReserveIn * _param.amount * FEES_BASE;\\r\\n        uint256 _denominator = (_param.fictiveReserveOut - _param.amount) *\\r\\n            (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n        amountIn_ = _numerator / _denominator + 1;\\r\\n\\r\\n        // update new reserves\\r\\n        uint256 _amountInWithFeeLp = (amountIn_ * (FEES_BASE - _param.feesPool)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - _param.amount;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - _param.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _amountInWithFees = (_param.amount * (FEES_BASE - _param.feesPool - _param.feesLP)) / FEES_BASE;\\r\\n        uint256 _firstAmountIn = computeFirstTradeQtyIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _amountInWithFees,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountIn == _amountInWithFees &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // avoid stack too deep\\r\\n        {\\r\\n            uint256 _firstAmountInNoFees = (_firstAmountIn * FEES_BASE) / (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n            (\\r\\n                amountOut_,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _firstAmountInNoFees,\\r\\n                    reserveIn: _param.reserveIn,\\r\\n                    reserveOut: _param.reserveOut,\\r\\n                    fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                    fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n\\r\\n            // update amountIn in case there is a second trade\\r\\n            _param.amount -= _firstAmountInNoFees;\\r\\n        }\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountIn < _amountInWithFees) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountOutNoFees;\\r\\n            (\\r\\n                _secondAmountOutNoFees,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountOut_ += _secondAmountOutNoFees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.amount < _param.fictiveReserveOut &&\\r\\n                _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _firstAmountOut = computeFirstTradeQtyOut(_param);\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountOut == _param.amount &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = applyKConstRuleIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _firstAmountOut,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountOut < _param.amount) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountIn;\\r\\n            (\\r\\n                _secondAmountIn,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleIn(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount - _firstAmountOut,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountIn_ += _secondAmountIn;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda58b880f4a83cfa5bbf6bf17c5c4145f18e311c048f6c3a50da7cb1bc75333b\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n/**\\r\\n * @title TransferHelper\\r\\n * @notice helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\n * @custom:from Uniswap lib, adapted to version 0.8.17\\r\\n * @custom:url https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x60ecd8f2f8adab497b83061cd90c8ef6995bb629bbb0c5a88ddf08868cf9f8f4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/periphery/SmardexRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"../core/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./libraries/PoolAddress.sol\\\";\\r\\nimport \\\"./libraries/Path.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../core/interfaces/ISmardexFactory.sol\\\";\\r\\nimport \\\"../core/interfaces/ISmardexPair.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexRouter.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmardexRouter\\r\\n * @notice Router for execution of swaps and liquidity management on SmardexPair\\r\\n */\\r\\ncontract SmardexRouter is ISmardexRouter {\\r\\n    using Path for bytes;\\r\\n    using Path for address[];\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    address public immutable factory;\\r\\n    address public immutable WETH;\\r\\n\\r\\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\\r\\n    /// can never actually be this value\\r\\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\\r\\n\\r\\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\\r\\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\r\\n\\r\\n    modifier ensure(uint256 deadline) {\\r\\n        require(deadline >= block.timestamp, \\\"SmarDexRouter: EXPIRED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _WETH) {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexSwapCallback\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external override {\\r\\n        require(_amount0Delta > 0 || _amount1Delta > 0, \\\"SmardexRouter: Callback Invalid amount\\\");\\r\\n\\r\\n        SwapCallbackData memory _decodedData = abi.decode(_data, (SwapCallbackData));\\r\\n        (address _tokenIn, address _tokenOut) = _decodedData.path.decodeFirstPool();\\r\\n\\r\\n        // ensure that msg.sender is a pair\\r\\n        require(msg.sender == PoolAddress.pairFor(factory, _tokenIn, _tokenOut), \\\"SmarDexRouter: INVALID_PAIR\\\");\\r\\n\\r\\n        (bool _isExactInput, uint256 _amountToPay) = _amount0Delta > 0\\r\\n            ? (_tokenIn < _tokenOut, uint256(_amount0Delta))\\r\\n            : (_tokenOut < _tokenIn, uint256(_amount1Delta));\\r\\n\\r\\n        if (_isExactInput) {\\r\\n            pay(_tokenIn, _decodedData.payer, msg.sender, _amountToPay);\\r\\n        } else if (_decodedData.path.hasMultiplePools()) {\\r\\n            _decodedData.path = _decodedData.path.skipToken();\\r\\n            _swapExactOut(_amountToPay, msg.sender, _decodedData);\\r\\n        } else {\\r\\n            amountInCached = _amountToPay;\\r\\n            _tokenIn = _tokenOut; // swap in/out because exact output swaps are reversed\\r\\n            pay(_tokenIn, _decodedData.payer, msg.sender, _amountToPay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice send tokens to a user. Handle transfer/transferFrom and WETH / ETH or any ERC20 token\\r\\n     * @param _token The token to pay\\r\\n     * @param _payer The entity that must pay\\r\\n     * @param _to The entity that will receive payment\\r\\n     * @param _value The amount to pay\\r\\n     *\\r\\n     * @custom:from UniV3 PeripheryPayments.sol\\r\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\r\\n     */\\r\\n    function pay(address _token, address _payer, address _to, uint256 _value) internal {\\r\\n        if (_token == WETH && address(this).balance >= _value) {\\r\\n            // pay with WETH\\r\\n            IWETH(WETH).deposit{ value: _value }(); // wrap only what is needed to pay\\r\\n            IWETH(WETH).transfer(_to, _value);\\r\\n            //refund dust eth, if any ?\\r\\n        } else if (_payer == address(this)) {\\r\\n            // pay with tokens already in the contract (for the exact input multihop case)\\r\\n            TransferHelper.safeTransfer(_token, _to, _value);\\r\\n        } else {\\r\\n            // pull payment\\r\\n            TransferHelper.safeTransferFrom(_token, _payer, _to, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexMintCallback\\r\\n    function smardexMintCallback(MintCallbackData calldata _data) external override {\\r\\n        // ensure that msg.sender is a pair\\r\\n        require(msg.sender == PoolAddress.pairFor(factory, _data.token0, _data.token1), \\\"SmarDexRouter: INVALID_PAIR\\\");\\r\\n        require(_data.amount0 != 0 || _data.amount1 != 0, \\\"SmardexRouter: Callback Invalid amount\\\");\\r\\n\\r\\n        pay(_data.token0, _data.payer, msg.sender, _data.amount0);\\r\\n        pay(_data.token1, _data.payer, msg.sender, _data.amount1);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountADesired,\\r\\n        uint256 _amountBDesired,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external virtual override ensure(_deadline) returns (uint256 amountA_, uint256 amountB_, uint256 liquidity_) {\\r\\n        (amountA_, amountB_) = _addLiquidity(\\r\\n            _tokenA,\\r\\n            _tokenB,\\r\\n            _amountADesired,\\r\\n            _amountBDesired,\\r\\n            _amountAMin,\\r\\n            _amountBMin\\r\\n        );\\r\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\r\\n        bool _orderedPair = _tokenA < _tokenB;\\r\\n        liquidity_ = ISmardexPair(_pair).mint(\\r\\n            _to,\\r\\n            _orderedPair ? amountA_ : amountB_,\\r\\n            _orderedPair ? amountB_ : amountA_,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function addLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _amountTokenDesired,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        virtual\\r\\n        override\\r\\n        ensure(_deadline)\\r\\n        returns (uint256 amountToken_, uint256 amountETH_, uint256 liquidity_)\\r\\n    {\\r\\n        (amountToken_, amountETH_) = _addLiquidity(\\r\\n            _token,\\r\\n            WETH,\\r\\n            _amountTokenDesired,\\r\\n            msg.value,\\r\\n            _amountTokenMin,\\r\\n            _amountETHMin\\r\\n        );\\r\\n\\r\\n        address _pair = PoolAddress.pairFor(factory, _token, WETH);\\r\\n        bool _orderedPair = _token < WETH;\\r\\n\\r\\n        liquidity_ = ISmardexPair(_pair).mint(\\r\\n            _to,\\r\\n            _orderedPair ? amountToken_ : amountETH_,\\r\\n            _orderedPair ? amountETH_ : amountToken_,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amountETH_) {\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function removeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) public virtual override ensure(_deadline) returns (uint256 amountA_, uint256 amountB_) {\\r\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\r\\n        ISmardexPair(_pair).transferFrom(msg.sender, _pair, _liquidity); // send liquidity to pair\\r\\n\\r\\n        (uint256 _amount0, uint256 _amount1) = ISmardexPair(_pair).burn(_to);\\r\\n        (address _token0, ) = PoolHelpers.sortTokens(_tokenA, _tokenB);\\r\\n        (amountA_, amountB_) = _tokenA == _token0 ? (_amount0, _amount1) : (_amount1, _amount0);\\r\\n\\r\\n        require(amountA_ >= _amountAMin, \\\"SmarDexRouter: INSUFFICIENT_A_AMOUNT\\\");\\r\\n        require(amountB_ >= _amountBMin, \\\"SmarDexRouter: INSUFFICIENT_B_AMOUNT\\\");\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function removeLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) public virtual override ensure(_deadline) returns (uint256 amountToken_, uint256 amountETH_) {\\r\\n        (amountToken_, amountETH_) = removeLiquidity(\\r\\n            _token,\\r\\n            WETH,\\r\\n            _liquidity,\\r\\n            _amountTokenMin,\\r\\n            _amountETHMin,\\r\\n            address(this),\\r\\n            _deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(_token, _to, amountToken_);\\r\\n        IWETH(WETH).withdraw(amountETH_);\\r\\n        TransferHelper.safeTransferETH(_to, amountETH_);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function removeLiquidityWithPermit(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external virtual override returns (uint256 amountA_, uint256 amountB_) {\\r\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\r\\n        uint256 _value = _approveMax ? type(uint256).max : _liquidity;\\r\\n        ISmardexPair(_pair).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\r\\n        (amountA_, amountB_) = removeLiquidity(_tokenA, _tokenB, _liquidity, _amountAMin, _amountBMin, _to, _deadline);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external virtual override returns (uint256 amountToken_, uint256 amountETH_) {\\r\\n        address _pair = PoolAddress.pairFor(factory, _token, WETH);\\r\\n        uint256 _value = _approveMax ? type(uint256).max : _liquidity;\\r\\n        ISmardexPair(_pair).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\r\\n        (amountToken_, amountETH_) = removeLiquidityETH(\\r\\n            _token,\\r\\n            _liquidity,\\r\\n            _amountTokenMin,\\r\\n            _amountETHMin,\\r\\n            _to,\\r\\n            _deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) public virtual override ensure(_deadline) returns (uint256 amountOut_) {\\r\\n        address _payer = msg.sender; // msg.sender pays for the first hop\\r\\n\\r\\n        bytes memory _bytesPath = _path.encodeTightlyPacked(); //could be done in the caller function\\r\\n        while (true) {\\r\\n            bool _hasMultiplePools = _bytesPath.hasMultiplePools();\\r\\n\\r\\n            // the outputs of prior swaps become the inputs to subsequent ones\\r\\n            _amountIn = _swapExactIn(\\r\\n                _amountIn,\\r\\n                // for intermediate swaps, this contract custodies\\r\\n                _hasMultiplePools ? address(this) : _to,\\r\\n                // only the first pool in the path is necessary\\r\\n                SwapCallbackData({ path: _bytesPath.getFirstPool(), payer: _payer })\\r\\n            );\\r\\n\\r\\n            // decide whether to continue or terminate\\r\\n            if (_hasMultiplePools) {\\r\\n                _payer = address(this); // at this point, the caller has paid\\r\\n                _bytesPath = _bytesPath.skipToken();\\r\\n            } else {\\r\\n                // amountOut of the final swap is the last amountIn captured in the loop\\r\\n                amountOut_ = _amountIn;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(amountOut_ >= _amountOutMin, \\\"SmarDexRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) public virtual override ensure(_deadline) returns (uint256 amountIn_) {\\r\\n        // Path needs to be reversed as to get the amountIn that we will ask from next pair hop\\r\\n        bytes memory _reversedPath = _path.encodeTightlyPackedReversed();\\r\\n        amountIn_ = _swapExactOut(_amountOut, _to, SwapCallbackData({ path: _reversedPath, payer: msg.sender }));\\r\\n        // amount In is only the right one for one Hop, otherwise we need cached amountIn from callback\\r\\n        if (_path.length > 2) amountIn_ = amountInCached;\\r\\n        require(amountIn_ <= _amountInMax, \\\"SmarDexRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\r\\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external virtual override ensure(_deadline) returns (uint256 amountIn_) {\\r\\n        require(_path[_path.length - 1] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\r\\n        amountIn_ = swapTokensForExactTokens(_amountOut, _amountInMax, _path, address(this), _deadline);\\r\\n        _unwrapWETH(_amountOut, _to);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable virtual override ensure(_deadline) returns (uint256 amountIn_) {\\r\\n        require(_path[0] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\r\\n        amountIn_ = swapTokensForExactTokens(_amountOut, msg.value, _path, _to, _deadline);\\r\\n\\r\\n        // Refund unused ETH\\r\\n        _refundETH(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable virtual override ensure(_deadline) returns (uint256 amountOut_) {\\r\\n        require(_path[0] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\r\\n        amountOut_ = swapExactTokensForTokens(msg.value, _amountOutMin, _path, _to, _deadline);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external virtual override ensure(_deadline) returns (uint256 amountOut_) {\\r\\n        require(_path[_path.length - 1] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\r\\n        amountOut_ = swapExactTokensForTokens(_amountIn, _amountOutMin, _path, address(this), _deadline);\\r\\n        _unwrapWETH(amountOut_, _to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice internal function to unwrap WETH to ETH after swap\\r\\n     * @param _amountMinimum minimum amount of WETH that the contract should have\\r\\n     * @param _to address that will receive the ETH unwrapped\\r\\n     *\\r\\n     * @custom:from UniV3 PeripheryPayments.sol\\r\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\r\\n     */\\r\\n    function _unwrapWETH(uint256 _amountMinimum, address _to) internal {\\r\\n        uint256 _balanceWETH = IERC20(WETH).balanceOf(address(this));\\r\\n        require(_balanceWETH >= _amountMinimum, \\\"Insufficient WETH\\\");\\r\\n\\r\\n        if (_balanceWETH != 0) {\\r\\n            IWETH(WETH).withdraw(_balanceWETH);\\r\\n            TransferHelper.safeTransferETH(_to, _balanceWETH);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice internal function to send all ETH of the contract. Do not fail if the contract does not have any ETH\\r\\n     * @param _to address that will receive the ETH\\r\\n     *\\r\\n     * @custom:from UniV3 PeripheryPayments.sol\\r\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\r\\n     */\\r\\n    function _refundETH(address _to) private {\\r\\n        if (address(this).balance != 0) {\\r\\n            TransferHelper.safeTransferETH(_to, address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice internal function to swap quantity of token to receive a determined quantity\\r\\n     * @param _amountOut quantity to receive\\r\\n     * @param _to address that will receive the token\\r\\n     * @param _data SwapCallbackData data of the swap to transmit\\r\\n     * @return amountIn_ amount of token to pay\\r\\n     */\\r\\n    function _swapExactOut(\\r\\n        uint256 _amountOut,\\r\\n        address _to,\\r\\n        SwapCallbackData memory _data\\r\\n    ) private returns (uint256 amountIn_) {\\r\\n        require(_to != address(0), \\\"SmarDexRouter: INVALID_RECIPIENT\\\");\\r\\n\\r\\n        (address _tokenOut, address _tokenIn) = _data.path.decodeFirstPool();\\r\\n        bool _zeroForOne = _tokenIn < _tokenOut;\\r\\n\\r\\n        // do the swap\\r\\n        (int256 _amount0, int256 _amount1) = ISmardexPair(PoolAddress.pairFor(factory, _tokenIn, _tokenOut)).swap(\\r\\n            _to,\\r\\n            _zeroForOne,\\r\\n            -_amountOut.toInt256(),\\r\\n            abi.encode(_data)\\r\\n        );\\r\\n\\r\\n        amountIn_ = _zeroForOne ? uint256(_amount0) : uint256(_amount1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\\r\\n     * @param _tokenA address of the first token in the pair\\r\\n     * @param _tokenB address of the second token in the pair\\r\\n     * @param _amountADesired The amount of tokenA to add as liquidity\\r\\n     * if the B/A price is <= amountBDesired/amountADesired\\r\\n     * @param _amountBDesired The amount of tokenB to add as liquidity\\r\\n     * if the A/B price is <= amountADesired/amountBDesired\\r\\n     * @param _amountAMin Bounds the extent to which the B/A price can go up before the transaction reverts.\\r\\n     * Must be <= amountADesired.\\r\\n     * @param _amountBMin Bounds the extent to which the A/B price can go up before the transaction reverts.\\r\\n     * Must be <= amountBDesired.\\r\\n     * @return amountA_ The amount of tokenA sent to the pool.\\r\\n     * @return amountB_ The amount of tokenB sent to the pool.\\r\\n     */\\r\\n    function _addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountADesired,\\r\\n        uint256 _amountBDesired,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin\\r\\n    ) internal virtual returns (uint256 amountA_, uint256 amountB_) {\\r\\n        // create the pair if it doesn't exist yet\\r\\n        if (ISmardexFactory(factory).getPair(_tokenA, _tokenB) == address(0)) {\\r\\n            ISmardexFactory(factory).createPair(_tokenA, _tokenB);\\r\\n        }\\r\\n        (uint256 _reserveA, uint256 _reserveB) = PoolHelpers.getReserves(factory, _tokenA, _tokenB);\\r\\n        if (_reserveA == 0 && _reserveB == 0) {\\r\\n            (amountA_, amountB_) = (_amountADesired, _amountBDesired);\\r\\n        } else {\\r\\n            uint256 _amountBOptimal = PoolHelpers.quote(_amountADesired, _reserveA, _reserveB);\\r\\n            if (_amountBOptimal <= _amountBDesired) {\\r\\n                require(_amountBOptimal >= _amountBMin, \\\"SmarDexRouter: INSUFFICIENT_B_AMOUNT\\\");\\r\\n                (amountA_, amountB_) = (_amountADesired, _amountBOptimal);\\r\\n            } else {\\r\\n                uint256 _amountAOptimal = PoolHelpers.quote(_amountBDesired, _reserveB, _reserveA);\\r\\n                assert(_amountAOptimal <= _amountADesired);\\r\\n                require(_amountAOptimal >= _amountAMin, \\\"SmarDexRouter: INSUFFICIENT_A_AMOUNT\\\");\\r\\n                (amountA_, amountB_) = (_amountAOptimal, _amountBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice internal function to swap a determined quantity of token\\r\\n     * @param _amountIn quantity to swap\\r\\n     * @param _to address that will receive the token\\r\\n     * @param _data SwapCallbackData data of the swap to transmit\\r\\n     * @return amountOut_ amount of token that _to will receive\\r\\n     */\\r\\n    function _swapExactIn(\\r\\n        uint256 _amountIn,\\r\\n        address _to,\\r\\n        SwapCallbackData memory _data\\r\\n    ) internal returns (uint256 amountOut_) {\\r\\n        // allow swapping to the router address with address 0\\r\\n        if (_to == address(0)) {\\r\\n            _to = address(this);\\r\\n        }\\r\\n\\r\\n        (address _tokenIn, address _tokenOut) = _data.path.decodeFirstPool();\\r\\n        bool _zeroForOne = _tokenIn < _tokenOut;\\r\\n        (int256 _amount0, int256 _amount1) = ISmardexPair(PoolAddress.pairFor(factory, _tokenIn, _tokenOut)).swap(\\r\\n            _to,\\r\\n            _zeroForOne,\\r\\n            _amountIn.toInt256(),\\r\\n            abi.encode(_data)\\r\\n        );\\r\\n\\r\\n        amountOut_ = (_zeroForOne ? -_amount1 : -_amount0).toUint256();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function quote(\\r\\n        uint256 _amountA,\\r\\n        uint256 _reserveA,\\r\\n        uint256 _reserveB\\r\\n    ) public pure virtual override returns (uint256 amountB_) {\\r\\n        return PoolHelpers.quote(_amountA, _reserveA, _reserveB);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function getAmountOut(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        /// @dev The values _priceAverageIn and _priceAverageOut are not directly fetched from the pair,\\r\\n        ///      and therefore, they may not necessarily be up to date with the most recent data. In\\r\\n        ///      order to yield a _amountOut that represents the most current value, it is crucial that\\r\\n        ///      the args _priceAverageIn and _priceAverageOut reflects the latest, updated data.\\r\\n        (amountOut_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\r\\n            .getAmountOut(_param);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function getAmountIn(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\r\\n            .getAmountIn(_param);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function getAmountOutFromPair(\\r\\n        uint256 _amountIn,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        SmardexLibrary.GetAmountParameters memory _param;\\r\\n        _param.amount = _amountIn;\\r\\n\\r\\n        ISmardexPair _pair = ISmardexPair(ISmardexFactory(factory).getPair(_tokenIn, _tokenOut));\\r\\n        require(address(_pair) != address(0), \\\"SmarDexRouter: INVALID_TOKENS\\\");\\r\\n        uint256 _priceAverageLastTimestamp;\\r\\n\\r\\n        // fetch data\\r\\n        if (_tokenIn == _pair.token0()) {\\r\\n            (_param.reserveIn, _param.reserveOut) = _pair.getReserves();\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = _pair.getFictiveReserves();\\r\\n            (_param.priceAverageIn, _param.priceAverageOut, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\r\\n        } else {\\r\\n            (_param.reserveOut, _param.reserveIn) = _pair.getReserves();\\r\\n            (_param.fictiveReserveOut, _param.fictiveReserveIn) = _pair.getFictiveReserves();\\r\\n            (_param.priceAverageOut, _param.priceAverageIn, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\r\\n        }\\r\\n\\r\\n        // update price average\\r\\n        (_param.priceAverageIn, _param.priceAverageOut) = _pair.getUpdatedPriceAverage(\\r\\n            _param.fictiveReserveIn,\\r\\n            _param.fictiveReserveOut,\\r\\n            _priceAverageLastTimestamp,\\r\\n            _param.priceAverageIn,\\r\\n            _param.priceAverageOut,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // get pair fees\\r\\n        (_param.feesLP, _param.feesPool) = _pair.getPairFees();\\r\\n\\r\\n        (amountOut_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\r\\n            .getAmountOut(_param);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexRouter\\r\\n    function getAmountInFromPair(\\r\\n        uint256 _amountOut,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        SmardexLibrary.GetAmountParameters memory _param;\\r\\n        _param.amount = _amountOut;\\r\\n\\r\\n        ISmardexPair _pair = ISmardexPair(ISmardexFactory(factory).getPair(_tokenIn, _tokenOut));\\r\\n        require(address(_pair) != address(0), \\\"SmarDexRouter: INVALID_TOKENS\\\");\\r\\n        uint256 _priceAverageLastTimestamp;\\r\\n\\r\\n        // fetch data\\r\\n        if (_tokenIn == _pair.token0()) {\\r\\n            (_param.reserveIn, _param.reserveOut) = _pair.getReserves();\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = _pair.getFictiveReserves();\\r\\n            (_param.priceAverageIn, _param.priceAverageOut, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\r\\n        } else {\\r\\n            (_param.reserveOut, _param.reserveIn) = _pair.getReserves();\\r\\n            (_param.fictiveReserveOut, _param.fictiveReserveIn) = _pair.getFictiveReserves();\\r\\n            (_param.priceAverageOut, _param.priceAverageIn, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\r\\n        }\\r\\n\\r\\n        // update price average\\r\\n        (_param.priceAverageIn, _param.priceAverageOut) = _pair.getUpdatedPriceAverage(\\r\\n            _param.fictiveReserveIn,\\r\\n            _param.fictiveReserveOut,\\r\\n            _priceAverageLastTimestamp,\\r\\n            _param.priceAverageIn,\\r\\n            _param.priceAverageOut,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // get pair fees\\r\\n        (_param.feesLP, _param.feesPool) = _pair.getPairFees();\\r\\n\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\r\\n            .getAmountIn(_param);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x734ab46fbfe4f3fe8853d2af4ab92897ae12e3f589458f21c78f4109a2be1453\",\"license\":\"GPL-3.0-or-later\"},\"contracts/periphery/interfaces/ISmardexRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../../core/interfaces/ISmardexSwapCallback.sol\\\";\\r\\nimport \\\"../../core/interfaces/ISmardexMintCallback.sol\\\";\\r\\nimport \\\"../../core/libraries/SmardexLibrary.sol\\\";\\r\\n\\r\\ninterface ISmardexRouter is ISmardexSwapCallback, ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get WETH address\\r\\n     * @return address of the WETH token (Wrapped Ether)\\r\\n     */\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\\r\\n     * @param _tokenA address of the first token in the pair\\r\\n     * @param _tokenB address of the second token in the pair\\r\\n     * @param _amountADesired The amount of tokenA to add as liquidity\\r\\n     * if the B/A price is <= amountBDesired/amountADesired\\r\\n     * @param _amountBDesired The amount of tokenB to add as liquidity\\r\\n     * if the A/B price is <= amountADesired/amountBDesired\\r\\n     * @param _amountAMin Bounds the extent to which the B/A price can go up before the transaction reverts.\\r\\n     * Must be <= amountADesired.\\r\\n     * @param _amountBMin Bounds the extent to which the A/B price can go up before the transaction reverts.\\r\\n     * Must be <= amountBDesired.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountA_ The amount of tokenA sent to the pool.\\r\\n     * @return amountB_ The amount of tokenB sent to the pool.\\r\\n     * @return liquidity_ The amount of liquidity tokens minted.\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountADesired,\\r\\n        uint256 _amountBDesired,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_, uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds liquidity to an ERC-20=WETH pool with ETH. msg.value is the amount of ETH to add as liquidity.\\r\\n     * if the token/WETH price is <= amountTokenDesired/msg.value (WETH depreciates).\\r\\n     * @param _token A pool token.\\r\\n     * @param _amountTokenDesired The amount of token to add as liquidity if the WETH/token price\\r\\n     * is <= msg.value/amountTokenDesired (token depreciates).\\r\\n     * @param _amountTokenMin Bounds the extent to which the WETH/token price can go up before the transaction reverts.\\r\\n     * Must be <= amountTokenDesired.\\r\\n     * @param _amountETHMin Bounds the extent to which the token/WETH price can go up before the transaction reverts.\\r\\n     * Must be <= msg.value.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountToken_ The amount of token sent to the pool.\\r\\n     * @return amountETH_ The amount of ETH converted to WETH and sent to the pool.\\r\\n     * @return liquidity_ The amount of liquidity tokens minted.\\r\\n     */\\r\\n    function addLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _amountTokenDesired,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountToken_, uint256 amountETH_, uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=ERC-20 pool.\\r\\n     * @param _tokenA A pool token.\\r\\n     * @param _tokenB A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\r\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountA_ The amount of tokenA received.\\r\\n     * @return amountB_ The amount of tokenB received.\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\r\\n     * @param _token A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\r\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountToken_ The amount of token received.\\r\\n     * @return amountETH_ The amount of ETH received.\\r\\n     */\\r\\n    function removeLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\r\\n     * @param _tokenA A pool token.\\r\\n     * @param _tokenB A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\r\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     * @return amountA_ The amount of tokenA received.\\r\\n     * @return amountB_ The amount of tokenB received.\\r\\n     */\\r\\n    function removeLiquidityWithPermit(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH without pre-approval\\r\\n     * @param _token A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\r\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     * @return amountToken_ The amount of token received.\\r\\n     * @return amountETH_ The amount of ETH received.\\r\\n     */\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined\\r\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\r\\n     * elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountIn The amount of input tokens to send.\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The output token amount.\\r\\n     */\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible, along the route determined\\r\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\r\\n     * elements represent intermediate tokens to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOut The amount of output tokens to receive.\\r\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the\\r\\n     * path. The first element of path must be WETH, the last is the output token, and any intermediate elements\\r\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The input token amount.\\r\\n     */\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of ETH for as few input tokens as possible, along the route determined by the\\r\\n     * path. The first element of path is the input token, the last must be WETH, and any intermediate elements\\r\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOut The amount of ETH to receive.\\r\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of ETH.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path.\\r\\n     * The first element of path is the input token, the last must be WETH, and any intermediate elements represent\\r\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountIn The amount of input tokens to send.\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of ETH.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The input token amount.\\r\\n     */\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of tokens for as little ETH as possible, along the route determined by the path.\\r\\n     * The first element of path must be WETH, the last is the output token and any intermediate elements represent\\r\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * msg.value The maximum amount of ETH that can be required before the transaction reverts.\\r\\n     * @param _amountOut The amount of tokens to receive.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Given some asset amount and reserves, returns an amount of the other asset representing equivalent value.\\r\\n     */\\r\\n    function quote(\\r\\n        uint256 _amountA,\\r\\n        uint256 _fictiveReserveA,\\r\\n        uint256 _fictiveReserveB\\r\\n    ) external pure returns (uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\r\\n     *              fetching data from the pair tokenIn/tokenOut\\r\\n     * @param _amountIn quantity of token the user want to swap (to buy)\\r\\n     * @param _tokenIn address of the token the user want to sell\\r\\n     * @param _tokenOut address of the token the user want to buy\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOutFromPair(\\r\\n        uint256 _amountIn,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\r\\n     *              fetching data from the pair tokenIn/tokenOut\\r\\n     * @param _amountOut quantity of token the user want to swap (to sell)\\r\\n     * @param _tokenIn address of the token the user want to sell\\r\\n     * @param _tokenOut address of the token the user want to buy\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountInFromPair(\\r\\n        uint256 _amountOut,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x22733781dfec10071d3869814f07fe3b5cdaa65fffb887fc1f5cf9551dd5afef\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca10b02968afa11ba01c8c7f165e4ce5a0610aea892cdb347c3190775021e478\",\"license\":\"GPL-3.0\"},\"contracts/periphery/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n * @custom:url https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\nlibrary BytesLib {\\r\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c54f1a1198067e6207f02ca6e947cba516d2524cce6ae2e6fe99b998c53cffe\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"./BytesLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Functions for manipulating path data for multihop swaps\\r\\n * @custom:from UniswapV3\\r\\n * @custom:url https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\r\\n * @custom:editor SmarDex team\\r\\n */\\r\\nlibrary Path {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    /// @dev The length of the bytes encoded address\\r\\n    uint256 private constant ADDR_SIZE = 20;\\r\\n\\r\\n    /// @dev The offset of a single token address\\r\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE;\\r\\n    /// @dev The offset of an encoded pool key\\r\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\r\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\r\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\r\\n\\r\\n    /// @notice Returns true if the path contains two or more pools\\r\\n    /// @param path The encoded swap path\\r\\n    /// @return True if path contains two or more pools, otherwise false\\r\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\r\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of pools in the path\\r\\n    /// @param _path The encoded swap path\\r\\n    /// @return The number of pools in the path\\r\\n    function numPools(bytes memory _path) internal pure returns (uint256) {\\r\\n        return ((_path.length - ADDR_SIZE) / NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes the first pool in path\\r\\n    /// @param _path The bytes encoded swap path\\r\\n    /// @return tokenA_ The first token of the given pool\\r\\n    /// @return tokenB_ The second token of the given pool\\r\\n    function decodeFirstPool(bytes memory _path) internal pure returns (address tokenA_, address tokenB_) {\\r\\n        tokenA_ = _path.toAddress(0);\\r\\n        tokenB_ = _path.toAddress(NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the segment corresponding to the first pool in the path\\r\\n    /// @param _path The bytes encoded swap path\\r\\n    /// @return The segment containing all data necessary to target the first pool in the path\\r\\n    function getFirstPool(bytes memory _path) internal pure returns (bytes memory) {\\r\\n        return _path.slice(0, POP_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Skips a token from the buffer and returns the remainder\\r\\n    /// @param _path The swap path\\r\\n    /// @return The remaining token elements in the path\\r\\n    function skipToken(bytes memory _path) internal pure returns (bytes memory) {\\r\\n        return _path.slice(NEXT_OFFSET, _path.length - NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the _path addresses concatenated as a packed bytes array\\r\\n    /// @param _path The swap path\\r\\n    /// @return encoded_ The bytes array containing the packed addresses\\r\\n    function encodeTightlyPacked(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\r\\n        uint256 len = _path.length;\\r\\n        for (uint256 i; i != len; ) {\\r\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i]));\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the _path addresses concatenated in a reversed order as a packed bytes array\\r\\n    /// @param _path The swap path\\r\\n    /// @return encoded_ The bytes array containing the packed addresses\\r\\n    function encodeTightlyPackedReversed(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\r\\n        uint256 len = _path.length;\\r\\n        for (uint256 i = len; i != 0; ) {\\r\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i - 1]));\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae1769066fcf25ef5cedba17a6de86b133ea84c781c2eaa7c23582d46dc64923\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"./PoolHelpers.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../../core/interfaces/ISmardexFactory.sol\\\";\\r\\n\\r\\nlibrary PoolAddress {\\r\\n    /**\\r\\n     * @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n     * @param _factory The SmarDex factory contract address\\r\\n     * @param _tokenA The first token of the pool\\r\\n     * @param _tokenB The second token of the pool\\r\\n     * @return pair_ The contract address of the SmardexPair\\r\\n     */\\r\\n    function pairFor(address _factory, address _tokenA, address _tokenB) internal pure returns (address pair_) {\\r\\n        (address _token0, address _token1) = PoolHelpers.sortTokens(_tokenA, _tokenB);\\r\\n        pair_ = address(\\r\\n            uint160(\\r\\n                uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            _factory,\\r\\n                            keccak256(abi.encodePacked(_token0, _token1)),\\r\\n                            hex\\\"33bee911475f015247aeb1eebe149d1c6d2669be54126c29d85df6b0abb4c4e9\\\" // init code hash\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice make a call to the factory to determine the pair address. useful for coverage test\\r\\n     * @param _factory The SmarDex factory contract address\\r\\n     * @param _tokenA The first token of the pool\\r\\n     * @param _tokenB The second token of the pool\\r\\n     * @return pair_ The contract address of the SmardexPair\\r\\n     */\\r\\n    function pairForByStorage(\\r\\n        address _factory,\\r\\n        address _tokenA,\\r\\n        address _tokenB\\r\\n    ) internal view returns (address pair_) {\\r\\n        return ISmardexFactory(_factory).getPair(_tokenA, _tokenB);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd6e05dc7d8440ba85594d39555c67beb5c8513310b5e5504e0ccff50567e5993\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/libraries/PoolHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"./PoolAddress.sol\\\";\\r\\nimport \\\"../../core/libraries/SmardexLibrary.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../../core/interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\nlibrary PoolHelpers {\\r\\n    /**\\r\\n     * @notice sort token addresses, used to handle return values from pairs sorted in this order\\r\\n     * @param _tokenA token to sort\\r\\n     * @param _tokenB token to sort\\r\\n     * @return token0_ token0 sorted\\r\\n     * @return token1_ token1 sorted\\r\\n     */\\r\\n    function sortTokens(address _tokenA, address _tokenB) internal pure returns (address token0_, address token1_) {\\r\\n        require(_tokenA != _tokenB, \\\"SmardexHelper: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0_, token1_) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\r\\n        require(token0_ != address(0), \\\"SmardexHelper: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice fetches the reserves for a pair\\r\\n     * @param _factory the factory address\\r\\n     * @param _tokenA token to fetch reserves\\r\\n     * @param _tokenB token to fetch reserves\\r\\n     * @return reserveA_ reserves of tokenA in the pair tokenA/TokenB\\r\\n     * @return reserveB_ reserves of tokenB in the pair tokenA/TokenB\\r\\n     */\\r\\n    function getReserves(\\r\\n        address _factory,\\r\\n        address _tokenA,\\r\\n        address _tokenB\\r\\n    ) internal view returns (uint256 reserveA_, uint256 reserveB_) {\\r\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\r\\n        (uint256 _reserve0, uint256 _reserve1) = ISmardexPair(PoolAddress.pairFor(_factory, _tokenA, _tokenB))\\r\\n            .getReserves();\\r\\n        (reserveA_, reserveB_) = _tokenA == _token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice fetches the fictive reserves for a pair\\r\\n     * @param _factory the factory address\\r\\n     * @param _tokenA token to fetch fictive reserves\\r\\n     * @param _tokenB token to fetch fictive reserves\\r\\n     * @return fictiveReserveA_ fictive reserves of tokenA in the pair tokenA/TokenB\\r\\n     * @return fictiveReserveB_ fictive reserves of tokenB in the pair tokenA/TokenB\\r\\n     */\\r\\n    function getFictiveReserves(\\r\\n        address _factory,\\r\\n        address _tokenA,\\r\\n        address _tokenB\\r\\n    ) internal view returns (uint256 fictiveReserveA_, uint256 fictiveReserveB_) {\\r\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\r\\n        (uint256 _fictiveReserve0, uint256 _fictiveReserve1) = ISmardexPair(\\r\\n            PoolAddress.pairFor(_factory, _tokenA, _tokenB)\\r\\n        ).getFictiveReserves();\\r\\n        (fictiveReserveA_, fictiveReserveB_) = _tokenA == _token0\\r\\n            ? (_fictiveReserve0, _fictiveReserve1)\\r\\n            : (_fictiveReserve1, _fictiveReserve0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice fetches the priceAverage for a pair\\r\\n     * @param _factory the factory address\\r\\n     * @param _tokenA token to fetch priceAverage\\r\\n     * @param _tokenB token to fetch priceAverage\\r\\n     * @return priceAverageA_ priceAverage of tokenA in the pair tokenA/TokenB\\r\\n     * @return priceAverageB_ priceAverage of tokenB in the pair tokenA/TokenB\\r\\n     */\\r\\n    function getPriceAverage(\\r\\n        address _factory,\\r\\n        address _tokenA,\\r\\n        address _tokenB\\r\\n    ) internal view returns (uint256 priceAverageA_, uint256 priceAverageB_) {\\r\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\r\\n        (uint256 _priceAverage0, uint256 _priceAverage1, ) = ISmardexPair(\\r\\n            PoolAddress.pairFor(_factory, _tokenA, _tokenB)\\r\\n        ).getPriceAverage();\\r\\n        (priceAverageA_, priceAverageB_) = _tokenA == _token0\\r\\n            ? (_priceAverage0, _priceAverage1)\\r\\n            : (_priceAverage1, _priceAverage0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n     * @param _amountA amount of asset A\\r\\n     * @param _reserveA reserve of asset A\\r\\n     * @param _reserveB reserve of asset B\\r\\n     * @return amountB_ equivalent amount of asset B\\r\\n     */\\r\\n    function quote(uint256 _amountA, uint256 _reserveA, uint256 _reserveB) internal pure returns (uint256 amountB_) {\\r\\n        require(_amountA != 0, \\\"SmardexHelper: INSUFFICIENT_AMOUNT\\\");\\r\\n        require(_reserveA != 0 && _reserveB != 0, \\\"SmardexHelper: INSUFFICIENT_LIQUIDITY\\\");\\r\\n        amountB_ = (_amountA * _reserveB) / _reserveA;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf3c78a94591001efcf0a6fe829798a3e9e0b9a8af7c7638033edf1524ffd7151\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c8063a1dab4eb116100ab578063c45a01551161006f578063c45a0155146103c1578063ded9382a146103f5578063df91785814610415578063e8e3370014610435578063f305d71914610470578063fb3bdb411461048357600080fd5b8063a1dab4eb146102f5578063ad5c464814610315578063ad615dec14610361578063baa2abde14610381578063bced0116146103a157600080fd5b80634a25d94a116100f25780634a25d94a1461026257806356e73a9c14610282578063797c4a13146102a25780637ff36ab5146102c25780638803dbee146102d557600080fd5b806302751cec1461017257806318cbafe5146101ac5780632195995c146101da578063375e3193146101fa57806338ed17391461024257600080fd5b3661016d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016b5761016b6140db565b005b600080fd5b34801561017e57600080fd5b5061019261018d366004614111565b610496565b604080519283526020830191909152015b60405180910390f35b3480156101b857600080fd5b506101cc6101c73660046141b4565b610592565b6040519081526020016101a3565b3480156101e657600080fd5b506101926101f5366004614246565b61065b565b34801561020657600080fd5b5061021a6102153660046143a4565b610734565b604080519586526020860194909452928401919091526060830152608082015260a0016101a3565b34801561024e57600080fd5b506101cc61025d3660046141b4565b610757565b34801561026e57600080fd5b506101cc61027d3660046141b4565b61086c565b34801561028e57600080fd5b5061021a61029d366004614429565b61092a565b3480156102ae57600080fd5b5061016b6102bd36600461446b565b610e9f565b6101cc6102d036600461447d565b610fd2565b3480156102e157600080fd5b506101cc6102f03660046141b4565b611086565b34801561030157600080fd5b5061016b6103103660046144e4565b611160565b34801561032157600080fd5b506103497f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a3565b34801561036d57600080fd5b506101cc61037c366004614564565b6112e9565b34801561038d57600080fd5b5061019261039c366004614590565b6112fe565b3480156103ad57600080fd5b5061021a6103bc3660046143a4565b6114c6565b3480156103cd57600080fd5b506103497f000000000000000000000000000000000000000000000000000000000000000081565b34801561040157600080fd5b50610192610410366004614602565b6114d7565b34801561042157600080fd5b5061021a610430366004614429565b6115ca565b34801561044157600080fd5b50610455610450366004614698565b611b28565b604080519384526020840192909252908201526060016101a3565b61045561047e366004614111565b611c52565b6101cc61049136600461447d565b611df5565b60008082428110156104c35760405162461bcd60e51b81526004016104ba90614714565b60405180910390fd5b6104f2897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6112fe565b9093509150610502898685611eb3565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561056457600080fd5b505af1158015610578573d6000803e3d6000fd5b505050506105868583611fe4565b50965096945050505050565b600081428110156105b55760405162461bcd60e51b81526004016104ba90614714565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866105ec60018261475a565b8181106105fb576105fb61476d565b90506020020160208101906106109190614783565b6001600160a01b0316146106365760405162461bcd60e51b81526004016104ba906147a0565b610644888888883088610757565b915061065082856120c3565b509695505050505050565b600080600061068b7f00000000000000000000000000000000000000000000000000000000000000008f8f61221e565b905060008761069a578c61069e565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906106d9903390309086908f908e908e908e906004016147d7565b600060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b5050505061071a8f8f8f8f8f8f8f6112fe565b809450819550505050509b509b9950505050505050505050565b6000806000806000610745866122ed565b939a9299509097509550909350915050565b6000814281101561077a5760405162461bcd60e51b81526004016104ba90614714565b336000610787888861266e565b90505b600061079582612706565b90506107d38b826107a657886107a8565b305b60405180604001604052806107bc87612729565b8152602001876001600160a01b0316815250612749565b9a5080156107ee573092506107e782612879565b91506107f7565b8a9450506107fd565b5061078a565b8884101561085f5760405162461bcd60e51b815260206004820152602960248201527f536d6172446578526f757465723a20494e53554646494349454e545f4f555450604482015268155517d05353d5539560ba1b60648201526084016104ba565b5050509695505050505050565b6000814281101561088f5760405162461bcd60e51b81526004016104ba90614714565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866108c660018261475a565b8181106108d5576108d561476d565b90506020020160208101906108ea9190614783565b6001600160a01b0316146109105760405162461bcd60e51b81526004016104ba906147a0565b61091e888888883088611086565b915061065088856120c3565b600080600080600061093a61407d565b88815260405163e6a4390560e01b81526001600160a01b03898116600483015288811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190614818565b90506001600160a01b038116610a2c5760405162461bcd60e51b815260206004820152601d60248201527f536d6172446578526f757465723a20494e56414c49445f544f4b454e5300000060448201526064016104ba565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190614818565b6001600160a01b03168a6001600160a01b031603610c0657816001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190614835565b846020018560400182815250828152505050816001600160a01b0316639a20767b6040518163ffffffff1660e01b81526004016040805180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190614835565b60808501526060808501919091526040805163ee2046c760e01b815290516001600160a01b0385169263ee2046c792600480820193918290030181865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190614859565b60c086019190915260a08501919091529050610d5f565b816001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c679190614835565b60208501526040808501919091528051639a20767b60e01b815281516001600160a01b03851692639a20767b92600480820193918290030181865afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd89190614835565b846080018560600182815250828152505050816001600160a01b031663ee2046c76040518163ffffffff1660e01b8152600401606060405180830381865afa158015610d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4c9190614859565b60a086019190915260c085019190915290505b6060830151608084015160a085015160c086015160405163fb753b6960e01b81526004810194909452602484019290925260448301849052606483015260848201524260a48201526001600160a01b0383169063fb753b699060c4016040805180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190614835565b60c085015260a084015260408051623b15fd60e01b815281516001600160a01b03851692623b15fd92600480820193918290030181865afa158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e689190614887565b6001600160801b039081166101008601521660e0840152610e88836122ed565b939f929e50909c509a509098509650505050505050565b610ee57f0000000000000000000000000000000000000000000000000000000000000000610ed06020840184614783565b610ee06040850160208601614783565b61221e565b6001600160a01b0316336001600160a01b031614610f455760405162461bcd60e51b815260206004820152601b60248201527f536d6172446578526f757465723a20494e56414c49445f50414952000000000060448201526064016104ba565b6040810135151580610f5a5750606081013515155b610f765760405162461bcd60e51b81526004016104ba906148c1565b610fa1610f866020830183614783565b610f9660a0840160808501614783565b33846040013561288d565b610fcf610fb46040830160208401614783565b610fc460a0840160808501614783565b33846060013561288d565b50565b60008142811015610ff55760405162461bcd60e51b81526004016104ba90614714565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106110325761103261476d565b90506020020160208101906110479190614783565b6001600160a01b03161461106d5760405162461bcd60e51b81526004016104ba906147a0565b61107b348888888888610757565b979650505050505050565b600081428110156110a95760405162461bcd60e51b81526004016104ba90614714565b60006110b58787612a13565b90506110df89866040518060400160405280858152602001336001600160a01b0316815250612aac565b925060028611156110f05760005492505b8783111561114e5760405162461bcd60e51b815260206004820152602560248201527f536d6172446578526f757465723a204558434553534956455f494e5055545f416044820152641353d5539560da1b60648201526084016104ba565b50506000196000559695505050505050565b600084138061116f5750600083135b61118b5760405162461bcd60e51b81526004016104ba906148c1565b600061119982840184614907565b90506000806111ab8360000151612c14565b915091506111da7f0000000000000000000000000000000000000000000000000000000000000000838361221e565b6001600160a01b0316336001600160a01b03161461123a5760405162461bcd60e51b815260206004820152601b60248201527f536d6172446578526f757465723a20494e56414c49445f50414952000000000060448201526064016104ba565b6000806000891361126057836001600160a01b0316836001600160a01b03161088611277565b826001600160a01b0316846001600160a01b031610895b91509150811561129657611291848660200151338461288d565b6112de565b84516112a190612706565b156112c45784516112b190612879565b85526112be813387612aac565b506112de565b806000819055508293506112de848660200151338461288d565b505050505050505050565b60006112f6848484612c35565b949350505050565b60008082428110156113225760405162461bcd60e51b81526004016104ba90614714565b600061134f7f00000000000000000000000000000000000000000000000000000000000000008c8c61221e565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af11580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c991906149d8565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190614835565b91509150600061144a8e8e612d0f565b509050806001600160a01b03168e6001600160a01b03161461146d578183611470565b82825b90975095508a8710156114955760405162461bcd60e51b81526004016104ba906149f5565b898610156114b55760405162461bcd60e51b81526004016104ba90614a39565b505050505097509795505050505050565b600080600080600061074586612e03565b60008060006115277f00000000000000000000000000000000000000000000000000000000000000008e7f000000000000000000000000000000000000000000000000000000000000000061221e565b9050600087611536578c61153a565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611575903390309086908f908e908e908e906004016147d7565b600060405180830381600087803b15801561158f57600080fd5b505af11580156115a3573d6000803e3d6000fd5b505050506115b58e8e8e8e8e8e610496565b909f909e509c50505050505050505050505050565b60008060008060006115da61407d565b88815260405163e6a4390560e01b81526001600160a01b03898116600483015288811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116749190614818565b90506001600160a01b0381166116cc5760405162461bcd60e51b815260206004820152601d60248201527f536d6172446578526f757465723a20494e56414c49445f544f4b454e5300000060448201526064016104ba565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190614818565b6001600160a01b03168a6001600160a01b0316036118a657816001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190614835565b846020018560400182815250828152505050816001600160a01b0316639a20767b6040518163ffffffff1660e01b81526004016040805180830381865afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190614835565b60808501526060808501919091526040805163ee2046c760e01b815290516001600160a01b0385169263ee2046c792600480820193918290030181865afa15801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f9190614859565b60c086019190915260a085019190915290506119ff565b816001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa1580156118e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119079190614835565b60208501526040808501919091528051639a20767b60e01b815281516001600160a01b03851692639a20767b92600480820193918290030181865afa158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190614835565b846080018560600182815250828152505050816001600160a01b031663ee2046c76040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614859565b60a086019190915260c085019190915290505b6060830151608084015160a085015160c086015160405163fb753b6960e01b81526004810194909452602484019290925260448301849052606483015260848201524260a48201526001600160a01b0383169063fb753b699060c4016040805180830381865afa158015611a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9b9190614835565b60c085015260a084015260408051623b15fd60e01b815281516001600160a01b03851692623b15fd92600480820193918290030181865afa158015611ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b089190614887565b6001600160801b039081166101008601521660e0840152610e8883612e03565b60008060008342811015611b4e5760405162461bcd60e51b81526004016104ba90614714565b611b5c8c8c8c8c8c8c613078565b90945092506000611b8e7f00000000000000000000000000000000000000000000000000000000000000008e8e61221e565b90506001600160a01b03808d168e82161090821663f74bfe8e8983611bb35787611bb5565b885b84611bc05789611bc2565b885b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523360648201526084016020604051808303816000875af1158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f9190614a7d565b9350505050985098509895505050505050565b60008060008342811015611c785760405162461bcd60e51b81526004016104ba90614714565b611ca68a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613078565b90945092506000611cf87f00000000000000000000000000000000000000000000000000000000000000008c7f000000000000000000000000000000000000000000000000000000000000000061221e565b90506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168c82161090821663f74bfe8e8983611d3d5787611d3f565b885b84611d4a5789611d4c565b885b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523360648201526084016020604051808303816000875af1158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc99190614a7d565b935084341115611de657611de633611de1873461475a565b611fe4565b50505096509650969350505050565b60008142811015611e185760405162461bcd60e51b81526004016104ba90614714565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611e5557611e5561476d565b9050602002016020810190611e6a9190614783565b6001600160a01b031614611e905760405162461bcd60e51b81526004016104ba906147a0565b611e9e873488888888611086565b9150611ea93361329c565b5095945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611f0f9190614aba565b6000604051808303816000865af19150503d8060008114611f4c576040519150601f19603f3d011682016040523d82523d6000602084013e611f51565b606091505b5091509150818015611f7b575080511580611f7b575080806020019051810190611f7b91906149d8565b611fdd5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016104ba565b5050505050565b604080516000808252602082019092526001600160a01b03841690839060405161200e9190614aba565b60006040518083038185875af1925050503d806000811461204b576040519150601f19603f3d011682016040523d82523d6000602084013e612050565b606091505b50509050806120be5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b60648201526084016104ba565b505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561212a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e9190614a7d565b9050828110156121945760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b60448201526064016104ba565b80156120be57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156121fc57600080fd5b505af1158015612210573d6000803e3d6000fd5b505050506120be8282611fe4565b600080600061222d8585612d0f565b6040516001600160601b0319606084811b8216602084015283901b16603482015291935091508690604801604051602081830303815290604052805190602001206040516020016122cb9291906001600160f81b0319815260609290921b6001600160601b031916600183015260158201527f33bee911475f015247aeb1eebe149d1c6d2669be54126c29d85df6b0abb4c4e9603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b6000806000806000856000015160000361235b5760405162461bcd60e51b815260206004820152602960248201527f536d61724465784c6962726172793a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b60648201526084016104ba565b6020860151158015906123715750604086015115155b80156123805750606086015115155b801561238f5750608086015115155b6123ab5760405162461bcd60e51b81526004016104ba90614ad6565b6000620f42408760e001516001600160801b03168861010001516001600160801b0316620f42406123dc919061475a565b6123e6919061475a565b88516123f29190614b1c565b6123fc9190614b49565b9050600061247b6040518061012001604052808481526020018a6020015181526020018a6040015181526020018a6060015181526020018a6080015181526020018a60a0015181526020018a60c0015181526020018a60e001516001600160801b031681526020018a61010001516001600160801b03168152506132ac565b905081811480156124a357506124a3886060015189608001518a60a001518b60c001516134a9565b156124cf576124c4886020015189604001518a606001518b608001516134d0565b60808a015260608901525b60008860e001516001600160801b03168961010001516001600160801b0316620f42406124fc919061475a565b612506919061475a565b612513620f424084614b1c565b61251d9190614b49565b905061259a6040518061012001604052808381526020018b6020015181526020018b6040015181526020018b6060015181526020018b6080015181526020018b60a0015181526020018b60c0015181526020018b60e001516001600160801b031681526020018b61010001516001600160801b03168152506135cc565b8d51949c50929a509098509650945081908a906125b890839061475a565b9052505081811015612663576125d0868686866134d0565b809450819550505060006126496040518061012001604052808b6000015181526020018981526020018881526020018781526020018681526020018b60a0015181526020018b60c0015181526020018b60e001516001600160801b031681526020018b61010001516001600160801b03168152506135cc565b929a5090985096509450905061265f8189614b6b565b9750505b505091939590929450565b60608160005b8181146126fe578285858381811061268e5761268e61476d565b90506020020160208101906126a39190614783565b6040516020016126c6919060609190911b6001600160601b031916815260140190565b60408051601f19818403018152908290526126e49291602001614b7e565b60408051601f198184030181529190529250600101612674565b505092915050565b600060146127148180614b6b565b61271e9190614b6b565b825110159050919050565b6060612743600061273b601480614b6b565b8491906136e8565b92915050565b60006001600160a01b03831661275d573092505b60008061276d8460000151612c14565b90925090506001600160a01b03808216908316106000806127af7f0000000000000000000000000000000000000000000000000000000000000000868661221e565b6001600160a01b0316631f18b37189856127c88d61383f565b8b6040516020016127d99190614bd9565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016128079493929190614c16565b60408051808303816000875af1158015612825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128499190614835565b9150915061286c836128635761285e83614c4f565b6138ad565b61285e82614c4f565b9998505050505050505050565b6060612743601480845161273b919061475a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156128ce5750804710155b156129e1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561292e57600080fd5b505af1158015612942573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af11580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db91906149d8565b50612a0d565b306001600160a01b03841603612a01576129fc848383611eb3565b612a0d565b612a0d848484846138ff565b50505050565b606081805b80156126fe57828585612a2c60018561475a565b818110612a3b57612a3b61476d565b9050602002016020810190612a509190614783565b604051602001612a73919060609190911b6001600160601b031916815260140190565b60408051601f1981840301815290829052612a919291602001614b7e565b60408051601f19818403018152919052925060001901612a18565b60006001600160a01b038316612b045760405162461bcd60e51b815260206004820181905260248201527f536d6172446578526f757465723a20494e56414c49445f524543495049454e5460448201526064016104ba565b600080612b148460000151612c14565b90925090506001600160a01b0380831690821610600080612b567f0000000000000000000000000000000000000000000000000000000000000000858761221e565b6001600160a01b0316631f18b3718985612b6f8d61383f565b612b7890614c4f565b8b604051602001612b899190614bd9565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401612bb79493929190614c16565b60408051808303816000875af1158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf99190614835565b9150915082612c08578061286c565b50979650505050505050565b600080612c218382613a3d565b9150612c2e836014613a3d565b9050915091565b600083600003612c925760405162461bcd60e51b815260206004820152602260248201527f536d617264657848656c7065723a20494e53554646494349454e545f414d4f55604482015261139560f21b60648201526084016104ba565b8215801590612ca057508115155b612cfa5760405162461bcd60e51b815260206004820152602560248201527f536d617264657848656c7065723a20494e53554646494349454e545f4c495155604482015264494449545960d81b60648201526084016104ba565b82612d058386614b1c565b6112f69190614b49565b600080826001600160a01b0316846001600160a01b031603612d7e5760405162461bcd60e51b815260206004820152602260248201527f536d617264657848656c7065723a204944454e544943414c5f41444452455353604482015261455360f01b60648201526084016104ba565b826001600160a01b0316846001600160a01b031610612d9e578284612da1565b83835b90925090506001600160a01b038216612dfc5760405162461bcd60e51b815260206004820152601b60248201527f536d617264657848656c7065723a205a45524f5f41444452455353000000000060448201526064016104ba565b9250929050565b60008060008060008560000151600003612e725760405162461bcd60e51b815260206004820152602a60248201527f536d61724465784c6962726172793a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b60648201526084016104ba565b60808601518651108015612e895750602086015115155b8015612e985750604086015115155b8015612ea75750606086015115155b8015612eb65750608086015115155b612ed25760405162461bcd60e51b81526004016104ba90614ad6565b6000612edd87613af1565b875190915081148015612f075750612f07876060015188608001518960a001518a60c001516134a9565b15612f3357612f288760200151886040015189606001518a608001516134d0565b608089015260608801525b612fae604051806101200160405280838152602001896020015181526020018960400151815260200189606001518152602001896080015181526020018960a0015181526020018960c0015181526020018960e001516001600160801b031681526020018961010001516001600160801b0316815250613ca5565b8b51949a509298509096509450925081101561306e57612fd0858585856134d0565b80935081945050506000613054604051806101200160405280848b60000151612ff9919061475a565b81526020018881526020018781526020018681526020018581526020018a60a0015181526020018a60c0015181526020018a60e001516001600160801b031681526020018a61010001516001600160801b0316815250613ca5565b92995090975095509350905061306a8188614b6b565b9650505b5091939590929450565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa1580156130ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131139190614818565b6001600160a01b0316036131b7576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af1158015613191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b59190614818565b505b6000806131e57f00000000000000000000000000000000000000000000000000000000000000008b8b613dcc565b915091508160001480156131f7575080155b156132075787935086925061328f565b6000613214898484612c35565b9050878111613248578581101561323d5760405162461bcd60e51b81526004016104ba90614a39565b88945092508261328d565b6000613255898486612c35565b905089811115613267576132676140db565b878110156132875760405162461bcd60e51b81526004016104ba906149f5565b94508793505b505b5050965096945050505050565b4715610fcf57610fcf8147611fe4565b805160c082015160608301516132c29190614b1c565b8260a0015183608001516132d69190614b1c565b11156134a45760008260e001516001600160801b031683610100015160026132fe9190614c6b565b6001600160801b0316613315620f42406002614b1c565b61331f919061475a565b613329919061475a565b83606001516133389190614b1c565b905060008361010001516001600160801b0316620f4240613359919061475a565b613364906002614b1c565b60e08501519091506000906133799080614c6b565b6001600160801b0316856060015186606001516133969190614b1c565b6133a09190614b1c565b6101008601516133bc906001600160801b0316620f424061475a565b8660e001516001600160801b03168761010001516001600160801b0316620f42406133e7919061475a565b6133f1919061475a565b6133fb9190614b1c565b8660a001518760c00151886080015189606001516134199190614b1c565b613424906004614b1c565b61342e9190614b49565b6134389190614b1c565b6134429190614b1c565b61344c9190614b6b565b905060008286600001516134609190614b1c565b61346a9085614b6b565b90506134768180614b1c565b82101561349f57828461348884613e82565b613492919061475a565b61349c9190614b49565b94505b505050505b919050565b60006134c76134b88387614b1c565b6134c28587614b1c565b613f71565b95945050505050565b6000806134dd8387614b1c565b6134e78587614b1c565b10156135645760008685856134fc8980614b1c565b6135069190614b49565b6135109190614b1c565b61351a9190614b49565b9050836135278688614b1c565b6135319190614b49565b8461353c8784614b1c565b6135469190614b49565b6135509190614b6b565b925061355c8187614b6b565b9150506135a9565b85836135708787614b1c565b61357a9190614b49565b6135849190614b6b565b915084846135928589614b1c565b61359c9190614b49565b6135a69190614b6b565b90505b6135b4600483614b49565b91506135c1600482614b49565b905094509492505050565b6000806000806000808661010001516001600160801b03168760e001516001600160801b0316620f4240613600919061475a565b61360a919061475a565b87516136169190614b1c565b9050600087608001518261362a9190614b1c565b9050600082620f42408a606001516136429190614b1c565b61364c9190614b6b565b90506136588183614b49565b97506000620f42408a60e001516001600160801b03168b6000015161367d9190614b1c565b6136879086614b6b565b6136919190614b49565b9050808a602001516136a39190614b6b565b9750808a606001516136b59190614b6b565b9550888a604001516136c7919061475a565b9650888a608001516136d9919061475a565b94505050505091939590929450565b6060816136f681601f614b6b565b10156137355760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016104ba565b826137408382614b6b565b101561377f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016104ba565b6137898284614b6b565b845110156137cd5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016104ba565b6060821580156137ec5760405191506000825260208201604052613836565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561382557805183526020928301920161380d565b5050858452601f01601f1916604052505b50949350505050565b60006001600160ff1b038211156138a95760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016104ba565b5090565b6000808212156138a95760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016104ba565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916139639190614aba565b6000604051808303816000865af19150503d80600081146139a0576040519150601f19603f3d011682016040523d82523d6000602084013e6139a5565b606091505b50915091508180156139cf5750805115806139cf5750808060200190518101906139cf91906149d8565b613a355760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016104ba565b505050505050565b600081613a4b816014614b6b565b1015613a8e5760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016104ba565b613a99826014614b6b565b83511015613ae15760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016104ba565b500160200151600160601b900490565b805160e08201516101008301516000916001600160801b0390811691613b1b9116620f424061475a565b613b25919061475a565b90508260c001518360600151613b3b9190614b1c565b8360a001518460800151613b4f9190614b1c565b1115613c9f5760008360a001518460c001518560e001516001600160801b03168660600151613b7e9190614b1c565b613b889190614b1c565b613b929190614b49565b9050600081838660800151613ba79190614b1c565b613bb2906002614b1c565b613bbc9190614b6b565b90506000613bcb846002614b1c565b90506000613bd98480614b1c565b8760e001516001600160801b03168861010001516001600160801b0316620f4240613c04919061475a565b613c0e9088614b1c565b868a60800151613c1e9190614b1c565b613c29906004614b1c565b613c339190614b1c565b613c3d9190614b49565b613c479190614b6b565b90506000828860000151613c5b9190614b1c565b613c65908561475a565b9050613c718180614b1c565b821115613c995782613c8283613e82565b613c8c908661475a565b613c969190614b49565b96505b50505050505b50919050565b600080600080600080620f424087600001518860600151613cc69190614b1c565b613cd09190614b1c565b905060008760e001516001600160801b03168861010001516001600160801b0316620f4240613cff919061475a565b613d09919061475a565b885160808a0151613d1a919061475a565b613d249190614b1c565b9050613d308183614b49565b613d3b906001614b6b565b96506000620f42408961010001516001600160801b0316620f4240613d60919061475a565b613d6a908a614b1c565b613d749190614b49565b9050808960200151613d869190614b6b565b9650808960600151613d989190614b6b565b895160408b0151919650613dab9161475a565b895160808b0151919750613dbe9161475a565b935050505091939590929450565b6000806000613ddb8585612d0f565b509050600080613dec88888861221e565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c9190614835565b91509150826001600160a01b0316876001600160a01b031614613e70578082613e73565b81815b90999098509650505050505050565b600081600003613e9457506000919050565b60006001613ea184613fd3565b901c6001901b90506001818481613eba57613eba614b33565b048201901c90506001818481613ed257613ed2614b33565b048201901c90506001818481613eea57613eea614b33565b048201901c90506001818481613f0257613f02614b33565b048201901c90506001818481613f1a57613f1a614b33565b048201901c90506001818481613f3257613f32614b33565b048201901c90506001818481613f4a57613f4a614b33565b048201901c9050613f6a81828581613f6457613f64614b33565b04614067565b9392505050565b600081831115613fa757620f4240613f8a600184614b1c565b613f949190614b49565b613f9e9083614b6b565b83109050612743565b620f4240613fb6600185614b1c565b613fc09190614b49565b613fca9084614b6b565b82109050612743565b600080608083901c15613fe857608092831c92015b604083901c15613ffa57604092831c92015b602083901c1561400c57602092831c92015b601083901c1561401e57601092831c92015b600883901c1561403057600892831c92015b600483901c1561404257600492831c92015b600283901c1561405457600292831c92015b600183901c156127435760010192915050565b60008183106140765781613f6a565b5090919050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b031681525090565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114610fcf57600080fd5b80356134a4816140f1565b60008060008060008060c0878903121561412a57600080fd5b8635614135816140f1565b9550602087013594506040870135935060608701359250608087013561415a816140f1565b8092505060a087013590509295509295509295565b60008083601f84011261418157600080fd5b50813567ffffffffffffffff81111561419957600080fd5b6020830191508360208260051b8501011115612dfc57600080fd5b60008060008060008060a087890312156141cd57600080fd5b8635955060208701359450604087013567ffffffffffffffff8111156141f257600080fd5b6141fe89828a0161416f565b9095509350506060870135614212816140f1565b80925050608087013590509295509295509295565b8015158114610fcf57600080fd5b803560ff811681146134a457600080fd5b60008060008060008060008060008060006101608c8e03121561426857600080fd5b8b35614273816140f1565b9a5060208c0135614283816140f1565b995060408c0135985060608c0135975060808c0135965060a08c01356142a8816140f1565b955060c08c0135945060e08c01356142bf81614227565b93506142ce6101008d01614235565b92506101208c013591506101408c013590509295989b509295989b9093969950565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561432a5761432a6142f0565b60405290565b6040805190810167ffffffffffffffff8111828210171561432a5761432a6142f0565b604051601f8201601f1916810167ffffffffffffffff8111828210171561437c5761437c6142f0565b604052919050565b6001600160801b0381168114610fcf57600080fd5b80356134a481614384565b600061012082840312156143b757600080fd5b6143bf614306565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015261440b60e08401614399565b60e082015261010061441e818501614399565b908201529392505050565b60008060006060848603121561443e57600080fd5b833592506020840135614450816140f1565b91506040840135614460816140f1565b809150509250925092565b600060a08284031215613c9f57600080fd5b60008060008060006080868803121561449557600080fd5b85359450602086013567ffffffffffffffff8111156144b357600080fd5b6144bf8882890161416f565b90955093505060408601356144d3816140f1565b949793965091946060013592915050565b600080600080606085870312156144fa57600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561452057600080fd5b818701915087601f83011261453457600080fd5b81358181111561454357600080fd5b88602082850101111561455557600080fd5b95989497505060200194505050565b60008060006060848603121561457957600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a0312156145ab57600080fd5b87356145b6816140f1565b965060208801356145c6816140f1565b955060408801359450606088013593506080880135925060a08801356145eb816140f1565b8092505060c0880135905092959891949750929550565b6000806000806000806000806000806101408b8d03121561462257600080fd5b8a3561462d816140f1565b995060208b0135985060408b0135975060608b0135965060808b0135614652816140f1565b955060a08b0135945060c08b013561466981614227565b935061467760e08c01614235565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600080600080610100898b0312156146b557600080fd5b88356146c0816140f1565b975060208901356146d0816140f1565b965060408901359550606089013594506080890135935060a0890135925060c08901356146fc816140f1565b8092505060e089013590509295985092959890939650565b60208082526016908201527514db585c91195e149bdd5d195c8e881156141254915160521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561274357612743614744565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561479557600080fd5b8135613f6a816140f1565b6020808252601b908201527f536d6172446578526f757465723a20494e56414c49445f504154480000000000604082015260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60006020828403121561482a57600080fd5b8151613f6a816140f1565b6000806040838503121561484857600080fd5b505080516020909101519092909150565b60008060006060848603121561486e57600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561489a57600080fd5b82516148a581614384565b60208401519092506148b681614384565b809150509250929050565b60208082526026908201527f536d6172646578526f757465723a2043616c6c6261636b20496e76616c696420604082015265185b5bdd5b9d60d21b606082015260800190565b6000602080838503121561491a57600080fd5b823567ffffffffffffffff8082111561493257600080fd5b908401906040828703121561494657600080fd5b61494e614330565b82358281111561495d57600080fd5b8301601f8101881361496e57600080fd5b803583811115614980576149806142f0565b614992601f8201601f19168701614353565b935080845288868284010111156149a857600080fd5b80868301878601376000908401860152508181526149c7838501614106565b848201528094505050505092915050565b6000602082840312156149ea57600080fd5b8151613f6a81614227565b60208082526024908201527f536d6172446578526f757465723a20494e53554646494349454e545f415f414d60408201526313d5539560e21b606082015260800190565b60208082526024908201527f536d6172446578526f757465723a20494e53554646494349454e545f425f414d60408201526313d5539560e21b606082015260800190565b600060208284031215614a8f57600080fd5b5051919050565b60005b83811015614ab1578181015183820152602001614a99565b50506000910152565b60008251614acc818460208701614a96565b9190910192915050565b60208082526026908201527f536d61724465784c6962726172793a20494e53554646494349454e545f4c495160408201526555494449545960d01b606082015260800190565b808202811582820484141761274357612743614744565b634e487b7160e01b600052601260045260246000fd5b600082614b6657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561274357612743614744565b60008351614b90818460208801614a96565b835190830190614ba4818360208801614a96565b01949350505050565b60008151808452614bc5816020860160208601614a96565b601f01601f19169290920160200192915050565b602081526000825160406020840152614bf56060840182614bad565b602094909401516001600160a01b0316604093909301929092525090919050565b60018060a01b03851681528315156020820152826040820152608060608201526000614c456080830184614bad565b9695505050505050565b6000600160ff1b8201614c6457614c64614744565b5060000390565b6001600160801b038181168382160280821691908281146126fe576126fe61474456fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountADesired": "The amount of tokenA to add as liquidity if the B/A price is <= amountBDesired/amountADesired",
          "_amountAMin": "Bounds the extent to which the B/A price can go up before the transaction reverts. Must be <= amountADesired.",
          "_amountBDesired": "The amount of tokenB to add as liquidity if the A/B price is <= amountADesired/amountBDesired",
          "_amountBMin": "Bounds the extent to which the A/B price can go up before the transaction reverts. Must be <= amountBDesired.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_to": "Recipient of the liquidity tokens.",
          "_tokenA": "address of the first token in the pair",
          "_tokenB": "address of the second token in the pair"
        },
        "returns": {
          "amountA_": "The amount of tokenA sent to the pool.",
          "amountB_": "The amount of tokenB sent to the pool.",
          "liquidity_": "The amount of liquidity tokens minted."
        }
      },
      "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountETHMin": "Bounds the extent to which the token/WETH price can go up before the transaction reverts. Must be <= msg.value.",
          "_amountTokenDesired": "The amount of token to add as liquidity if the WETH/token price is <= msg.value/amountTokenDesired (token depreciates).",
          "_amountTokenMin": "Bounds the extent to which the WETH/token price can go up before the transaction reverts. Must be <= amountTokenDesired.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_to": "Recipient of the liquidity tokens.",
          "_token": "A pool token."
        },
        "returns": {
          "amountETH_": "The amount of ETH converted to WETH and sent to the pool.",
          "amountToken_": "The amount of token sent to the pool.",
          "liquidity_": "The amount of liquidity tokens minted."
        }
      },
      "getAmountIn((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))": {
        "params": {
          "_param": "all the parameters required to get amount from struct GetAmountParameters"
        },
        "returns": {
          "amountIn_": "The amount of token the user would spend to receive _amountOut",
          "newFictiveReserveIn_": "fictive reserve of the selling token after the swap",
          "newFictiveReserveOut_": "fictive reserve of the buying token after the swap",
          "newReserveIn_": "reserves of the selling token after the swap",
          "newReserveOut_": "reserves of the buying token after the swap"
        }
      },
      "getAmountInFromPair(uint256,address,address)": {
        "params": {
          "_amountOut": "quantity of token the user want to swap (to sell)",
          "_tokenIn": "address of the token the user want to sell",
          "_tokenOut": "address of the token the user want to buy"
        },
        "returns": {
          "amountIn_": "The amount of token the user would spend to receive _amountOut",
          "newFictiveReserveIn_": "fictive reserve of the selling token after the swap",
          "newFictiveReserveOut_": "fictive reserve of the buying token after the swap",
          "newReserveIn_": "reserves of the selling token after the swap",
          "newReserveOut_": "reserves of the buying token after the swap"
        }
      },
      "getAmountOut((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))": {
        "params": {
          "_param": "all the parameters required to get amount from struct GetAmountParameters"
        },
        "returns": {
          "amountOut_": "The amount of token the user would receive",
          "newFictiveReserveIn_": "fictive reserve of the selling token after the swap",
          "newFictiveReserveOut_": "fictive reserve of the buying token after the swap",
          "newReserveIn_": "reserves of the selling token after the swap",
          "newReserveOut_": "reserves of the buying token after the swap"
        }
      },
      "getAmountOutFromPair(uint256,address,address)": {
        "params": {
          "_amountIn": "quantity of token the user want to swap (to buy)",
          "_tokenIn": "address of the token the user want to sell",
          "_tokenOut": "address of the token the user want to buy"
        },
        "returns": {
          "amountOut_": "The amount of token the user would receive",
          "newFictiveReserveIn_": "fictive reserve of the selling token after the swap",
          "newFictiveReserveOut_": "fictive reserve of the buying token after the swap",
          "newReserveIn_": "reserves of the selling token after the swap",
          "newReserveOut_": "reserves of the buying token after the swap"
        }
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountAMin": "The minimum amount of tokenA that must be received for the transaction not to revert.",
          "_amountBMin": "The minimum amount of tokenB that must be received for the transaction not to revert.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_liquidity": "The amount of liquidity tokens to remove.",
          "_to": "Recipient of the liquidity tokens.",
          "_tokenA": "A pool token.",
          "_tokenB": "A pool token."
        },
        "returns": {
          "amountA_": "The amount of tokenA received.",
          "amountB_": "The amount of tokenB received."
        }
      },
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountETHMin": "The minimum amount of ETH that must be received for the transaction not to revert.",
          "_amountTokenMin": "The minimum amount of token that must be received for the transaction not to revert.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_liquidity": "The amount of liquidity tokens to remove.",
          "_to": "Recipient of the liquidity tokens.",
          "_token": "A pool token."
        },
        "returns": {
          "amountETH_": "The amount of ETH received.",
          "amountToken_": "The amount of token received."
        }
      },
      "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "params": {
          "_amountETHMin": "The minimum amount of ETH that must be received for the transaction not to revert.",
          "_amountTokenMin": "The minimum amount of token that must be received for the transaction not to revert.",
          "_approveMax": "Whether or not the approval amount in the signature is for liquidity or uint(-1).",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_liquidity": "The amount of liquidity tokens to remove.",
          "_r": "The r component of the permit signature.",
          "_s": "The s component of the permit signature.",
          "_to": "Recipient of the liquidity tokens.",
          "_token": "A pool token.",
          "_v": "The v component of the permit signature."
        },
        "returns": {
          "amountETH_": "The amount of ETH received.",
          "amountToken_": "The amount of token received."
        }
      },
      "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "params": {
          "_amountAMin": "The minimum amount of tokenA that must be received for the transaction not to revert.",
          "_amountBMin": "The minimum amount of tokenB that must be received for the transaction not to revert.",
          "_approveMax": "Whether or not the approval amount in the signature is for liquidity or uint(-1).",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_liquidity": "The amount of liquidity tokens to remove.",
          "_r": "The r component of the permit signature.",
          "_s": "The s component of the permit signature.",
          "_to": "Recipient of the liquidity tokens.",
          "_tokenA": "A pool token.",
          "_tokenB": "A pool token.",
          "_v": "The v component of the permit signature."
        },
        "returns": {
          "amountA_": "The amount of tokenA received.",
          "amountB_": "The amount of tokenB received."
        }
      },
      "smardexMintCallback((address,address,uint256,uint256,address))": {
        "params": {
          "_data": "callback data for mint"
        }
      },
      "smardexSwapCallback(int256,int256,bytes)": {
        "params": {
          "_amount0Delta": "amount of token0 for the swap (negative is incoming, positive is required to pay to pair)",
          "_amount1Delta": "amount of token1 for the swap (negative is incoming, positive is required to pay to pair)",
          "_data": "for Router path and payer for the swap (see router for details)"
        }
      },
      "swapETHForExactTokens(uint256,address[],address,uint256)": {
        "params": {
          "_amountOut": "The amount of tokens to receive.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of output tokens."
        },
        "returns": {
          "amountIn_": "The input token amount."
        }
      },
      "swapExactETHForTokens(uint256,address[],address,uint256)": {
        "params": {
          "_amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of the output tokens."
        },
        "returns": {
          "amountOut_": "The input token amount."
        }
      },
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountIn": "The amount of input tokens to send.",
          "_amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of ETH."
        },
        "returns": {
          "amountOut_": "The input token amount."
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountIn": "The amount of input tokens to send.",
          "_amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of the output tokens."
        },
        "returns": {
          "amountOut_": "The output token amount."
        }
      },
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountInMax": "The maximum amount of input tokens that can be required before the transaction reverts.",
          "_amountOut": "The amount of ETH to receive.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of ETH."
        },
        "returns": {
          "amountIn_": "The input token amount."
        }
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountInMax": "The maximum amount of input tokens that can be required before the transaction reverts.",
          "_amountOut": "The amount of output tokens to receive.",
          "_deadline": "Unix timestamp after which the transaction will revert.",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "_to": "Recipient of the output tokens."
        },
        "returns": {
          "amountIn_": "The input token amount."
        }
      }
    },
    "stateVariables": {
      "DEFAULT_AMOUNT_IN_CACHED": {
        "details": "Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value"
      },
      "WETH": {
        "return": "address of the WETH token (Wrapped Ether)",
        "returns": {
          "_0": "address of the WETH token (Wrapped Ether)"
        }
      },
      "amountInCached": {
        "details": "Transient storage variable used for returning the computed amount in for an exact output swap."
      },
      "factory": {
        "return": "address of the factory",
        "returns": {
          "_0": "address of the factory"
        }
      }
    },
    "title": "SmardexRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "get WETH address"
      },
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool"
      },
      "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Adds liquidity to an ERC-20=WETH pool with ETH. msg.value is the amount of ETH to add as liquidity. if the token/WETH price is <= amountTokenDesired/msg.value (WETH depreciates)."
      },
      "factory()": {
        "notice": "get the factory address"
      },
      "getAmountIn((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))": {
        "notice": "return the amount of tokens the user should spend by doing a swap"
      },
      "getAmountInFromPair(uint256,address,address)": {
        "notice": "return the amount of tokens the user should spend by doing a swap by directly              fetching data from the pair tokenIn/tokenOut"
      },
      "getAmountOut((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint128,uint128))": {
        "notice": "return the amount of tokens the user would get by doing a swap"
      },
      "getAmountOutFromPair(uint256,address,address)": {
        "notice": "return the amount of tokens the user should spend by doing a swap by directly              fetching data from the pair tokenIn/tokenOut"
      },
      "quote(uint256,uint256,uint256)": {
        "notice": "Given some asset amount and reserves, returns an amount of the other asset representing equivalent value."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from an ERC-20=ERC-20 pool."
      },
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from an ERC-20=WETH pool and receive ETH."
      },
      "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "notice": "Removes liquidity from an ERC-20=WETH pool and receive ETH without pre-approval"
      },
      "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": {
        "notice": "Removes liquidity from an ERC-20=WETH pool and receive ETH."
      },
      "smardexMintCallback((address,address,uint256,uint256,address))": {
        "notice": "callback to implement when calling SmardexPair.mint"
      },
      "smardexSwapCallback(int256,int256,bytes)": {
        "notice": "callback data for swap"
      },
      "swapETHForExactTokens(uint256,address[],address,uint256)": {
        "notice": "Receive an exact amount of tokens for as little ETH as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist). msg.value The maximum amount of ETH that can be required before the transaction reverts."
      },
      "swapExactETHForTokens(uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": {
        "notice": "Receive an exact amount of ETH for as few input tokens as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Receive an exact amount of output tokens for as few input tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate tokens to trade through (if, for example, a direct pair does not exist)."
      }
    },
    "notice": "Router for execution of swaps and liquidity management on SmardexPair",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9700,
        "contract": "contracts/periphery/SmardexRouter.sol:SmardexRouter",
        "label": "amountInCached",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}