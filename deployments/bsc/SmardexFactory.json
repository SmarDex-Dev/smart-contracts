{
  "address": "0xA8EF6FEa013034E62E2C4A9Ec1CDb059fE23Af33",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeTo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "FeeToUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "feesLP",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "feesPool",
          "type": "uint256"
        }
      ],
      "name": "FeesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPair",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultFees",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "feesLP_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "feesPool_",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_feesLP",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_feesPool",
          "type": "uint128"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x567866dc58996931cefb9e49b270656ad151bdb0c8c9ca23f27e2ce71f18d4ad",
  "receipt": {
    "to": null,
    "from": "0x45C75bd8Bb9CF5263539b914925EabBF0441Eb14",
    "contractAddress": "0xA8EF6FEa013034E62E2C4A9Ec1CDb059fE23Af33",
    "transactionIndex": 18,
    "gasUsed": "5060890",
    "logsBloom": "0x
    "blockHash": "0x78a4a0e0f6bf5a915dea6b98e36bdd063f908b7d9b677c60c58e376867ede1f8",
    "transactionHash": "0x567866dc58996931cefb9e49b270656ad151bdb0c8c9ca23f27e2ce71f18d4ad",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 30036610,
        "transactionHash": "0x567866dc58996931cefb9e49b270656ad151bdb0c8c9ca23f27e2ce71f18d4ad",
        "address": "0xA8EF6FEa013034E62E2C4A9Ec1CDb059fE23Af33",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000045c75bd8bb9cf5263539b914925eabbf0441eb14"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x78a4a0e0f6bf5a915dea6b98e36bdd063f908b7d9b677c60c58e376867ede1f8"
      }
    ],
    "blockNumber": 30036610,
    "cumulativeGasUsed": "6067382",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a3e5ed825e3a0bcaf935206aae1ecd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeToUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feesLP\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feesPool\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPair\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"feesLP_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feesPool_\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_feesLP\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_feesPool\",\"type\":\"uint128\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allPairsLength()\":{\"returns\":{\"_0\":\"quantity in uint256\"}},\"createPair(address,address)\":{\"params\":{\"_tokenA\":\"address of tokenA\",\"_tokenB\":\"address of tokenB\"},\"returns\":{\"pair_\":\"address of the pair created\"}},\"getDefaultFees()\":{\"returns\":{\"feesLP_\":\"numerator of fees sent to LP at pair creation\",\"feesPool_\":\"numerator of fees sent to Pool at pair creation\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeTo(address)\":{\"params\":{\"_feeTo\":\"address to replace\"}},\"setFees(uint128,uint128)\":{\"params\":{\"_feesLP\":\"new numerator of fees sent to LP, must be >= 1\",\"_feesPool\":\"new numerator of fees sent to Pool, could be = 0\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"allPairs\":{\"params\":{\"_index\":\"index of the pair\"},\"return\":\"address of the pair\",\"returns\":{\"_0\":\"address of the pair\"}}},\"title\":\"SmardexFactory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeToUpdated(address,address)\":{\"notice\":\"emitted when the feeTo is updated\"},\"FeesChanged(uint256,uint256)\":{\"notice\":\"emitted each time feesLP and feesPool are changed\"},\"PairCreated(address,address,address,uint256)\":{\"notice\":\"emitted at each SmardexPair created\"}},\"kind\":\"user\",\"methods\":{\"allPairs(uint256)\":{\"notice\":\"return the address of the pair at index\"},\"allPairsLength()\":{\"notice\":\"return the quantity of pairs\"},\"createPair(address,address)\":{\"notice\":\"create pair with 2 address\"},\"feeTo()\":{\"notice\":\"return which address fees will be transferred\"},\"getDefaultFees()\":{\"notice\":\"return numerators of pair fees, denominator is 1_000_000\"},\"getPair(address,address)\":{\"notice\":\"return the address of the pair of 2 tokens\"},\"setFeeTo(address)\":{\"notice\":\"set the address who will receive fees, can only be call by the owner\"},\"setFees(uint128,uint128)\":{\"notice\":\"set feesLP and feesPool for each new pair (onlyOwner)sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE\"}},\"notice\":\"facilitates creation of SmardexPair to swap tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SmardexFactory.sol\":\"SmardexFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x36c00327e3f9afd929cc2721aaa111ab57eff78a630cc364b279ad576b899295\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/SmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"./SmardexPair.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/ISmardexFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmardexFactory\\r\\n * @notice facilitates creation of SmardexPair to swap tokens.\\r\\n */\\r\\ncontract SmardexFactory is Ownable, ISmardexFactory {\\r\\n    address public feeTo;\\r\\n    uint128 internal feesLP = 700; // MIN 1\\r\\n    uint128 internal feesPool = 300;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public getPair;\\r\\n    address[] public allPairs;\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function allPairsLength() external view returns (uint256) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function getDefaultFees() external view returns (uint128 feesLP_, uint128 feesPool_) {\\r\\n        feesLP_ = feesLP;\\r\\n        feesPool_ = feesPool;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_) {\\r\\n        require(_tokenA != _tokenB, \\\"SmarDex: IDENTICAL_ADDRESSES\\\");\\r\\n        (address _token0, address _token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\r\\n        require(_token0 != address(0), \\\"SmarDex: ZERO_ADDRESS\\\");\\r\\n        require(getPair[_token0][_token1] == address(0), \\\"SmarDex: PAIR_EXISTS\\\"); // single check is sufficient\\r\\n        bytes32 _salt = keccak256(abi.encodePacked(_token0, _token1));\\r\\n        SmardexPair _pair = new SmardexPair{ salt: _salt }();\\r\\n        _pair.initialize(_token0, _token1, feesLP, feesPool);\\r\\n        pair_ = address(_pair);\\r\\n        getPair[_token0][_token1] = pair_;\\r\\n        getPair[_token1][_token0] = pair_; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair_);\\r\\n\\r\\n        emit PairCreated(_token0, _token1, pair_, allPairs.length);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function setFeeTo(address _feeTo) external onlyOwner {\\r\\n        address _previousFeeTo = feeTo;\\r\\n        feeTo = _feeTo;\\r\\n\\r\\n        emit FeeToUpdated(_previousFeeTo, _feeTo);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexFactory\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external onlyOwner {\\r\\n        require(_feesLP != 0, \\\"SmarDex: ZERO_FEES_LP\\\");\\r\\n        require(_feesLP + _feesPool <= SmardexLibrary.FEES_MAX, \\\"SmarDex: FEES_MAX\\\");\\r\\n        feesLP = _feesLP;\\r\\n        feesPool = _feesPool;\\r\\n\\r\\n        emit FeesChanged(_feesLP, _feesPool);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcdeea6c2514b004125b4edce7a817d811ac3bd427b1a6c7e332d724b5bee59f7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/SmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"./libraries/SmardexLibrary.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/ISmardexPair.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexOwnableFactory.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexSwapCallback.sol\\\";\\r\\nimport \\\"./interfaces/ISmardexMintCallback.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmardexPair\\r\\n * @notice Pair contract that allows user to swap 2 ERC20-strict tokens in a decentralised and automated way\\r\\n */\\r\\ncontract SmardexPair is ISmardexPair, ERC20Permit {\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    uint8 private constant CONTRACT_UNLOCKED = 1;\\r\\n    uint8 private constant CONTRACT_LOCKED = 2;\\r\\n    uint256 private constant MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n    bytes4 private constant AUTOSWAP_SELECTOR = bytes4(keccak256(bytes(\\\"executeWork(address,address)\\\")));\\r\\n\\r\\n    address public immutable factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    // smardex pair fees numerators, denominator is 1_000_000\\r\\n    uint128 internal feesLP = 1; // numerator of fees sent to lp, min 1,\\r\\n    uint128 internal feesPool; // numerator of fees sent to pool\\r\\n\\r\\n    // smardex new fictive reserves\\r\\n    uint128 internal fictiveReserve0;\\r\\n    uint128 internal fictiveReserve1; // accessible via getFictiveReserves()\\r\\n\\r\\n    // moving average on the price\\r\\n    uint128 internal priceAverage0;\\r\\n    uint128 internal priceAverage1;\\r\\n    uint40 internal priceAverageLastTimestamp; // accessible via getPriceAverage()\\r\\n\\r\\n    // fee for FEE_POOL\\r\\n    uint104 internal feeToAmount0;\\r\\n    uint104 internal feeToAmount1; // accessible via getFeeToAmounts()\\r\\n\\r\\n    // reentrancy\\r\\n    uint8 private lockStatus = CONTRACT_UNLOCKED;\\r\\n\\r\\n    modifier lock() {\\r\\n        require(lockStatus == CONTRACT_UNLOCKED, \\\"SmarDex: LOCKED\\\");\\r\\n        lockStatus = CONTRACT_LOCKED;\\r\\n        _;\\r\\n        lockStatus = CONTRACT_UNLOCKED;\\r\\n    }\\r\\n\\r\\n    modifier onlyFactoryOwner() {\\r\\n        require(msg.sender == ISmardexOwnableFactory(factory).owner(), \\\"SmarDex: NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC20(\\\"SmarDex LP-Token\\\", \\\"SDEX-LP\\\") ERC20Permit(\\\"SmarDex LP-Token\\\") {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function initialize(address _token0, address _token1, uint128 _feesLP, uint128 _feesPool) external override {\\r\\n        require(msg.sender == factory, \\\"SmarDex: FORBIDDEN\\\"); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n        _setFees(_feesLP, _feesPool);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getReserves() external view override returns (uint256 reserve0_, uint256 reserve1_) {\\r\\n        reserve0_ = IERC20(token0).balanceOf(address(this)) - feeToAmount0;\\r\\n        reserve1_ = IERC20(token1).balanceOf(address(this)) - feeToAmount1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getFictiveReserves() external view override returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_) {\\r\\n        fictiveReserve0_ = fictiveReserve0;\\r\\n        fictiveReserve1_ = fictiveReserve1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getFeeToAmounts() external view override returns (uint256 fees0_, uint256 fees1_) {\\r\\n        fees0_ = feeToAmount0;\\r\\n        fees1_ = feeToAmount1;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getPairFees() external view override returns (uint128 feesLP_, uint128 feesPool_) {\\r\\n        feesLP_ = feesLP;\\r\\n        feesPool_ = feesPool;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 priceAverageLastTimestamp_)\\r\\n    {\\r\\n        priceAverage0_ = priceAverage0;\\r\\n        priceAverage1_ = priceAverage1;\\r\\n        priceAverageLastTimestamp_ = priceAverageLastTimestamp;\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) public pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_) {\\r\\n        (priceAverageIn_, priceAverageOut_) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n            _fictiveReserveIn,\\r\\n            _fictiveReserveOut,\\r\\n            _priceAverageLastTimestamp,\\r\\n            _priceAverageIn,\\r\\n            _priceAverageOut,\\r\\n            _currentTimestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external override returns (uint256 liquidity_) {\\r\\n        liquidity_ = _mintBeforeFee(_to, _amount0, _amount1, _payer);\\r\\n\\r\\n        // we call feeTo out of the internal locked mint (_mintExt) function to be able to swap fees in here\\r\\n        _feeToSwap();\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function burn(address _to) external override returns (uint256 amount0_, uint256 amount1_) {\\r\\n        (amount0_, amount1_) = _burnBeforeFee(_to);\\r\\n\\r\\n        // we call feeTo out of the internal locked burn (_burnExt) function to be able to swap fees in here\\r\\n        _feeToSwap();\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external override lock returns (int256 amount0_, int256 amount1_) {\\r\\n        require(_amountSpecified != 0, \\\"SmarDex: ZERO_AMOUNT\\\");\\r\\n\\r\\n        ISmardexPair.SwapParams memory _params = SwapParams({\\r\\n            amountCalculated: 0,\\r\\n            fictiveReserveIn: 0,\\r\\n            fictiveReserveOut: 0,\\r\\n            priceAverageIn: 0,\\r\\n            priceAverageOut: 0,\\r\\n            token0: token0,\\r\\n            token1: token1,\\r\\n            balanceIn: 0,\\r\\n            balanceOut: 0\\r\\n        });\\r\\n\\r\\n        require(_to != _params.token0 && _to != _params.token1, \\\"SmarDex: INVALID_TO\\\");\\r\\n        (\\r\\n            _params.balanceIn,\\r\\n            _params.balanceOut,\\r\\n            _params.fictiveReserveIn,\\r\\n            _params.fictiveReserveOut,\\r\\n            _params.priceAverageIn,\\r\\n            _params.priceAverageOut\\r\\n        ) = _zeroForOne\\r\\n            ? (\\r\\n                IERC20(_params.token0).balanceOf(address(this)) - feeToAmount0,\\r\\n                IERC20(_params.token1).balanceOf(address(this)) - feeToAmount1,\\r\\n                fictiveReserve0,\\r\\n                fictiveReserve1,\\r\\n                priceAverage0,\\r\\n                priceAverage1\\r\\n            )\\r\\n            : (\\r\\n                IERC20(_params.token1).balanceOf(address(this)) - feeToAmount1,\\r\\n                IERC20(_params.token0).balanceOf(address(this)) - feeToAmount0,\\r\\n                fictiveReserve1,\\r\\n                fictiveReserve0,\\r\\n                priceAverage1,\\r\\n                priceAverage0\\r\\n            );\\r\\n\\r\\n        // compute new price average\\r\\n        (_params.priceAverageIn, _params.priceAverageOut) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n            _params.fictiveReserveIn,\\r\\n            _params.fictiveReserveOut,\\r\\n            priceAverageLastTimestamp,\\r\\n            _params.priceAverageIn,\\r\\n            _params.priceAverageOut,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // SSTORE new price average\\r\\n        (priceAverage0, priceAverage1, priceAverageLastTimestamp) = _zeroForOne\\r\\n            ? (_params.priceAverageIn.toUint128(), _params.priceAverageOut.toUint128(), uint40(block.timestamp))\\r\\n            : (_params.priceAverageOut.toUint128(), _params.priceAverageIn.toUint128(), uint40(block.timestamp));\\r\\n\\r\\n        uint128 _feesPool = feesPool; // caching feesPool to save gas\\r\\n\\r\\n        if (_amountSpecified > 0) {\\r\\n            uint256 _temp;\\r\\n            (_temp, , , _params.fictiveReserveIn, _params.fictiveReserveOut) = SmardexLibrary.getAmountOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _amountSpecified.toUint256(),\\r\\n                    reserveIn: _params.balanceIn,\\r\\n                    reserveOut: _params.balanceOut,\\r\\n                    fictiveReserveIn: _params.fictiveReserveIn,\\r\\n                    fictiveReserveOut: _params.fictiveReserveOut,\\r\\n                    priceAverageIn: _params.priceAverageIn,\\r\\n                    priceAverageOut: _params.priceAverageOut,\\r\\n                    feesLP: feesLP,\\r\\n                    feesPool: _feesPool\\r\\n                })\\r\\n            );\\r\\n            _params.amountCalculated = _temp.toInt256();\\r\\n        } else {\\r\\n            uint256 _temp;\\r\\n            (_temp, , , _params.fictiveReserveIn, _params.fictiveReserveOut) = SmardexLibrary.getAmountIn(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: (-_amountSpecified).toUint256(),\\r\\n                    reserveIn: _params.balanceIn,\\r\\n                    reserveOut: _params.balanceOut,\\r\\n                    fictiveReserveIn: _params.fictiveReserveIn,\\r\\n                    fictiveReserveOut: _params.fictiveReserveOut,\\r\\n                    priceAverageIn: _params.priceAverageIn,\\r\\n                    priceAverageOut: _params.priceAverageOut,\\r\\n                    feesLP: feesLP,\\r\\n                    feesPool: _feesPool\\r\\n                })\\r\\n            );\\r\\n            _params.amountCalculated = _temp.toInt256();\\r\\n        }\\r\\n\\r\\n        (amount0_, amount1_) = _zeroForOne\\r\\n            ? (\\r\\n                _amountSpecified > 0\\r\\n                    ? (_amountSpecified, -_params.amountCalculated)\\r\\n                    : (_params.amountCalculated, _amountSpecified)\\r\\n            )\\r\\n            : (\\r\\n                _amountSpecified > 0\\r\\n                    ? (-_params.amountCalculated, _amountSpecified)\\r\\n                    : (_amountSpecified, _params.amountCalculated)\\r\\n            );\\r\\n\\r\\n        if (_zeroForOne) {\\r\\n            if (amount1_ < 0) {\\r\\n                TransferHelper.safeTransfer(_params.token1, _to, uint256(-amount1_));\\r\\n            }\\r\\n            ISmardexSwapCallback(msg.sender).smardexSwapCallback(amount0_, amount1_, _data);\\r\\n            uint256 _balanceInBefore = _params.balanceIn;\\r\\n            _params.balanceIn = IERC20(token0).balanceOf(address(this));\\r\\n            require(\\r\\n                _balanceInBefore + feeToAmount0 + (amount0_).toUint256() <= _params.balanceIn,\\r\\n                \\\"SmarDex: INSUFFICIENT_TOKEN0_INPUT_AMOUNT\\\"\\r\\n            );\\r\\n            _params.balanceOut = IERC20(token1).balanceOf(address(this));\\r\\n        } else {\\r\\n            if (amount0_ < 0) {\\r\\n                TransferHelper.safeTransfer(_params.token0, _to, uint256(-amount0_));\\r\\n            }\\r\\n            ISmardexSwapCallback(msg.sender).smardexSwapCallback(amount0_, amount1_, _data);\\r\\n            uint256 _balanceInBefore = _params.balanceIn;\\r\\n            _params.balanceIn = IERC20(token1).balanceOf(address(this));\\r\\n            require(\\r\\n                _balanceInBefore + feeToAmount1 + (amount1_).toUint256() <= _params.balanceIn,\\r\\n                \\\"SmarDex: INSUFFICIENT_TOKEN1_INPUT_AMOUNT\\\"\\r\\n            );\\r\\n            _params.balanceOut = IERC20(token0).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        // update feeTopart\\r\\n        bool _feeOn = ISmardexOwnableFactory(factory).feeTo() != address(0);\\r\\n        if (_zeroForOne) {\\r\\n            if (_feeOn) {\\r\\n                feeToAmount0 += ((uint256(amount0_) * _feesPool) / SmardexLibrary.FEES_BASE).toUint104();\\r\\n            }\\r\\n            _update(\\r\\n                _params.balanceIn,\\r\\n                _params.balanceOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.priceAverageIn,\\r\\n                _params.priceAverageOut\\r\\n            );\\r\\n        } else {\\r\\n            if (_feeOn) {\\r\\n                feeToAmount1 += ((uint256(amount1_) * _feesPool) / SmardexLibrary.FEES_BASE).toUint104();\\r\\n            }\\r\\n            _update(\\r\\n                _params.balanceOut,\\r\\n                _params.balanceIn,\\r\\n                _params.fictiveReserveOut,\\r\\n                _params.fictiveReserveIn,\\r\\n                _params.priceAverageOut,\\r\\n                _params.priceAverageIn\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Swap(msg.sender, _to, amount0_, amount1_);\\r\\n    }\\r\\n\\r\\n    ///@inheritdoc ISmardexPair\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external onlyFactoryOwner {\\r\\n        _setFees(_feesLP, _feesPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool of the pair\\r\\n     * @notice sum of new feesLp and feesPool must be <= 100_000\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function _setFees(uint128 _feesLP, uint128 _feesPool) internal {\\r\\n        require(_feesLP != 0, \\\"SmarDex: ZERO_FEES_LP\\\");\\r\\n        require(_feesLP + _feesPool <= SmardexLibrary.FEES_MAX, \\\"SmarDex: FEES_MAX\\\");\\r\\n        feesLP = _feesLP;\\r\\n        feesPool = _feesPool;\\r\\n\\r\\n        emit FeesChanged(_feesLP, _feesPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update fictive reserves and emit the Sync event\\r\\n     * @param _balance0 the new balance of token0\\r\\n     * @param _balance1 the new balance of token1\\r\\n     * @param _fictiveReserve0 the new fictive reserves of token0\\r\\n     * @param _fictiveReserve1 the new fictive reserves of token1\\r\\n     * @param _priceAverage0 the new priceAverage of token0\\r\\n     * @param _priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    function _update(\\r\\n        uint256 _balance0,\\r\\n        uint256 _balance1,\\r\\n        uint256 _fictiveReserve0,\\r\\n        uint256 _fictiveReserve1,\\r\\n        uint256 _priceAverage0,\\r\\n        uint256 _priceAverage1\\r\\n    ) private {\\r\\n        require(_fictiveReserve0 != 0 && _fictiveReserve1 != 0, \\\"SmarDex: FICTIVE_RESERVES_TOO_LOW\\\");\\r\\n        require(_fictiveReserve0 <= type(uint128).max && _fictiveReserve1 <= type(uint128).max, \\\"SmarDex: OVERFLOW\\\");\\r\\n        fictiveReserve0 = uint128(_fictiveReserve0);\\r\\n        fictiveReserve1 = uint128(_fictiveReserve1);\\r\\n\\r\\n        emit Sync(\\r\\n            _balance0 - feeToAmount0,\\r\\n            _balance1 - feeToAmount1,\\r\\n            _fictiveReserve0,\\r\\n            _fictiveReserve1,\\r\\n            _priceAverage0,\\r\\n            _priceAverage1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfers feeToAmount of tokens 0 and 1 to feeTo, and reset feeToAmounts\\r\\n     * @return feeOn_ if part of the fees goes to feeTo\\r\\n     */\\r\\n    function _sendFee() private returns (bool feeOn_) {\\r\\n        address _feeTo = ISmardexFactory(factory).feeTo();\\r\\n        feeOn_ = _feeTo != address(0);\\r\\n        if (feeOn_) {\\r\\n            // gas saving\\r\\n            uint256 _feeToAmount0 = feeToAmount0;\\r\\n            uint256 _feeToAmount1 = feeToAmount1;\\r\\n\\r\\n            if (_feeToAmount0 != 0) {\\r\\n                TransferHelper.safeTransfer(token0, _feeTo, _feeToAmount0);\\r\\n                feeToAmount0 = 0;\\r\\n            }\\r\\n            if (_feeToAmount1 != 0) {\\r\\n                TransferHelper.safeTransfer(token1, _feeTo, _feeToAmount1);\\r\\n                feeToAmount1 = 0;\\r\\n            }\\r\\n        } else {\\r\\n            feeToAmount0 = 0;\\r\\n            feeToAmount1 = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance.\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @param _payer address of the payer to provide token for the mint\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function _mintBeforeFee(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) internal lock returns (uint256 liquidity_) {\\r\\n        _sendFee();\\r\\n\\r\\n        uint256 _fictiveReserve0;\\r\\n        uint256 _fictiveReserve1;\\r\\n\\r\\n        // gas saving\\r\\n        uint256 _balance0 = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 _balance1 = IERC20(token1).balanceOf(address(this));\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n\\r\\n        ISmardexMintCallback(msg.sender).smardexMintCallback(\\r\\n            ISmardexMintCallback.MintCallbackData({\\r\\n                token0: token0,\\r\\n                token1: token1,\\r\\n                amount0: _amount0,\\r\\n                amount1: _amount1,\\r\\n                payer: _payer\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // gas savings\\r\\n        uint256 _balance0after = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 _balance1after = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        require(_balance0after >= _balance0 + _amount0, \\\"SmarDex: INSUFFICIENT_AMOUNT_0\\\");\\r\\n        require(_balance1after >= _balance1 + _amount1, \\\"SmarDex: INSUFFICIENT_AMOUNT_1\\\");\\r\\n\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity_ = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\r\\n            _mint(address(0xdead), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n            _fictiveReserve0 = _balance0after / 2;\\r\\n            _fictiveReserve1 = _balance1after / 2;\\r\\n        } else {\\r\\n            liquidity_ = Math.min((_amount0 * _totalSupply) / _balance0, (_amount1 * _totalSupply) / _balance1);\\r\\n\\r\\n            // update proportionally the fictiveReserves\\r\\n            _fictiveReserve0 = (fictiveReserve0 * (_totalSupply + liquidity_)) / _totalSupply;\\r\\n            _fictiveReserve1 = (fictiveReserve1 * (_totalSupply + liquidity_)) / _totalSupply;\\r\\n        }\\r\\n\\r\\n        require(liquidity_ != 0, \\\"SmarDex: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\r\\n        _mint(_to, liquidity_);\\r\\n\\r\\n        _update(_balance0after, _balance1after, _fictiveReserve0, _fictiveReserve1, priceAverage0, priceAverage1);\\r\\n\\r\\n        emit Mint(msg.sender, _to, _amount0, _amount1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned.\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function _burnBeforeFee(address _to) internal lock returns (uint256 amount0_, uint256 amount1_) {\\r\\n        _sendFee();\\r\\n\\r\\n        // gas savings\\r\\n        address _token0 = token0;\\r\\n        address _token1 = token1;\\r\\n        uint256 _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        uint256 _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n        uint256 _liquidity = balanceOf(address(this));\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n\\r\\n        // pro-rata distribution\\r\\n        amount0_ = (_liquidity * _balance0) / _totalSupply;\\r\\n        amount1_ = (_liquidity * _balance1) / _totalSupply;\\r\\n        require(amount0_ != 0 && amount1_ != 0, \\\"SmarDex: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\r\\n\\r\\n        // update proportionally the fictiveReserves\\r\\n        uint256 _fictiveReserve0 = fictiveReserve0;\\r\\n        uint256 _fictiveReserve1 = fictiveReserve1;\\r\\n        _fictiveReserve0 -= (_fictiveReserve0 * _liquidity) / _totalSupply;\\r\\n        _fictiveReserve1 -= (_fictiveReserve1 * _liquidity) / _totalSupply;\\r\\n\\r\\n        _burn(address(this), _liquidity);\\r\\n        TransferHelper.safeTransfer(_token0, _to, amount0_);\\r\\n        TransferHelper.safeTransfer(_token1, _to, amount1_);\\r\\n\\r\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\r\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(_balance0, _balance1, _fictiveReserve0, _fictiveReserve1, priceAverage0, priceAverage1);\\r\\n\\r\\n        emit Burn(msg.sender, _to, amount0_, amount1_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice execute function \\\"executeWork(address,address)\\\" of the feeTo contract. Doesn't revert tx if it reverts\\r\\n     */\\r\\n    function _feeToSwap() internal {\\r\\n        address _feeTo = ISmardexOwnableFactory(factory).feeTo();\\r\\n\\r\\n        // call contract destination for handling fees\\r\\n        // We don't handle return values so it does not revert for LP if something went wrong in feeTo\\r\\n        // Will swap fees to SDEX and send them. We want this to not revert if the swap failed\\r\\n        // but to revert if not enough gas\\r\\n        _feeTo.call(abi.encodeWithSelector(AUTOSWAP_SELECTOR, token0, token1));\\r\\n\\r\\n        // After the _feeTo call, we check if gas is not equal to 0. Though seemingly redundant\\r\\n        // (as running out of gas would fail the transaction anyway), this require prevents the\\r\\n        // compiler from ignoring a simple gasleft() expression, which it may perceive as\\r\\n        // useless if not used elsewhere. The aim here is to consume some gas to ensure the\\r\\n        // transaction isn't out of gas at this point. This acts as a safeguard against potential\\r\\n        // exploitation where a low gasLimit prevents the _feeTo call from fully executing.\\r\\n        require(gasleft() != 0, \\\"\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd067b2dc737511d905e6ce9fa100fc3af98f9b7bc7a1724b04a9e41fdc54c41\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexFactory {\\r\\n    /**\\r\\n     * @notice emitted at each SmardexPair created\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param pair address of the SmardexPair created\\r\\n     * @param totalPair number of SmardexPair created so far\\r\\n     */\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 totalPair);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the feeTo is updated\\r\\n     * @param previousFeeTo the previous feeTo address\\r\\n     * @param newFeeTo the new feeTo address\\r\\n     */\\r\\n    event FeeToUpdated(address indexed previousFeeTo, address indexed newFeeTo);\\r\\n\\r\\n    /**\\r\\n     * @notice return which address fees will be transferred\\r\\n     */\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair of 2 tokens\\r\\n     */\\r\\n    function getPair(address _tokenA, address _tokenB) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair at index\\r\\n     * @param _index index of the pair\\r\\n     * @return pair_ address of the pair\\r\\n     */\\r\\n    function allPairs(uint256 _index) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the quantity of pairs\\r\\n     * @return quantity in uint256\\r\\n     */\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP at pair creation\\r\\n     * @return feesPool_ numerator of fees sent to Pool at pair creation\\r\\n     */\\r\\n    function getDefaultFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice create pair with 2 address\\r\\n     * @param _tokenA address of tokenA\\r\\n     * @param _tokenB address of tokenB\\r\\n     * @return pair_ address of the pair created\\r\\n     */\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice set the address who will receive fees, can only be call by the owner\\r\\n     * @param _feeTo address to replace\\r\\n     */\\r\\n    function setFeeTo(address _feeTo) external;\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool for each new pair (onlyOwner)\\r\\n     * @notice sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadffd220721bcff23b4bda9ac128c1e1dd70df26dd8abdb041df12012993da31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice callback data for mint\\r\\n     * @param token0 address of the first token of the pair\\r\\n     * @param token1 address of the second token of the pair\\r\\n     * @param amount0 amount of token0 to provide\\r\\n     * @param amount1 amount of token1 to provide\\r\\n     * @param payer address of the payer to provide token for the mint\\r\\n     */\\r\\n    struct MintCallbackData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback to implement when calling SmardexPair.mint\\r\\n     * @param _data callback data for mint\\r\\n     */\\r\\n    function smardexMintCallback(MintCallbackData calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x977073d28b3e0a3c25812d0ae9995d0f3dc90334f5e21bce53f34d570f2caf3b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexOwnableFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nimport \\\"./ISmardexFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice the real interface of SmardexFactory, including owner's functions.\\r\\n *         Needs to be separate due to a missing IOwner interface of OpenZeppelin\\r\\n */\\r\\ninterface ISmardexOwnableFactory is ISmardexFactory {\\r\\n    /**\\r\\n     * @notice emitted each ownership transfer\\r\\n     * @param previousOwner previous owner\\r\\n     * @param newOwner new owner\\r\\n     */\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     * @return address of the owner\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     * @param _newOwner : address of the new owner\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb70ab3a66e1d6ef9e2fd8fb77794bfecf709dbce5461486d842e1d896fd603e8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\n\\r\\ninterface ISmardexPair is IERC20, IERC20Permit {\\r\\n    /**\\r\\n     * @notice swap parameters used by function swap\\r\\n     * @param amountCalculated return amount from getAmountIn/Out is always positive but to avoid too much cast, is int\\r\\n     * @param fictiveReserveIn fictive reserve of the in-token of the pair\\r\\n     * @param fictiveReserveOut fictive reserve of the out-token of the pair\\r\\n     * @param priceAverageIn in-token ratio component of the price average\\r\\n     * @param priceAverageOut out-token ratio component of the price average\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param balanceIn contract balance of the in-token\\r\\n     * @param balanceOut contract balance of the out-token\\r\\n     */\\r\\n    struct SwapParams {\\r\\n        int256 amountCalculated;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 balanceIn;\\r\\n        uint256 balanceOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each mint\\r\\n     * @param sender address calling the mint function (usually the Router contract)\\r\\n     * @param to address that receives the LP-tokens\\r\\n     * @param amount0 amount of token0 to be added in liquidity\\r\\n     * @param amount1 amount of token1 to be added in liquidity\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each burn\\r\\n     * @param sender address calling the burn function (usually the Router contract)\\r\\n     * @param to address that receives the tokens\\r\\n     * @param amount0 amount of token0 to be withdrawn\\r\\n     * @param amount1 amount of token1 to be withdrawn\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each swap\\r\\n     * @param sender address calling the swap function (usually the Router contract)\\r\\n     * @param to address that receives the out-tokens\\r\\n     * @param amount0 amount of token0 to be swapped\\r\\n     * @param amount1 amount of token1 to be swapped\\r\\n     * @dev one of the 2 amount is always negative, the other one is always positive. The positive one is the one that\\r\\n     * the user send to the contract, the negative one is the one that the contract send to the user.\\r\\n     */\\r\\n    event Swap(address indexed sender, address indexed to, int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time the fictive reserves are changed (mint, burn, swap)\\r\\n     * @param reserve0 the new reserve of token0\\r\\n     * @param reserve1 the new reserve of token1\\r\\n     * @param fictiveReserve0 the new fictive reserve of token0\\r\\n     * @param fictiveReserve1 the new fictive reserve of token1\\r\\n     * @param priceAverage0 the new priceAverage of token0\\r\\n     * @param priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    event Sync(\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 fictiveReserve0,\\r\\n        uint256 fictiveReserve1,\\r\\n        uint256 priceAverage0,\\r\\n        uint256 priceAverage1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token0 address\\r\\n     * @return address of the token0\\r\\n     */\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token1 address\\r\\n     * @return address of the token1\\r\\n     */\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice called once by the factory at time of deployment\\r\\n     * @param _token0 address of token0\\r\\n     * @param _token1 address of token1\\r\\n     * @param _feesLP uint128 feesLP numerator\\r\\n     * @param _feesPool uint128 feesPool numerator\\r\\n     */\\r\\n    function initialize(address _token0, address _token1, uint128 _feesLP, uint128 _feesPool) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return current Reserves of both token in the pair,\\r\\n     *  corresponding to token balance - pending fees\\r\\n     * @return reserve0_ current reserve of token0 - pending fee0\\r\\n     * @return reserve1_ current reserve of token1 - pending fee1\\r\\n     */\\r\\n    function getReserves() external view returns (uint256 reserve0_, uint256 reserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current fictive reserves of both token in the pair\\r\\n     * @return fictiveReserve0_ current fictive reserve of token0\\r\\n     * @return fictiveReserve1_ current fictive reserve of token1\\r\\n     */\\r\\n    function getFictiveReserves() external view returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current pending fees of both token in the pair\\r\\n     * @return fees0_ current pending fees of token0\\r\\n     * @return fees1_ current pending fees of token1\\r\\n     */\\r\\n    function getFeeToAmounts() external view returns (uint256 fees0_, uint256 fees1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP\\r\\n     * @return feesPool_ numerator of fees sent to Pool\\r\\n     */\\r\\n    function getPairFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice return last updated price average at timestamp of both token in the pair,\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @return priceAverage0_ current price for token0\\r\\n     * @return priceAverage1_ current price for token1\\r\\n     * @return blockTimestampLast_ last block timestamp when price was updated\\r\\n     */\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 blockTimestampLast_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current price average of both token in the pair for provided currentTimeStamp\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @param _fictiveReserveIn,\\r\\n     * @param _fictiveReserveOut,\\r\\n     * @param _priceAverageLastTimestamp,\\r\\n     * @param _priceAverageIn current price for token0\\r\\n     * @param _priceAverageOut current price for token1\\r\\n     * @param _currentTimestamp block timestamp to get price\\r\\n     * @return priceAverageIn_ current price for token0\\r\\n     * @return priceAverageOut_ current price for token1\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) external pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance. Should be called from a contract\\r\\n     * that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external returns (uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned. Should be called from a contract that makes safety checks like the\\r\\n     * SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function burn(address _to) external returns (uint256 amount0_, uint256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps tokens. Sends to the defined address the amount of token0 and token1 defined in parameters.\\r\\n     * Tokens to trade should be already sent in the contract.\\r\\n     * Swap function will check if the resulted balance is correct with current reserves and reserves fictive.\\r\\n     * Should be called from a contract that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @param _zeroForOne token0 to token1\\r\\n     * @param _amountSpecified amount of token wanted\\r\\n     * @param _data used for flash swap, data.length must be 0 for regular swap\\r\\n     */\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external returns (int256 amount0_, int256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool of the pair\\r\\n     * @notice sum of new feesLp and feesPool must be <= 100_000\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe0ee503851666f03f283bf91c3ff399bfb3e610b75ed225974e9b25243ea9f75\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexSwapCallback {\\r\\n    /**\\r\\n     * @notice callback data for swap from SmardexRouter\\r\\n     * @param path path of the swap, array of token addresses tightly packed\\r\\n     * @param payer address of the payer for the swap\\r\\n     */\\r\\n    struct SwapCallbackData {\\r\\n        bytes path;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback data for swap\\r\\n     * @param _amount0Delta amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _amount1Delta amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _data for Router path and payer for the swap (see router for details)\\r\\n     */\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x19dee8a83b6c55ff9a4f62aac5ec820140ea09ed6db85511c7c20c6f87977e8e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/SmardexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\nlibrary SmardexLibrary {\\r\\n    /// @notice base of the FEES\\r\\n    uint256 public constant FEES_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice max fees of feesLP and feesPool sum, 10% FEES_BASE\\r\\n    uint256 public constant FEES_MAX = FEES_BASE / 10;\\r\\n\\r\\n    /// @notice precision for approxEq, not in percent but in APPROX_PRECISION_BASE\\r\\n    uint256 public constant APPROX_PRECISION = 1;\\r\\n\\r\\n    /// @notice base of the APPROX_PRECISION\\r\\n    uint256 public constant APPROX_PRECISION_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice number of seconds to reset priceAverage\\r\\n    uint256 private constant MAX_BLOCK_DIFF_SECONDS = 300;\\r\\n\\r\\n    /// @notice parameters of getAmountIn and getAmountOut\\r\\n    struct GetAmountParameters {\\r\\n        uint256 amount;\\r\\n        uint256 reserveIn;\\r\\n        uint256 reserveOut;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        uint128 feesLP;\\r\\n        uint128 feesPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 numbers are approximately equal, using APPROX_PRECISION\\r\\n     * @param _x number to compare\\r\\n     * @param _y number to compare\\r\\n     * @return true if numbers are approximately equal, false otherwise\\r\\n     */\\r\\n    function approxEq(uint256 _x, uint256 _y) internal pure returns (bool) {\\r\\n        if (_x > _y) {\\r\\n            return _x < (_y + (_y * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        } else {\\r\\n            return _y < (_x + (_x * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 ratio are approximately equal: _xNum _/ xDen ~= _yNum / _yDen\\r\\n     * @param _xNum numerator of the first ratio to compare\\r\\n     * @param _xDen denominator of the first ratio to compare\\r\\n     * @param _yNum numerator of the second ratio to compare\\r\\n     * @param _yDen denominator of the second ratio to compare\\r\\n     * @return true if ratio are approximately equal, false otherwise\\r\\n     */\\r\\n    function ratioApproxEq(uint256 _xNum, uint256 _xDen, uint256 _yNum, uint256 _yDen) internal pure returns (bool) {\\r\\n        return approxEq(_xNum * _yDen, _xDen * _yNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update priceAverage given old timestamp, new timestamp and prices\\r\\n     * @param _fictiveReserveIn ratio component of the new price of the in-token\\r\\n     * @param _fictiveReserveOut ratio component of the new price of the out-token\\r\\n     * @param _priceAverageLastTimestamp timestamp of the last priceAverage update (0, if never updated)\\r\\n     * @param _priceAverageIn ratio component of the last priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the last priceAverage of the out-token\\r\\n     * @param _currentTimestamp timestamp of the priceAverage to update\\r\\n     * @return newPriceAverageIn_ ratio component of the updated priceAverage of the in-token\\r\\n     * @return newPriceAverageOut_ ratio component of the updated priceAverage of the out-token\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) internal pure returns (uint256 newPriceAverageIn_, uint256 newPriceAverageOut_) {\\r\\n        require(_currentTimestamp >= _priceAverageLastTimestamp, \\\"SmardexPair: INVALID_TIMESTAMP\\\");\\r\\n\\r\\n        // very first time\\r\\n        if (_priceAverageLastTimestamp == 0) {\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ = _fictiveReserveOut;\\r\\n        }\\r\\n        // another tx has been done in the same timestamp\\r\\n        else if (_priceAverageLastTimestamp == _currentTimestamp) {\\r\\n            newPriceAverageIn_ = _priceAverageIn;\\r\\n            newPriceAverageOut_ = _priceAverageOut;\\r\\n        }\\r\\n        // need to compute new linear-average price\\r\\n        else {\\r\\n            // compute new price:\\r\\n            uint256 _timeDiff = Math.min(_currentTimestamp - _priceAverageLastTimestamp, MAX_BLOCK_DIFF_SECONDS);\\r\\n\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ =\\r\\n                (((MAX_BLOCK_DIFF_SECONDS - _timeDiff) * _priceAverageOut * newPriceAverageIn_) /\\r\\n                    _priceAverageIn +\\r\\n                    _timeDiff *\\r\\n                    _fictiveReserveOut) /\\r\\n                MAX_BLOCK_DIFF_SECONDS;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountIn so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountIn_ the first amount of in-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountIn\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountIn_ will be set to _amountIn\\r\\n     */\\r\\n    function computeFirstTradeQtyIn(GetAmountParameters memory _param) internal pure returns (uint256 firstAmountIn_) {\\r\\n        // default value\\r\\n        firstAmountIn_ = _param.amount;\\r\\n\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _toSub = _param.fictiveReserveIn * ((FEES_BASE * 2) - (_param.feesPool * 2) - _param.feesLP);\\r\\n            uint256 _toDiv = (FEES_BASE - _param.feesPool) * 2;\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveIn * _param.fictiveReserveOut) * 4) / _param.priceAverageOut) *\\r\\n                _param.priceAverageIn *\\r\\n                ((FEES_BASE - _param.feesPool - _param.feesLP) * (FEES_BASE - _param.feesPool)) +\\r\\n                ((_param.fictiveReserveIn * _param.fictiveReserveIn) * (_param.feesLP * _param.feesLP));\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toSub + _param.amount * _toDiv;\\r\\n            if (_inSqrt < _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountIn_ = (Math.sqrt(_inSqrt) - _toSub) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountOut so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountOut_ the first amount of out-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountOut\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountOut_ will be set to _amountOut\\r\\n     */\\r\\n    function computeFirstTradeQtyOut(\\r\\n        GetAmountParameters memory _param\\r\\n    ) internal pure returns (uint256 firstAmountOut_) {\\r\\n        // default value\\r\\n        firstAmountOut_ = _param.amount;\\r\\n        uint256 _reverseFeesTotal = FEES_BASE - _param.feesPool - _param.feesLP;\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _fictiveReserveOutPredFees = (_param.fictiveReserveIn * _param.feesLP * _param.priceAverageOut) /\\r\\n                _param.priceAverageIn;\\r\\n            uint256 _toAdd = ((_param.fictiveReserveOut * _reverseFeesTotal) * 2) + _fictiveReserveOutPredFees;\\r\\n            uint256 _toDiv = _reverseFeesTotal * 2;\\r\\n\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveOut * _fictiveReserveOutPredFees) * 4) *\\r\\n                (_reverseFeesTotal * (FEES_BASE - _param.feesPool))) /\\r\\n                _param.feesLP +\\r\\n                (_fictiveReserveOutPredFees * _fictiveReserveOutPredFees);\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toAdd - _param.amount * _toDiv;\\r\\n            if (_inSqrt > _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountOut_ = (_toAdd - Math.sqrt(_inSqrt)) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute fictive reserves\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token\\r\\n     */\\r\\n    function computeFictiveReserves(\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    ) internal pure returns (uint256 newFictiveReserveIn_, uint256 newFictiveReserveOut_) {\\r\\n        if (_reserveOut * _fictiveReserveIn < _reserveIn * _fictiveReserveOut) {\\r\\n            uint256 _temp = (((_reserveOut * _reserveOut) / _fictiveReserveOut) * _fictiveReserveIn) / _reserveIn;\\r\\n            newFictiveReserveIn_ =\\r\\n                (_temp * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut +\\r\\n                (_reserveOut * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut;\\r\\n            newFictiveReserveOut_ = _reserveOut + _temp;\\r\\n        } else {\\r\\n            newFictiveReserveIn_ = (_fictiveReserveIn * _reserveOut) / _fictiveReserveOut + _reserveIn;\\r\\n            newFictiveReserveOut_ = (_reserveIn * _fictiveReserveOut) / _fictiveReserveIn + _reserveOut;\\r\\n        }\\r\\n\\r\\n        // div all values by 4\\r\\n        newFictiveReserveIn_ /= 4;\\r\\n        newFictiveReserveOut_ /= 4;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountIn is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ qty of token that leaves in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _amountInWithFee = _param.amount * (FEES_BASE - _param.feesLP - _param.feesPool);\\r\\n        uint256 _numerator = _amountInWithFee * _param.fictiveReserveOut;\\r\\n        uint256 _denominator = _param.fictiveReserveIn * FEES_BASE + _amountInWithFee;\\r\\n        amountOut_ = _numerator / _denominator;\\r\\n\\r\\n        // update new reserves and add lp-fees to pools\\r\\n        uint256 _amountInWithFeeLp = (_amountInWithFee + (_param.amount * _param.feesLP)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - amountOut_;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - amountOut_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountOut is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ qty of token that arrives in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _numerator = _param.fictiveReserveIn * _param.amount * FEES_BASE;\\r\\n        uint256 _denominator = (_param.fictiveReserveOut - _param.amount) *\\r\\n            (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n        amountIn_ = _numerator / _denominator + 1;\\r\\n\\r\\n        // update new reserves\\r\\n        uint256 _amountInWithFeeLp = (amountIn_ * (FEES_BASE - _param.feesPool)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - _param.amount;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - _param.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _amountInWithFees = (_param.amount * (FEES_BASE - _param.feesPool - _param.feesLP)) / FEES_BASE;\\r\\n        uint256 _firstAmountIn = computeFirstTradeQtyIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _amountInWithFees,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountIn == _amountInWithFees &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // avoid stack too deep\\r\\n        {\\r\\n            uint256 _firstAmountInNoFees = (_firstAmountIn * FEES_BASE) / (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n            (\\r\\n                amountOut_,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _firstAmountInNoFees,\\r\\n                    reserveIn: _param.reserveIn,\\r\\n                    reserveOut: _param.reserveOut,\\r\\n                    fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                    fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n\\r\\n            // update amountIn in case there is a second trade\\r\\n            _param.amount -= _firstAmountInNoFees;\\r\\n        }\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountIn < _amountInWithFees) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountOutNoFees;\\r\\n            (\\r\\n                _secondAmountOutNoFees,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountOut_ += _secondAmountOutNoFees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.amount < _param.fictiveReserveOut &&\\r\\n                _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _firstAmountOut = computeFirstTradeQtyOut(_param);\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountOut == _param.amount &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = applyKConstRuleIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _firstAmountOut,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountOut < _param.amount) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountIn;\\r\\n            (\\r\\n                _secondAmountIn,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleIn(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount - _firstAmountOut,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountIn_ += _secondAmountIn;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda58b880f4a83cfa5bbf6bf17c5c4145f18e311c048f6c3a50da7cb1bc75333b\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n/**\\r\\n * @title TransferHelper\\r\\n * @notice helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\n * @custom:from Uniswap lib, adapted to version 0.8.17\\r\\n * @custom:url https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x60ecd8f2f8adab497b83061cd90c8ef6995bb629bbb0c5a88ddf08868cf9f8f4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allPairsLength()": {
        "returns": {
          "_0": "quantity in uint256"
        }
      },
      "createPair(address,address)": {
        "params": {
          "_tokenA": "address of tokenA",
          "_tokenB": "address of tokenB"
        },
        "returns": {
          "pair_": "address of the pair created"
        }
      },
      "getDefaultFees()": {
        "returns": {
          "feesLP_": "numerator of fees sent to LP at pair creation",
          "feesPool_": "numerator of fees sent to Pool at pair creation"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeTo(address)": {
        "params": {
          "_feeTo": "address to replace"
        }
      },
      "setFees(uint128,uint128)": {
        "params": {
          "_feesLP": "new numerator of fees sent to LP, must be >= 1",
          "_feesPool": "new numerator of fees sent to Pool, could be = 0"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "allPairs": {
        "params": {
          "_index": "index of the pair"
        },
        "return": "address of the pair",
        "returns": {
          "_0": "address of the pair"
        }
      }
    },
    "title": "SmardexFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeToUpdated(address,address)": {
        "notice": "emitted when the feeTo is updated"
      },
      "FeesChanged(uint256,uint256)": {
        "notice": "emitted each time feesLP and feesPool are changed"
      },
      "PairCreated(address,address,address,uint256)": {
        "notice": "emitted at each SmardexPair created"
      }
    },
    "kind": "user",
    "methods": {
      "allPairs(uint256)": {
        "notice": "return the address of the pair at index"
      },
      "allPairsLength()": {
        "notice": "return the quantity of pairs"
      },
      "createPair(address,address)": {
        "notice": "create pair with 2 address"
      },
      "feeTo()": {
        "notice": "return which address fees will be transferred"
      },
      "getDefaultFees()": {
        "notice": "return numerators of pair fees, denominator is 1_000_000"
      },
      "getPair(address,address)": {
        "notice": "return the address of the pair of 2 tokens"
      },
      "setFeeTo(address)": {
        "notice": "set the address who will receive fees, can only be call by the owner"
      },
      "setFees(uint128,uint128)": {
        "notice": "set feesLP and feesPool for each new pair (onlyOwner)sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE"
      }
    },
    "notice": "facilitates creation of SmardexPair to swap tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5640,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5643,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "feesLP",
        "offset": 0,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 5646,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "feesPool",
        "offset": 16,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 5652,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 5655,
        "contract": "contracts/core/SmardexFactory.sol:SmardexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}