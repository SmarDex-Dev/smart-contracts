{
  "address": "0x25c4b95F00a01D3739815F026C52126F44034837",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmingOwner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_smardexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startFarmingCampaign",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "farming",
      "outputs": [
        {
          "internalType": "contract IFarmingRange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "resetAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
  "receipt": {
    "to": null,
    "from": "0xcaEc63ce78a0D4DAb2b5112295789A542A0fdAee",
    "contractAddress": "0x25c4b95F00a01D3739815F026C52126F44034837",
    "transactionIndex": 48,
    "gasUsed": "5744298",
    "logsBloom": "0x00000000000000000000000020000000000000000400000000800000000000000000100000000000000000000000000008000000000000000000000000200000000000000000000400000008000000800001000800000000000000000000000040000000020000000000000000010900008000000000000000200010002080400000000000000000000004000000000000000000000000000000000800000000020000000000000000000000000000000000000008000080000000000000000000011002000000000000000000000000000000000000000000000400040020000010000000000000100000000000000000000000400000000000000000000000",
    "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3",
    "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xe74A7a544534DA80fBaC4d2475a6fDc03388154f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000025c4b95f00a01d3739815f026c52126f44034837"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xe74A7a544534DA80fBaC4d2475a6fDc03388154f",
        "topics": [
          "0x9b2f18f9a188a5aec4a95ee3164fe234dfbb6117628b2ad1a581939e61c69f4e",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf0000000000000000000000005de8ab7e27f6e7a1fff3e5b337584aa43961beef0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 85,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xB940D63c2deD1184BbdE059AcC7fEE93654F02bf",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf",
          "0x000000000000000000000000e74a7a544534da80fbac4d2475a6fdc03388154f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 86,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xB940D63c2deD1184BbdE059AcC7fEE93654F02bf",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 87,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xB940D63c2deD1184BbdE059AcC7fEE93654F02bf",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf",
          "0x000000000000000000000000e74a7a544534da80fbac4d2475a6fdc03388154f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 88,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xB940D63c2deD1184BbdE059AcC7fEE93654F02bf",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf",
          "0x000000000000000000000000e74a7a544534da80fbac4d2475a6fdc03388154f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 89,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xe74A7a544534DA80fBaC4d2475a6fDc03388154f",
        "topics": [
          "0x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15",
          "0x000000000000000000000000b940d63c2ded1184bbde059acc7fee93654f02bf"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 90,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 16793957,
        "transactionHash": "0xc5746289db0a018481c6ebd35a7de3e308f758baed89caa5ce3fd74c9c544f9b",
        "address": "0xe74A7a544534DA80fBaC4d2475a6fDc03388154f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000025c4b95f00a01d3739815f026c52126f44034837",
          "0x000000000000000000000000caec63ce78a0d4dab2b5112295789a542a0fdaee"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x5e102663a13f72881430e87993fd82017da845298a48038d7049b2aef9dcb8b3"
      }
    ],
    "blockNumber": 16793957,
    "cumulativeGasUsed": "10089195",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcaEc63ce78a0D4DAb2b5112295789A542A0fdAee",
    "0x5DE8ab7E27f6E7A1fFf3E5B337584Aa43961BEeF",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "c0e549eb0e3b2dac00d522c9d11717e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmingOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_smardexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startFarmingCampaign\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"farming\",\"outputs\":[{\"internalType\":\"contract IFarmingRange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"resetAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_farmingOwner\":\"address who will own the farming\",\"_smardexToken\":\"address of the smardex token\",\"_startFarmingCampaign\":\"block number the staking pool in the farming will start to give rewards\"}},\"resetAllowance(uint256)\":{\"params\":{\"_campaignId\":\"campaign id\"}}},\"stateVariables\":{\"farming\":{\"return\":\"farming contract address (or FarmingRange contract type in Solidity)\",\"returns\":{\"_0\":\"farming contract address (or FarmingRange contract type in Solidity)\"}},\"staking\":{\"return\":\"staking contract address (or Staking contract type in Solidity)\",\"returns\":{\"_0\":\"staking contract address (or Staking contract type in Solidity)\"}}},\"title\":\"RewardManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"farming()\":{\"notice\":\"used to get the farming contract address\"},\"resetAllowance(uint256)\":{\"notice\":\"used to resetAllowance with farming contract to take rewards\"},\"staking()\":{\"notice\":\"used to get the staking contract address\"}},\"notice\":\"RewardManager handles de creation of the contract staking and farming, automatically create a campaignInfo in the farming for the staking, at slot 0 and initialize farming. The RewardManager is the owner of the funds in the FarmingRange, only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get the funds back when updating of removing campaigns.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/RewardManager.sol\":\"RewardManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/rewards/FarmingRange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"./interfaces/IFarmingRange.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FarmingRange\\r\\n * @notice Farming Range allows users to stake LP Tokens to receive various rewards\\r\\n * @custom:from Contract taken from the alpaca protocol, adapted to version 0.8.17 and modified with more functions\\r\\n * @custom:url https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/solidity/contracts/6.12/GrazingRange.sol\\r\\n */\\r\\ncontract FarmingRange is IFarmingRange, Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(uint256 => RewardInfo[]) public campaignRewardInfo;\\r\\n\\r\\n    CampaignInfo[] public campaignInfo;\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    uint256 public rewardInfoLimit;\\r\\n    address public rewardManager;\\r\\n\\r\\n    constructor(address _rewardManager) {\\r\\n        rewardInfoLimit = 52;\\r\\n        rewardManager = _rewardManager;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function upgradePrecision() external onlyOwner {\\r\\n        uint256 _length = campaignInfo.length;\\r\\n        for (uint256 _pid = 0; _pid < _length; ++_pid) {\\r\\n            campaignInfo[_pid].accRewardPerShare = campaignInfo[_pid].accRewardPerShare * 1e8;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function setRewardManager(address _rewardManager) external onlyOwner {\\r\\n        rewardManager = _rewardManager;\\r\\n        emit SetRewardManager(_rewardManager);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external onlyOwner {\\r\\n        rewardInfoLimit = _updatedRewardInfoLimit;\\r\\n        emit SetRewardInfoLimit(rewardInfoLimit);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function addCampaignInfo(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _startBlock) external onlyOwner {\\r\\n        campaignInfo.push(\\r\\n            CampaignInfo({\\r\\n                stakingToken: _stakingToken,\\r\\n                rewardToken: _rewardToken,\\r\\n                startBlock: _startBlock,\\r\\n                lastRewardBlock: _startBlock,\\r\\n                accRewardPerShare: 0,\\r\\n                totalStaked: 0,\\r\\n                totalRewards: 0\\r\\n            })\\r\\n        );\\r\\n        emit AddCampaignInfo(campaignInfo.length - 1, _stakingToken, _rewardToken, _startBlock);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function addRewardInfo(uint256 _campaignID, uint256 _endBlock, uint256 _rewardPerBlock) public onlyOwner {\\r\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        require(\\r\\n            rewardInfo.length < rewardInfoLimit,\\r\\n            \\\"FarmingRange::addRewardInfo::reward info length exceeds the limit\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock >= block.number,\\r\\n            \\\"FarmingRange::addRewardInfo::reward period ended\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardInfo.length == 0 || rewardInfo[rewardInfo.length - 1].endBlock < _endBlock,\\r\\n            \\\"FarmingRange::addRewardInfo::bad new endblock\\\"\\r\\n        );\\r\\n        uint256 _startBlock = rewardInfo.length == 0 ? campaign.startBlock : rewardInfo[rewardInfo.length - 1].endBlock;\\r\\n        uint256 _blockRange = _endBlock - _startBlock;\\r\\n        uint256 _totalRewards = _rewardPerBlock * _blockRange;\\r\\n        _transferFromWithAllowance(campaign.rewardToken, _totalRewards, _campaignID);\\r\\n        campaign.totalRewards = campaign.totalRewards + _totalRewards;\\r\\n        rewardInfo.push(RewardInfo({ endBlock: _endBlock, rewardPerBlock: _rewardPerBlock }));\\r\\n        emit AddRewardInfo(_campaignID, rewardInfo.length - 1, _endBlock, _rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function addRewardInfoMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] calldata _endBlock,\\r\\n        uint256[] calldata _rewardPerBlock\\r\\n    ) external onlyOwner {\\r\\n        require(_endBlock.length == _rewardPerBlock.length, \\\"FarmingRange::addRewardMultiple::wrong parameters length\\\");\\r\\n        for (uint256 _i = 0; _i < _endBlock.length; _i++) {\\r\\n            addRewardInfo(_campaignID, _endBlock[_i], _rewardPerBlock[_i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function updateRewardInfo(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _rewardIndex,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _rewardPerBlock\\r\\n    ) public onlyOwner {\\r\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        RewardInfo storage selectedRewardInfo = rewardInfo[_rewardIndex];\\r\\n        uint256 _previousEndBlock = selectedRewardInfo.endBlock;\\r\\n        _updateCampaign(_campaignID);\\r\\n        require(_previousEndBlock >= block.number, \\\"FarmingRange::updateRewardInfo::reward period ended\\\");\\r\\n        if (_rewardIndex != 0) {\\r\\n            require(\\r\\n                rewardInfo[_rewardIndex - 1].endBlock < _endBlock,\\r\\n                \\\"FarmingRange::updateRewardInfo::bad new endblock\\\"\\r\\n            );\\r\\n        }\\r\\n        if (rewardInfo.length > _rewardIndex + 1) {\\r\\n            require(\\r\\n                _endBlock < rewardInfo[_rewardIndex + 1].endBlock,\\r\\n                \\\"FarmingRange::updateRewardInfo::reward period end is in next range\\\"\\r\\n            );\\r\\n        }\\r\\n        (bool _refund, uint256 _diff) = _updateRewardsDiff(\\r\\n            _rewardIndex,\\r\\n            _endBlock,\\r\\n            _rewardPerBlock,\\r\\n            rewardInfo,\\r\\n            campaign,\\r\\n            selectedRewardInfo\\r\\n        );\\r\\n        if (!_refund && _diff > 0) {\\r\\n            _transferFromWithAllowance(campaign.rewardToken, _diff, _campaignID);\\r\\n        }\\r\\n\\r\\n        // If _endblock is changed, and if we have another range after the updated one,\\r\\n        // we need to update rewardPerBlock to distribute on the next new range or we could run out of tokens\\r\\n        if (_endBlock != _previousEndBlock && rewardInfo.length - 1 > _rewardIndex) {\\r\\n            RewardInfo storage nextRewardInfo = rewardInfo[_rewardIndex + 1];\\r\\n            uint256 _nextRewardInfoEndBlock = nextRewardInfo.endBlock;\\r\\n            uint256 _initialBlockRange = _nextRewardInfoEndBlock - _previousEndBlock;\\r\\n            uint256 _nextBlockRange = _nextRewardInfoEndBlock - _endBlock;\\r\\n            uint256 _initialNextTotal = _initialBlockRange * nextRewardInfo.rewardPerBlock;\\r\\n            nextRewardInfo.rewardPerBlock = (nextRewardInfo.rewardPerBlock * _initialBlockRange) / _nextBlockRange;\\r\\n            uint256 _nextTotal = _nextBlockRange * nextRewardInfo.rewardPerBlock;\\r\\n            if (_nextTotal < _initialNextTotal) {\\r\\n                campaign.rewardToken.safeTransfer(rewardManager, _initialNextTotal - _nextTotal);\\r\\n            }\\r\\n        }\\r\\n        // UPDATE total\\r\\n        campaign.totalRewards = _refund ? campaign.totalRewards - _diff : campaign.totalRewards + _diff;\\r\\n        selectedRewardInfo.endBlock = _endBlock;\\r\\n        selectedRewardInfo.rewardPerBlock = _rewardPerBlock;\\r\\n        emit UpdateRewardInfo(_campaignID, _rewardIndex, _endBlock, _rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function updateRewardMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] memory _rewardIndex,\\r\\n        uint256[] memory _endBlock,\\r\\n        uint256[] memory _rewardPerBlock\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _rewardIndex.length == _endBlock.length && _rewardIndex.length == _rewardPerBlock.length,\\r\\n            \\\"FarmingRange::updateRewardMultiple::wrong parameters length\\\"\\r\\n        );\\r\\n        for (uint256 _i = 0; _i < _rewardIndex.length; _i++) {\\r\\n            updateRewardInfo(_campaignID, _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function updateCampaignsRewards(\\r\\n        uint256[] calldata _campaignID,\\r\\n        uint256[][] calldata _rewardIndex,\\r\\n        uint256[][] calldata _endBlock,\\r\\n        uint256[][] calldata _rewardPerBlock\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _campaignID.length == _rewardIndex.length &&\\r\\n                _rewardIndex.length == _endBlock.length &&\\r\\n                _rewardIndex.length == _rewardPerBlock.length,\\r\\n            \\\"FarmingRange::updateCampaignsRewards::wrong rewardInfo length\\\"\\r\\n        );\\r\\n        for (uint256 _i = 0; _i < _campaignID.length; _i++) {\\r\\n            updateRewardMultiple(_campaignID[_i], _rewardIndex[_i], _endBlock[_i], _rewardPerBlock[_i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function removeLastRewardInfo(uint256 _campaignID) external onlyOwner {\\r\\n        RewardInfo[] storage rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        uint256 _rewardInfoLength = rewardInfo.length;\\r\\n        require(_rewardInfoLength > 0, \\\"FarmingRange::updateCampaignsRewards::no rewardInfoLen\\\");\\r\\n        RewardInfo storage lastRewardInfo = rewardInfo[_rewardInfoLength - 1];\\r\\n        uint256 _lastRewardInfoEndBlock = lastRewardInfo.endBlock;\\r\\n        require(_lastRewardInfoEndBlock > block.number, \\\"FarmingRange::removeLastRewardInfo::reward period ended\\\");\\r\\n        _updateCampaign(_campaignID);\\r\\n        if (lastRewardInfo.rewardPerBlock != 0) {\\r\\n            (bool _refund, uint256 _diff) = _updateRewardsDiff(\\r\\n                _rewardInfoLength - 1,\\r\\n                block.number > _lastRewardInfoEndBlock ? block.number : _lastRewardInfoEndBlock,\\r\\n                0,\\r\\n                rewardInfo,\\r\\n                campaign,\\r\\n                lastRewardInfo\\r\\n            );\\r\\n            if (_refund) {\\r\\n                campaign.totalRewards = campaign.totalRewards - _diff;\\r\\n            }\\r\\n        }\\r\\n        rewardInfo.pop();\\r\\n        emit RemoveRewardInfo(_campaignID, _rewardInfoLength - 1);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256) {\\r\\n        return campaignRewardInfo[_campaignID].length;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function campaignInfoLen() external view returns (uint256) {\\r\\n        return campaignInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function currentEndBlock(uint256 _campaignID) external view returns (uint256) {\\r\\n        return _endBlockOf(_campaignID, block.number);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function currentRewardPerBlock(uint256 _campaignID) external view returns (uint256) {\\r\\n        return _rewardPerBlockOf(_campaignID, block.number);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) public pure returns (uint256) {\\r\\n        if ((_from >= _endBlock) || (_from > _to)) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (_to <= _endBlock) {\\r\\n            return _to - _from;\\r\\n        }\\r\\n        return _endBlock - _from;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256) {\\r\\n        return\\r\\n            _pendingReward(_campaignID, userInfo[_campaignID][_user].amount, userInfo[_campaignID][_user].rewardDebt);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function updateCampaign(uint256 _campaignID) external nonReentrant {\\r\\n        _updateCampaign(_campaignID);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function massUpdateCampaigns() external nonReentrant {\\r\\n        uint256 _length = campaignInfo.length;\\r\\n        for (uint256 _pid = 0; _pid < _length; ++_pid) {\\r\\n            _updateCampaign(_pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function deposit(uint256 _campaignID, uint256 _amount) public nonReentrant {\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\r\\n        _updateCampaign(_campaignID);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\\r\\n            if (_pending > 0) {\\r\\n                campaign.rewardToken.safeTransfer(address(msg.sender), _pending);\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            campaign.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            user.amount = user.amount + _amount;\\r\\n            campaign.totalStaked = campaign.totalStaked + _amount;\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / (1e20);\\r\\n        emit Deposit(msg.sender, _amount, _campaignID);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function depositWithPermit(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _amount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external {\\r\\n        SafeERC20.safePermit(\\r\\n            IERC20Permit(address(campaignInfo[_campaignID].stakingToken)),\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _approveMax ? type(uint256).max : _amount,\\r\\n            _deadline,\\r\\n            _v,\\r\\n            _r,\\r\\n            _s\\r\\n        );\\r\\n\\r\\n        deposit(_campaignID, _amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function withdraw(uint256 _campaignID, uint256 _amount) external nonReentrant {\\r\\n        _withdraw(_campaignID, _amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function harvest(uint256[] calldata _campaignIDs) external nonReentrant {\\r\\n        for (uint256 _i = 0; _i < _campaignIDs.length; ++_i) {\\r\\n            _withdraw(_campaignIDs[_i], 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IFarmingRange\\r\\n    function emergencyWithdraw(uint256 _campaignID) external nonReentrant {\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\r\\n        uint256 _amount = user.amount;\\r\\n        campaign.totalStaked = campaign.totalStaked - _amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        campaign.stakingToken.safeTransfer(msg.sender, _amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _amount, _campaignID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the endblock of the phase that contains _blockNumber\\r\\n     * @param _campaignID the campaign id of the phases to check\\r\\n     * @param _blockNumber the block number to check\\r\\n     * @return the endblock of the phase that contains _blockNumber\\r\\n     */\\r\\n    function _endBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\\r\\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        uint256 _len = rewardInfo.length;\\r\\n        if (_len == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        for (uint256 _i = 0; _i < _len; ++_i) {\\r\\n            if (_blockNumber <= rewardInfo[_i].endBlock) return rewardInfo[_i].endBlock;\\r\\n        }\\r\\n        /// @dev when couldn't find any reward info, it means that _blockNumber exceed endblock\\r\\n        /// so return the latest reward info.\\r\\n        return rewardInfo[_len - 1].endBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the rewardPerBlock of the phase that contains _blockNumber\\r\\n     * @param _campaignID the campaign id of the phases to check\\r\\n     * @param _blockNumber the block number to check\\r\\n     * @return the rewardPerBlock of the phase that contains _blockNumber\\r\\n     */\\r\\n    function _rewardPerBlockOf(uint256 _campaignID, uint256 _blockNumber) internal view returns (uint256) {\\r\\n        RewardInfo[] memory rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        uint256 _len = rewardInfo.length;\\r\\n        if (_len == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        for (uint256 _i = 0; _i < _len; ++_i) {\\r\\n            if (_blockNumber <= rewardInfo[_i].endBlock) return rewardInfo[_i].rewardPerBlock;\\r\\n        }\\r\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\r\\n        /// so return 0\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice in case of reward update, return reward diff and refund user if needed\\r\\n     * @param _rewardIndex the number of the phase to update\\r\\n     * @param _endBlock new endblock of the phase\\r\\n     * @param _rewardPerBlock new rewardPerBlock of the phase\\r\\n     * @param rewardInfo pointer on the array of rewardInfo in storage\\r\\n     * @param campaign pointer on the campaign in storage\\r\\n     * @param selectedRewardInfo pointer on the selectedRewardInfo in storage\\r\\n     * @return refund_ boolean, true if user got refund\\r\\n     * @return diff_ the reward difference\\r\\n     */\\r\\n    function _updateRewardsDiff(\\r\\n        uint256 _rewardIndex,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        RewardInfo[] storage rewardInfo,\\r\\n        CampaignInfo storage campaign,\\r\\n        RewardInfo storage selectedRewardInfo\\r\\n    ) internal returns (bool refund_, uint256 diff_) {\\r\\n        uint256 _previousStartBlock = _rewardIndex == 0 ? campaign.startBlock : rewardInfo[_rewardIndex - 1].endBlock;\\r\\n        uint256 _newStartBlock = block.number > _previousStartBlock ? block.number : _previousStartBlock;\\r\\n        uint256 _previousBlockRange = selectedRewardInfo.endBlock - _previousStartBlock;\\r\\n        uint256 _newBlockRange = _endBlock - _newStartBlock;\\r\\n        uint256 _selectedRewardPerBlock = selectedRewardInfo.rewardPerBlock;\\r\\n        uint256 _accumulatedRewards = (_newStartBlock - _previousStartBlock) * _selectedRewardPerBlock;\\r\\n        uint256 _previousTotalRewards = _selectedRewardPerBlock * _previousBlockRange;\\r\\n        uint256 _totalRewards = _rewardPerBlock * _newBlockRange;\\r\\n        refund_ = _previousTotalRewards > _totalRewards + _accumulatedRewards;\\r\\n        diff_ = refund_\\r\\n            ? _previousTotalRewards - _totalRewards - _accumulatedRewards\\r\\n            : _totalRewards + _accumulatedRewards - _previousTotalRewards;\\r\\n        if (refund_) {\\r\\n            campaign.rewardToken.safeTransfer(rewardManager, diff_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer tokens from rewardManger to this contract.\\r\\n     * @param _rewardToken to reward token to be transfered from the rewwardmanager to this contract\\r\\n     * @param _amount qty to be transfered\\r\\n     * @param _campaignID id of the campaign so the rewardManager can fetch the rewardToken address to transfer\\r\\n     *\\r\\n     * @dev in case of fail, not enough allowance is considered to be the reason, so we call resetAllowance(uint256) on\\r\\n     * the reward manager (which will reset allowance to uint256.max) and we try again to transfer\\r\\n     */\\r\\n    function _transferFromWithAllowance(IERC20 _rewardToken, uint256 _amount, uint256 _campaignID) internal {\\r\\n        try _rewardToken.transferFrom(rewardManager, address(this), _amount) {} catch {\\r\\n            rewardManager.call(abi.encodeWithSignature(\\\"resetAllowance(uint256)\\\", _campaignID));\\r\\n            _rewardToken.safeTransferFrom(rewardManager, address(this), _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View function to retrieve pending Reward.\\r\\n     * @param _campaignID pending reward of campaign id\\r\\n     * @param _amount qty of staked token\\r\\n     * @param _rewardDebt user info rewardDebt\\r\\n     * @return pending rewards\\r\\n     */\\r\\n    function _pendingReward(uint256 _campaignID, uint256 _amount, uint256 _rewardDebt) internal view returns (uint256) {\\r\\n        CampaignInfo memory _campaign = campaignInfo[_campaignID];\\r\\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        uint256 _accRewardPerShare = _campaign.accRewardPerShare;\\r\\n        if (block.number > _campaign.lastRewardBlock && _campaign.totalStaked != 0) {\\r\\n            uint256 _cursor = _campaign.lastRewardBlock;\\r\\n            for (uint256 _i = 0; _i < _rewardInfo.length; ++_i) {\\r\\n                uint256 _multiplier = getMultiplier(_cursor, block.number, _rewardInfo[_i].endBlock);\\r\\n                if (_multiplier == 0) continue;\\r\\n                _cursor = _rewardInfo[_i].endBlock;\\r\\n                _accRewardPerShare =\\r\\n                    _accRewardPerShare +\\r\\n                    ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / _campaign.totalStaked);\\r\\n            }\\r\\n        }\\r\\n        return ((_amount * _accRewardPerShare) / 1e20) - _rewardDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given campaign to be up-to-date.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function _updateCampaign(uint256 _campaignID) internal {\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        RewardInfo[] memory _rewardInfo = campaignRewardInfo[_campaignID];\\r\\n        if (block.number <= campaign.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if (campaign.totalStaked == 0) {\\r\\n            // if there is no total supply, return and use the campaign's start block as the last reward block\\r\\n            // so that ALL reward will be distributed.\\r\\n            // however, if the first deposit is out of reward period, last reward block will be its block number\\r\\n            // in order to keep the multiplier = 0\\r\\n            if (block.number > _endBlockOf(_campaignID, block.number)) {\\r\\n                campaign.lastRewardBlock = block.number;\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        /// @dev for each reward info\\r\\n        for (uint256 _i = 0; _i < _rewardInfo.length; ++_i) {\\r\\n            // @dev get multiplier based on current Block and rewardInfo's end block\\r\\n            // multiplier will be a range of either (current block - campaign.lastRewardBlock)\\r\\n            // or (reward info's endblock - campaign.lastRewardBlock) or 0\\r\\n            uint256 _multiplier = getMultiplier(campaign.lastRewardBlock, block.number, _rewardInfo[_i].endBlock);\\r\\n            if (_multiplier == 0) continue;\\r\\n            // @dev if currentBlock exceed end block, use end block as the last reward block\\r\\n            // so that for the next iteration, previous endBlock will be used as the last reward block\\r\\n            if (block.number > _rewardInfo[_i].endBlock) {\\r\\n                campaign.lastRewardBlock = _rewardInfo[_i].endBlock;\\r\\n            } else {\\r\\n                campaign.lastRewardBlock = block.number;\\r\\n            }\\r\\n            campaign.accRewardPerShare =\\r\\n                campaign.accRewardPerShare +\\r\\n                ((_multiplier * _rewardInfo[_i].rewardPerBlock * 1e20) / campaign.totalStaked);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to withdraw\\r\\n     */\\r\\n    function _withdraw(uint256 _campaignID, uint256 _amount) internal {\\r\\n        CampaignInfo storage campaign = campaignInfo[_campaignID];\\r\\n        UserInfo storage user = userInfo[_campaignID][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"FarmingRange::withdraw::bad withdraw amount\\\");\\r\\n        _updateCampaign(_campaignID);\\r\\n        uint256 _pending = (user.amount * campaign.accRewardPerShare) / 1e20 - user.rewardDebt;\\r\\n        if (_pending > 0) {\\r\\n            campaign.rewardToken.safeTransfer(msg.sender, _pending);\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount - _amount;\\r\\n            campaign.stakingToken.safeTransfer(msg.sender, _amount);\\r\\n            campaign.totalStaked = campaign.totalStaked - _amount;\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * campaign.accRewardPerShare) / 1e20;\\r\\n\\r\\n        emit Withdraw(msg.sender, _amount, _campaignID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd658b129bb4697024c8eea26da542e3660c76411ebd1b886bfe8dc9af7c4457a\",\"license\":\"MIT\"},\"contracts/rewards/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// contracts\\r\\nimport \\\"./FarmingRange.sol\\\";\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IRewardManager.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RewardManager\\r\\n * @notice RewardManager handles de creation of the contract staking and farming, automatically create a campaignInfo\\r\\n * in the farming for the staking, at slot 0 and initialize farming. The RewardManager is the owner of the funds in\\r\\n * the FarmingRange, only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get\\r\\n * the funds back when updating of removing campaigns.\\r\\n */\\r\\ncontract RewardManager is IRewardManager {\\r\\n    bytes4 private constant TRANSFER_OWNERSHIP_SELECTOR = bytes4(keccak256(bytes(\\\"transferOwnership(address)\\\")));\\r\\n\\r\\n    IFarmingRange public immutable farming;\\r\\n    IStaking public immutable staking;\\r\\n\\r\\n    /**\\r\\n     * @param _farmingOwner address who will own the farming\\r\\n     * @param _smardexToken address of the smardex token\\r\\n     * @param _startFarmingCampaign block number the staking pool in the farming will start to give rewards\\r\\n     */\\r\\n    constructor(address _farmingOwner, IERC20 _smardexToken, uint256 _startFarmingCampaign) {\\r\\n        farming = new FarmingRange(address(this));\\r\\n        staking = new Staking(_smardexToken, farming);\\r\\n        farming.addCampaignInfo(staking, _smardexToken, _startFarmingCampaign);\\r\\n        staking.initializeFarming();\\r\\n\\r\\n        address(farming).call(abi.encodeWithSelector(TRANSFER_OWNERSHIP_SELECTOR, _farmingOwner));\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IRewardManager\\r\\n    function resetAllowance(uint256 _campaignId) external {\\r\\n        require(_campaignId < farming.campaignInfoLen(), \\\"RewardHolder:campaignId:wrong campaign ID\\\");\\r\\n\\r\\n        (, IERC20 rewardToken, , , , , ) = farming.campaignInfo(_campaignId);\\r\\n        rewardToken.approve(address(farming), type(uint256).max);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9e54a25004771a63e4d268c66b53b69fec55649770f9f6abcc313938df289747\",\"license\":\"BUSL-1.1\"},\"contracts/rewards/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IStaking.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Staking\\r\\n * @notice Implementation of an APY staking pool. Users can deposit SDEX for a share in the pool. New shares depend of\\r\\n * current shares supply and SDEX in the pool. Pool will receive SDEX rewards fees by external transfer from admin or\\r\\n * contract but also from farming pool. Each deposit/withdraw will harvest the user funds in the farming pool as well.\\r\\n */\\r\\ncontract Staking is IStaking, ERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public constant CAMPAIGN_ID = 0;\\r\\n    uint256 internal constant SHARES_FACTOR = 1e18;\\r\\n\\r\\n    IERC20 public immutable smardexToken;\\r\\n    IFarmingRange public immutable farming;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    uint256 public totalShares;\\r\\n    bool public farmingInitialized = false;\\r\\n\\r\\n    modifier isFarmingInitialized() {\\r\\n        require(farmingInitialized == true, \\\"Staking::isFarmingInitialized::Farming campaign not initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkUserBlock() {\\r\\n        require(\\r\\n            userInfo[msg.sender].lastBlockUpdate < block.number,\\r\\n            \\\"Staking::checkUserBlock::User already called deposit or withdraw this block\\\"\\r\\n        );\\r\\n        userInfo[msg.sender].lastBlockUpdate = block.number;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IERC20 _smardexToken, IFarmingRange _farming) ERC20(\\\"Staked SmarDex Token\\\", \\\"stSDEX\\\") {\\r\\n        smardexToken = _smardexToken;\\r\\n        farming = _farming;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function initializeFarming() external {\\r\\n        require(farmingInitialized == false, \\\"Staking::initializeFarming::Farming campaign already initialized\\\");\\r\\n        _approve(address(this), address(farming), 1 wei);\\r\\n        _mint(address(this), 1 wei);\\r\\n        farming.deposit(CAMPAIGN_ID, 1 wei);\\r\\n\\r\\n        farmingInitialized = true;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function deposit(uint256 _depositAmount) public isFarmingInitialized checkUserBlock {\\r\\n        require(_depositAmount > 0, \\\"Staking::deposit::can't deposit zero token\\\");\\r\\n\\r\\n        harvestFarming();\\r\\n\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        uint256 _newShares = _tokensToShares(_depositAmount, _currentBalance);\\r\\n\\r\\n        smardexToken.safeTransferFrom(msg.sender, address(this), _depositAmount);\\r\\n\\r\\n        totalShares += _newShares;\\r\\n        userInfo[msg.sender].shares += _newShares;\\r\\n\\r\\n        emit Deposit(msg.sender, _depositAmount, _newShares);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function depositWithPermit(\\r\\n        uint256 _depositAmount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external {\\r\\n        SafeERC20.safePermit(\\r\\n            IERC20Permit(address(smardexToken)),\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _approveMax ? type(uint256).max : _depositAmount,\\r\\n            _deadline,\\r\\n            _v,\\r\\n            _r,\\r\\n            _s\\r\\n        );\\r\\n\\r\\n        deposit(_depositAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function withdraw(address _to, uint256 _sharesAmount) external isFarmingInitialized checkUserBlock {\\r\\n        require(\\r\\n            _sharesAmount > 0 && userInfo[msg.sender].shares >= _sharesAmount,\\r\\n            \\\"Staking::withdraw::can't withdraw more than user shares or zero\\\"\\r\\n        );\\r\\n\\r\\n        harvestFarming();\\r\\n\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        uint256 _tokensToWithdraw = _sharesToTokens(_sharesAmount, _currentBalance);\\r\\n\\r\\n        userInfo[msg.sender].shares -= _sharesAmount;\\r\\n        totalShares -= _sharesAmount;\\r\\n        smardexToken.safeTransfer(_to, _tokensToWithdraw);\\r\\n\\r\\n        emit Withdraw(msg.sender, _to, _tokensToWithdraw, _sharesAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function harvestFarming() public {\\r\\n        farming.withdraw(CAMPAIGN_ID, 0);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function tokensToShares(uint256 _tokens) external view returns (uint256 shares_) {\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        _currentBalance += farming.pendingReward(CAMPAIGN_ID, address(this));\\r\\n\\r\\n        shares_ = _tokensToShares(_tokens, _currentBalance);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function sharesToTokens(uint256 _shares) external view returns (uint256 tokens_) {\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        _currentBalance += farming.pendingReward(CAMPAIGN_ID, address(this));\\r\\n\\r\\n        tokens_ = _sharesToTokens(_shares, _currentBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares qty for an amount of sdex tokens\\r\\n     * @param _tokens user qty of sdex to be converted to shares\\r\\n     * @param _currentBalance contract balance sdex. _tokens <= _currentBalance\\r\\n     * @return shares_ shares equivalent to the token amount. _shares <= totalShares\\r\\n     */\\r\\n    function _tokensToShares(uint256 _tokens, uint256 _currentBalance) internal view returns (uint256 shares_) {\\r\\n        shares_ = totalShares > 0 ? (_tokens * totalShares) / _currentBalance : _tokens * SHARES_FACTOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares values in sdex tokens\\r\\n     * @param _shares amount of shares. _shares <= totalShares\\r\\n     * @param _currentBalance contract balance in sdex\\r\\n     * @return tokens_ qty of sdex token equivalent to the _shares. tokens_ <= _currentBalance\\r\\n     */\\r\\n    function _sharesToTokens(uint256 _shares, uint256 _currentBalance) internal view returns (uint256 tokens_) {\\r\\n        tokens_ = totalShares > 0 ? (_shares * _currentBalance) / totalShares : _shares / SHARES_FACTOR;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4029b918f686edbd4537f85b58069de3ff3d5e026f2bed2b204fee468de808f8\",\"license\":\"BUSL-1.1\"},\"contracts/rewards/interfaces/IFarmingRange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ninterface IFarmingRange {\\r\\n    /**\\r\\n     * @notice Info of each user.\\r\\n     * @param amount How many Staking tokens the user has provided.\\r\\n     * @param rewardDebt We do some fancy math here. Basically, any point in time, the amount of reward\\r\\n     *  entitled to a user but is pending to be distributed is:\\r\\n     *\\r\\n     *    pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\r\\n     *\\r\\n     *  Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n     *    1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\r\\n     *    2. User receives the pending reward sent to his/her address.\\r\\n     *    3. User's `amount` gets updated.\\r\\n     *    4. User's `rewardDebt` gets updated.\\r\\n     *\\r\\n     * from: https://github.com/jazz-defi/contracts/blob/master/MasterChefV2.sol\\r\\n     */\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Info of each reward distribution campaign.\\r\\n     * @param stakingToken address of Staking token contract.\\r\\n     * @param rewardToken address of Reward token contract\\r\\n     * @param startBlock start block of the campaign\\r\\n     * @param lastRewardBlock last block number that Reward Token distribution occurs.\\r\\n     * @param accRewardPerShare accumulated Reward Token per share, times 1e20.\\r\\n     * @param totalStaked total staked amount each campaign's stake token, typically,\\r\\n     * @param totalRewards total amount of reward to be distributed until the end of the last phase\\r\\n     *\\r\\n     * @dev each campaign has the same stake token, so no need to track it separetely\\r\\n     */\\r\\n    struct CampaignInfo {\\r\\n        IERC20 stakingToken;\\r\\n        IERC20 rewardToken;\\r\\n        uint256 startBlock;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 accRewardPerShare;\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Info about a reward-phase\\r\\n     * @param endBlock block number of the end of the phase\\r\\n     * @param rewardPerBlock amount of reward to be distributed per block in this phase\\r\\n     */\\r\\n    struct RewardInfo {\\r\\n        uint256 endBlock;\\r\\n        uint256 rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each deposit\\r\\n     * @param user address that deposit its funds\\r\\n     * @param amount amount deposited\\r\\n     * @param campaign campaingId on which the user has deposited funds\\r\\n     */\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each withdraw\\r\\n     * @param user address that withdrawn its funds\\r\\n     * @param amount amount withdrawn\\r\\n     * @param campaign campaingId on which the user has withdrawn funds\\r\\n     */\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each emergency withdraw\\r\\n     * @param user address that emergency-withdrawn its funds\\r\\n     * @param amount amount emergency-withdrawn\\r\\n     * @param campaign campaingId on which the user has emergency-withdrawn funds\\r\\n     */\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each campaign added\\r\\n     * @param campaignID new campaign id\\r\\n     * @param stakingToken token address to be staked in this campaign\\r\\n     * @param rewardToken token address of the rewards in this campaign\\r\\n     * @param startBlock starting block of this campaign\\r\\n     */\\r\\n    event AddCampaignInfo(uint256 indexed campaignID, IERC20 stakingToken, IERC20 rewardToken, uint256 startBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each phase of reward added\\r\\n     * @param campaignID campaign id on which rewards were added\\r\\n     * @param phase number of the new phase added (latest at the moment of add)\\r\\n     * @param endBlock number of the block that the phase stops (phase starts at the endblock of the previous phase's\\r\\n     * endblock, and if it's the phase 0, it start at the startBlock of the campaign struct)\\r\\n     * @param rewardPerBlock amount of reward distributed per block in this phase\\r\\n     */\\r\\n    event AddRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when a reward phase is updated\\r\\n     * @param campaignID campaign id on which the rewards-phase is updated\\r\\n     * @param phase id of phase updated\\r\\n     * @param endBlock new endblock of the phase\\r\\n     * @param rewardPerBlock new rewardPerBlock of the phase\\r\\n     */\\r\\n    event UpdateRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when a reward phase is removed\\r\\n     * @param campaignID campaign id on which the rewards-phase is removed\\r\\n     * @param phase id of phase removed (only the latest phase can be removed)\\r\\n     */\\r\\n    event RemoveRewardInfo(uint256 indexed campaignID, uint256 indexed phase);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the rewardInfoLimit is updated\\r\\n     * @param rewardInfoLimit new max phase amount per campaign\\r\\n     */\\r\\n    event SetRewardInfoLimit(uint256 rewardInfoLimit);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the rewardManager is changed\\r\\n     * @param rewardManager address of the new rewardManager\\r\\n     */\\r\\n    event SetRewardManager(address rewardManager);\\r\\n\\r\\n    /**\\r\\n     * @notice increase precision of accRewardPerShare in all campaign\\r\\n     */\\r\\n    function upgradePrecision() external;\\r\\n\\r\\n    /**\\r\\n     * @notice set the reward manager, responsible for adding rewards\\r\\n     * @param _rewardManager address of the reward manager\\r\\n     */\\r\\n    function setRewardManager(address _rewardManager) external;\\r\\n\\r\\n    /**\\r\\n     * @notice set new reward info limit, defining how many phases are allowed\\r\\n     * @param _updatedRewardInfoLimit new reward info limit\\r\\n     */\\r\\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external;\\r\\n\\r\\n    /**\\r\\n     * @notice reward campaign, one campaign represent a pair of staking and reward token,\\r\\n     * last reward Block and acc reward Per Share\\r\\n     * @param _stakingToken staking token address\\r\\n     * @param _rewardToken reward token address\\r\\n     * @param _startBlock block number when the campaign will start\\r\\n     */\\r\\n    function addCampaignInfo(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _startBlock) external;\\r\\n\\r\\n    /**\\r\\n     * @notice add a nex reward info, when a new reward info is added, the reward\\r\\n     * & its end block will be extended by the newly pushed reward info.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _endBlock end block of this reward info\\r\\n     * @param _rewardPerBlock reward per block to distribute until the end\\r\\n     */\\r\\n    function addRewardInfo(uint256 _campaignID, uint256 _endBlock, uint256 _rewardPerBlock) external;\\r\\n\\r\\n    /**\\r\\n     * @notice add multiple reward Info into a campaign in one tx.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _endBlock array of end blocks\\r\\n     * @param _rewardPerBlock array of reward per block\\r\\n     */\\r\\n    function addRewardInfoMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] calldata _endBlock,\\r\\n        uint256[] calldata _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update one campaign reward info for a specified range index.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _rewardIndex index of the reward info\\r\\n     * @param _endBlock end block of this reward info\\r\\n     * @param _rewardPerBlock reward per block to distribute until the end\\r\\n     */\\r\\n    function updateRewardInfo(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _rewardIndex,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update multiple campaign rewards info for all range index.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _rewardIndex array of reward info index\\r\\n     * @param _endBlock array of end block\\r\\n     * @param _rewardPerBlock array of rewardPerBlock\\r\\n     */\\r\\n    function updateRewardMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] memory _rewardIndex,\\r\\n        uint256[] memory _endBlock,\\r\\n        uint256[] memory _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update multiple campaigns and rewards info for all range index.\\r\\n     * @param _campaignID array of campaign id\\r\\n     * @param _rewardIndex multi dimensional array of reward info index\\r\\n     * @param _endBlock multi dimensional array of end block\\r\\n     * @param _rewardPerBlock multi dimensional array of rewardPerBlock\\r\\n     */\\r\\n    function updateCampaignsRewards(\\r\\n        uint256[] calldata _campaignID,\\r\\n        uint256[][] calldata _rewardIndex,\\r\\n        uint256[][] calldata _endBlock,\\r\\n        uint256[][] calldata _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice remove last reward info for specified campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function removeLastRewardInfo(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return the entries amount of reward info for one campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return reward info quantity\\r\\n     */\\r\\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the number of campaigns.\\r\\n     * @return campaign quantity\\r\\n     */\\r\\n    function campaignInfoLen() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the end block of the current reward info for a given campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return reward info end block number\\r\\n     */\\r\\n    function currentEndBlock(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the reward per block of the current reward info for a given campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return current reward per block\\r\\n     */\\r\\n    function currentRewardPerBlock(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Return reward multiplier over the given _from to _to block.\\r\\n     * Reward multiplier is the amount of blocks between from and to\\r\\n     * @param _from start block number\\r\\n     * @param _to end block number\\r\\n     * @param _endBlock end block number of the reward info\\r\\n     * @return block distance\\r\\n     */\\r\\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice View function to retrieve pending Reward.\\r\\n     * @param _campaignID pending reward of campaign id\\r\\n     * @param _user address to retrieve pending reward\\r\\n     * @return current pending reward\\r\\n     */\\r\\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given campaign to be up-to-date.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function updateCampaign(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables for all campaigns. gas spending is HIGH in this method call, BE CAREFUL.\\r\\n     */\\r\\n    function massUpdateCampaigns() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staking token in a campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to deposit\\r\\n     */\\r\\n    function deposit(uint256 _campaignID, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staking token in a campaign with the EIP-2612 signature off chain\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to deposit\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     */\\r\\n    function depositWithPermit(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _amount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 _campaignID, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest campaigns, will claim rewards token of every campaign ids in the array\\r\\n     * @param _campaignIDs array of campaign id\\r\\n     */\\r\\n    function harvest(uint256[] calldata _campaignIDs) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function emergencyWithdraw(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get Reward info for a campaign ID and index, that is a set of {endBlock, rewardPerBlock}\\r\\n     *  indexed by campaign ID\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _rewardIndex index of the reward info\\r\\n     * @return endBlock_ end block of this reward info\\r\\n     * @return rewardPerBlock_ reward per block to distribute\\r\\n     */\\r\\n    function campaignRewardInfo(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _rewardIndex\\r\\n    ) external view returns (uint256 endBlock_, uint256 rewardPerBlock_);\\r\\n\\r\\n    /**\\r\\n     * @notice get a Campaign Reward info for a campaign ID\\r\\n     * @param _campaignID campaign id\\r\\n     * @return all params from CampaignInfo struct\\r\\n     */\\r\\n    function campaignInfo(\\r\\n        uint256 _campaignID\\r\\n    ) external view returns (IERC20, IERC20, uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get a User Reward info for a campaign ID and user address\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _user user address\\r\\n     * @return all params from UserInfo struct\\r\\n     */\\r\\n    function userInfo(uint256 _campaignID, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice how many reward phases can be set for a campaign\\r\\n     * @return rewards phases size limit\\r\\n     */\\r\\n    function rewardInfoLimit() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get reward Manager address holding rewards to distribute\\r\\n     * @return address of reward manager\\r\\n     */\\r\\n    function rewardManager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x8c32f436e1fb8fc8198386980a0eb40121d88a186b5ef090bf27ac512ecaf338\",\"license\":\"MIT\"},\"contracts/rewards/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./IFarmingRange.sol\\\";\\r\\nimport \\\"./IStaking.sol\\\";\\r\\n\\r\\ninterface IRewardManager {\\r\\n    /**\\r\\n     * @notice used to resetAllowance with farming contract to take rewards\\r\\n     * @param _campaignId campaign id\\r\\n     */\\r\\n    function resetAllowance(uint256 _campaignId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice used to get the farming contract address\\r\\n     * @return farming contract address (or FarmingRange contract type in Solidity)\\r\\n     */\\r\\n    function farming() external view returns (IFarmingRange);\\r\\n\\r\\n    /**\\r\\n     * @notice used to get the staking contract address\\r\\n     * @return staking contract address (or Staking contract type in Solidity)\\r\\n     */\\r\\n    function staking() external view returns (IStaking);\\r\\n}\\r\\n\",\"keccak256\":\"0x759f9f2a52e0c9660cb049884e67f79f862ef67dcb96c4fc632146314f387c05\",\"license\":\"BUSL-1.1\"},\"contracts/rewards/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IFarmingRange.sol\\\";\\r\\n\\r\\ninterface IStaking is IERC20 {\\r\\n    /**\\r\\n     * @notice iunfo of each user\\r\\n     * @param shares shares owned in the staking\\r\\n     * @param lastBlockUpdate last block the user called deposit or withdraw\\r\\n     */\\r\\n    struct UserInfo {\\r\\n        uint256 shares;\\r\\n        uint256 lastBlockUpdate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each deposit\\r\\n     * @param from address that deposit its funds\\r\\n     * @param depositAmount amount deposited\\r\\n     * @param shares shares corresponding to the token amount deposited\\r\\n     */\\r\\n    event Deposit(address indexed from, uint256 depositAmount, uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each withdraw\\r\\n     * @param from address that calls the withdraw function, and of which the shares are withdrawn\\r\\n     * @param to address that receives the funds\\r\\n     * @param tokenReceived amount of token received by to\\r\\n     * @param shares shares corresponding to the token amount withdrawn\\r\\n     */\\r\\n    event Withdraw(address indexed from, address indexed to, uint256 tokenReceived, uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize staking connection with farming\\r\\n     * Mint one token of stSDEX and then deposit in the staking farming pool\\r\\n     * This contract should be the only participant of the staking farming pool\\r\\n     */\\r\\n    function initializeFarming() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Send SDEX to get shares in the staking pool\\r\\n     * @param _depositAmount The amount of SDEX to send\\r\\n     */\\r\\n    function deposit(uint256 _depositAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Send SDEX to get shares in the staking pool with the EIP-2612 signature off chain\\r\\n     * @param _depositAmount The amount of SDEX to send\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     */\\r\\n    function depositWithPermit(\\r\\n        uint256 _depositAmount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest and withdraw SDEX for the amount of shares defined\\r\\n     * @param _to The address who will receive SDEX\\r\\n     * @param _sharesAmount The amount of shares to use\\r\\n     */\\r\\n    function withdraw(address _to, uint256 _sharesAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest the farming pool for the staking, will increase the SDEX\\r\\n     */\\r\\n    function harvestFarming() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares qty for an amount of sdex tokens\\r\\n     * @param _tokens user qty of sdex to be converted to shares\\r\\n     * @return shares_ shares equivalent to the token amount. _shares <= totalShares\\r\\n     */\\r\\n    function tokensToShares(uint256 _tokens) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares values in sdex tokens\\r\\n     * @param _shares amount of shares. _shares <= totalShares\\r\\n     * @return tokens_ qty of sdex token equivalent to the _shares. tokens_ <= _currentBalance\\r\\n     */\\r\\n    function sharesToTokens(uint256 _shares) external view returns (uint256 tokens_);\\r\\n\\r\\n    /**\\r\\n     * @notice Campaign id for staking in the farming contract\\r\\n     * @return ID of the campaign\\r\\n     */\\r\\n    function CAMPAIGN_ID() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get farming initialized status\\r\\n     * @return boolean inititalized or not\\r\\n     */\\r\\n    function farmingInitialized() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice get smardex Token contract address\\r\\n     * @return smardex contract (address or type for Solidity)\\r\\n     */\\r\\n    function smardexToken() external view returns (IERC20);\\r\\n\\r\\n    /**\\r\\n     * @notice get farming contract address\\r\\n     * @return farming contract (address or type for Solidity)\\r\\n     */\\r\\n    function farming() external view returns (IFarmingRange);\\r\\n\\r\\n    /**\\r\\n     * @notice get user info for staking status\\r\\n     * @param _user user address\\r\\n     * @return shares amount for user\\r\\n     * @return lastBlockUpdate last block the user called deposit or withdraw\\r\\n     */\\r\\n    function userInfo(address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get total shares in the staking\\r\\n     * @return total shares amount\\r\\n     */\\r\\n    function totalShares() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xd206f82b65ebcc8f667f186f174d8a8be7e11f2c69fb3fa8b3e651aeb089768a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634cf088d9146100465780634e3ad80f14610096578063eee4f11b146100bd575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100d06100cb366004610393565b6100d2565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634ad7ce806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016191906103ac565b81106101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f526577617264486f6c6465723a63616d706169676e49643a77726f6e6720636160448201527f6d706169676e2049440000000000000000000000000000000000000000000000606482015260840160405180910390fd5b6040517fbb2238ec000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063bb2238ec9060240160e060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a591906103ee565b50506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024830152949650938616945063095ea7b393604401925061034b915050565b6020604051808303816000875af115801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e9190610450565b505050565b6000602082840312156103a557600080fd5b5035919050565b6000602082840312156103be57600080fd5b5051919050565b805173ffffffffffffffffffffffffffffffffffffffff811681146103e957600080fd5b919050565b600080600080600080600060e0888a03121561040957600080fd5b610412886103c5565b9650610420602089016103c5565b604089015160608a015160808b015160a08c015160c0909c01519a9d939c50919a90999198509650945092505050565b60006020828403121561046257600080fd5b8151801515811461047257600080fd5b939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_farmingOwner": "address who will own the farming",
          "_smardexToken": "address of the smardex token",
          "_startFarmingCampaign": "block number the staking pool in the farming will start to give rewards"
        }
      },
      "resetAllowance(uint256)": {
        "params": {
          "_campaignId": "campaign id"
        }
      }
    },
    "stateVariables": {
      "farming": {
        "return": "farming contract address (or FarmingRange contract type in Solidity)",
        "returns": {
          "_0": "farming contract address (or FarmingRange contract type in Solidity)"
        }
      },
      "staking": {
        "return": "staking contract address (or Staking contract type in Solidity)",
        "returns": {
          "_0": "staking contract address (or Staking contract type in Solidity)"
        }
      }
    },
    "title": "RewardManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "farming()": {
        "notice": "used to get the farming contract address"
      },
      "resetAllowance(uint256)": {
        "notice": "used to resetAllowance with farming contract to take rewards"
      },
      "staking()": {
        "notice": "used to get the staking contract address"
      }
    },
    "notice": "RewardManager handles de creation of the contract staking and farming, automatically create a campaignInfo in the farming for the staking, at slot 0 and initialize farming. The RewardManager is the owner of the funds in the FarmingRange, only the RewardManager is capable of sending funds to be farmed and only the RewardManager will get the funds back when updating of removing campaigns.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}