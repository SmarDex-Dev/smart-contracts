{
  "address": "0x89c64B435947bFc0BF74B645F088d67206f0cc54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISmardexFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_smardexToken",
          "type": "address"
        },
        {
          "internalType": "contract ISmardexRouter",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "_token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "_token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakedAmount",
          "type": "uint256"
        }
      ],
      "name": "workExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "executeWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ISmardexFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISmardexRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "_dataFromPair",
          "type": "bytes"
        }
      ],
      "name": "smardexSwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smardexToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenWithPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc35189e5da404065054061164bce062feaf22d47a853fa119367cab257ab9f3",
  "receipt": {
    "to": null,
    "from": "0x45C75bd8Bb9CF5263539b914925EabBF0441Eb14",
    "contractAddress": "0x89c64B435947bFc0BF74B645F088d67206f0cc54",
    "transactionIndex": 1,
    "gasUsed": "11707241",
    "logsBloom": "0x00000000000000000000000000000020000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000200000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000080000000000000000000000000000000000000",
    "blockHash": "0x2300cdf12739f31ba8ef6d2bb36b393aa75735105ef36d1a4c0aff69137f385b",
    "transactionHash": "0xbc35189e5da404065054061164bce062feaf22d47a853fa119367cab257ab9f3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 135133252,
        "transactionHash": "0xbc35189e5da404065054061164bce062feaf22d47a853fa119367cab257ab9f3",
        "address": "0x89c64B435947bFc0BF74B645F088d67206f0cc54",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000045c75bd8bb9cf5263539b914925eabbf0441eb14"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2300cdf12739f31ba8ef6d2bb36b393aa75735105ef36d1a4c0aff69137f385b"
      }
    ],
    "blockNumber": 135133252,
    "cumulativeGasUsed": "11707241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x41A00e3FbE7F479A99bA6822704d9c5dEB611F22",
    "0xabD587f2607542723b17f14d00d99b987C29b074",
    "0xdd4536dD9636564D891c919416880a3e250f975A"
  ],
  "numDeployments": 2,
  "solcInputHash": "f221504ed38646ee69cfb1e042ac8e41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISmardexFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_smardexToken\",\"type\":\"address\"},{\"internalType\":\"contract ISmardexRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"name\":\"workExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"executeWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ISmardexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISmardexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_dataFromPair\",\"type\":\"bytes\"}],\"name\":\"smardexSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smardexToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenWithPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeWork(address,address)\":{\"params\":{\"_token0\":\"token to be converted to sdex\",\"_token1\":\"token to be converted to sdex\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"smardexSwapCallback(int256,int256,bytes)\":{\"params\":{\"_amount0Delta\":\"amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\",\"_amount1Delta\":\"amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\",\"_data\":\"for Router path and payer for the swap (see router for details)\"}},\"swapTokenWithPath(uint256,uint256,address[],uint256)\":{\"params\":{\"_amountOutMin\":\"The minimum SDEX amount required to prevent the transaction from reverting\",\"_amountToSwap\":\"amount of tokens from _path[0] to be converted into SDEX\",\"_deadline\":\"Unix timestamp after which the transaction will revert\",\"_path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity. Last token must be SDEX\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTokens()\":{\"returns\":{\"_amount\":\"the transferred SDEX amount\"}}},\"stateVariables\":{\"factory\":{\"return\":\"factory address\",\"returns\":{\"_0\":\"factory address\"}},\"smardexToken\":{\"return\":\"smardexToken address\",\"returns\":{\"_0\":\"smardexToken address\"}}},\"title\":\"AutoSwapper\",\"version\":1},\"userdoc\":{\"events\":{\"workExecuted(address,uint256,address,uint256,uint256)\":{\"notice\":\"emitted every time the AutoSwapper swaps and stacks SDEXs\"}},\"kind\":\"user\",\"methods\":{\"executeWork(address,address)\":{\"notice\":\"public function for executing swaps on tokens and burn, will be called from a Smardex Pair on mint and burn, and can be forced call by anyone\"},\"factory()\":{\"notice\":\"return the factory address\"},\"smardexSwapCallback(int256,int256,bytes)\":{\"notice\":\"callback data for swap\"},\"smardexToken()\":{\"notice\":\"return the smardexToken address\"},\"swapTokenWithPath(uint256,uint256,address[],uint256)\":{\"notice\":\"onlyOwner function to swap token in SDEX and send it to the staking address (or burn on L2)\"},\"transferTokens()\":{\"notice\":\"transfer SDEX from here to address dead\"}},\"notice\":\"AutoSwapper makes it automatic and/or public to get fees from Smardex and burn it\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/AutoSwapperL2.sol\":\"AutoSwapperL2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/core/interfaces/ISmardexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexFactory {\\r\\n    /**\\r\\n     * @notice emitted at each SmardexPair created\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param pair address of the SmardexPair created\\r\\n     * @param totalPair number of SmardexPair created so far\\r\\n     */\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 totalPair);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the feeTo is updated\\r\\n     * @param previousFeeTo the previous feeTo address\\r\\n     * @param newFeeTo the new feeTo address\\r\\n     */\\r\\n    event FeeToUpdated(address indexed previousFeeTo, address indexed newFeeTo);\\r\\n\\r\\n    /**\\r\\n     * @notice return which address fees will be transferred\\r\\n     */\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair of 2 tokens\\r\\n     */\\r\\n    function getPair(address _tokenA, address _tokenB) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the address of the pair at index\\r\\n     * @param _index index of the pair\\r\\n     * @return pair_ address of the pair\\r\\n     */\\r\\n    function allPairs(uint256 _index) external view returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the quantity of pairs\\r\\n     * @return quantity in uint256\\r\\n     */\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP at pair creation\\r\\n     * @return feesPool_ numerator of fees sent to Pool at pair creation\\r\\n     */\\r\\n    function getDefaultFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice create pair with 2 address\\r\\n     * @param _tokenA address of tokenA\\r\\n     * @param _tokenB address of tokenB\\r\\n     * @return pair_ address of the pair created\\r\\n     */\\r\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_);\\r\\n\\r\\n    /**\\r\\n     * @notice set the address who will receive fees, can only be call by the owner\\r\\n     * @param _feeTo address to replace\\r\\n     */\\r\\n    function setFeeTo(address _feeTo) external;\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool for each new pair (onlyOwner)\\r\\n     * @notice sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadffd220721bcff23b4bda9ac128c1e1dd70df26dd8abdb041df12012993da31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice callback data for mint\\r\\n     * @param token0 address of the first token of the pair\\r\\n     * @param token1 address of the second token of the pair\\r\\n     * @param amount0 amount of token0 to provide\\r\\n     * @param amount1 amount of token1 to provide\\r\\n     * @param payer address of the payer to provide token for the mint\\r\\n     */\\r\\n    struct MintCallbackData {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 amount0;\\r\\n        uint256 amount1;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback to implement when calling SmardexPair.mint\\r\\n     * @param _data callback data for mint\\r\\n     */\\r\\n    function smardexMintCallback(MintCallbackData calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x977073d28b3e0a3c25812d0ae9995d0f3dc90334f5e21bce53f34d570f2caf3b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/interfaces/ISmardexPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\n\\r\\ninterface ISmardexPair is IERC20, IERC20Permit {\\r\\n    /**\\r\\n     * @notice swap parameters used by function swap\\r\\n     * @param amountCalculated return amount from getAmountIn/Out is always positive but to avoid too much cast, is int\\r\\n     * @param fictiveReserveIn fictive reserve of the in-token of the pair\\r\\n     * @param fictiveReserveOut fictive reserve of the out-token of the pair\\r\\n     * @param priceAverageIn in-token ratio component of the price average\\r\\n     * @param priceAverageOut out-token ratio component of the price average\\r\\n     * @param token0 address of the token0\\r\\n     * @param token1 address of the token1\\r\\n     * @param balanceIn contract balance of the in-token\\r\\n     * @param balanceOut contract balance of the out-token\\r\\n     */\\r\\n    struct SwapParams {\\r\\n        int256 amountCalculated;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 balanceIn;\\r\\n        uint256 balanceOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each mint\\r\\n     * @param sender address calling the mint function (usually the Router contract)\\r\\n     * @param to address that receives the LP-tokens\\r\\n     * @param amount0 amount of token0 to be added in liquidity\\r\\n     * @param amount1 amount of token1 to be added in liquidity\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each burn\\r\\n     * @param sender address calling the burn function (usually the Router contract)\\r\\n     * @param to address that receives the tokens\\r\\n     * @param amount0 amount of token0 to be withdrawn\\r\\n     * @param amount1 amount of token1 to be withdrawn\\r\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\r\\n     */\\r\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each swap\\r\\n     * @param sender address calling the swap function (usually the Router contract)\\r\\n     * @param to address that receives the out-tokens\\r\\n     * @param amount0 amount of token0 to be swapped\\r\\n     * @param amount1 amount of token1 to be swapped\\r\\n     * @dev one of the 2 amount is always negative, the other one is always positive. The positive one is the one that\\r\\n     * the user send to the contract, the negative one is the one that the contract send to the user.\\r\\n     */\\r\\n    event Swap(address indexed sender, address indexed to, int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time the fictive reserves are changed (mint, burn, swap)\\r\\n     * @param reserve0 the new reserve of token0\\r\\n     * @param reserve1 the new reserve of token1\\r\\n     * @param fictiveReserve0 the new fictive reserve of token0\\r\\n     * @param fictiveReserve1 the new fictive reserve of token1\\r\\n     * @param priceAverage0 the new priceAverage of token0\\r\\n     * @param priceAverage1 the new priceAverage of token1\\r\\n     */\\r\\n    event Sync(\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 fictiveReserve0,\\r\\n        uint256 fictiveReserve1,\\r\\n        uint256 priceAverage0,\\r\\n        uint256 priceAverage1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice emitted each time feesLP and feesPool are changed\\r\\n     * @param feesLP new feesLP\\r\\n     * @param feesPool new feesPool\\r\\n     */\\r\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\r\\n\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token0 address\\r\\n     * @return address of the token0\\r\\n     */\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get the token1 address\\r\\n     * @return address of the token1\\r\\n     */\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice called once by the factory at time of deployment\\r\\n     * @param _token0 address of token0\\r\\n     * @param _token1 address of token1\\r\\n     * @param _feesLP uint128 feesLP numerator\\r\\n     * @param _feesPool uint128 feesPool numerator\\r\\n     */\\r\\n    function initialize(address _token0, address _token1, uint128 _feesLP, uint128 _feesPool) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return current Reserves of both token in the pair,\\r\\n     *  corresponding to token balance - pending fees\\r\\n     * @return reserve0_ current reserve of token0 - pending fee0\\r\\n     * @return reserve1_ current reserve of token1 - pending fee1\\r\\n     */\\r\\n    function getReserves() external view returns (uint256 reserve0_, uint256 reserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current fictive reserves of both token in the pair\\r\\n     * @return fictiveReserve0_ current fictive reserve of token0\\r\\n     * @return fictiveReserve1_ current fictive reserve of token1\\r\\n     */\\r\\n    function getFictiveReserves() external view returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current pending fees of both token in the pair\\r\\n     * @return fees0_ current pending fees of token0\\r\\n     * @return fees1_ current pending fees of token1\\r\\n     */\\r\\n    function getFeeToAmounts() external view returns (uint256 fees0_, uint256 fees1_);\\r\\n\\r\\n    /**\\r\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\r\\n     * @return feesLP_ numerator of fees sent to LP\\r\\n     * @return feesPool_ numerator of fees sent to Pool\\r\\n     */\\r\\n    function getPairFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\r\\n\\r\\n    /**\\r\\n     * @notice return last updated price average at timestamp of both token in the pair,\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @return priceAverage0_ current price for token0\\r\\n     * @return priceAverage1_ current price for token1\\r\\n     * @return blockTimestampLast_ last block timestamp when price was updated\\r\\n     */\\r\\n    function getPriceAverage()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 blockTimestampLast_);\\r\\n\\r\\n    /**\\r\\n     * @notice return current price average of both token in the pair for provided currentTimeStamp\\r\\n     *  read price0Average/price1Average for current price of token0/token1\\r\\n     * @param _fictiveReserveIn,\\r\\n     * @param _fictiveReserveOut,\\r\\n     * @param _priceAverageLastTimestamp,\\r\\n     * @param _priceAverageIn current price for token0\\r\\n     * @param _priceAverageOut current price for token1\\r\\n     * @param _currentTimestamp block timestamp to get price\\r\\n     * @return priceAverageIn_ current price for token0\\r\\n     * @return priceAverageOut_ current price for token1\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) external pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint lp tokens proportionally of added tokens in balance. Should be called from a contract\\r\\n     * that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive minted tokens\\r\\n     * @param _amount0 amount of token0 to provide\\r\\n     * @param _amount1 amount of token1 to provide\\r\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _amount0,\\r\\n        uint256 _amount1,\\r\\n        address _payer\\r\\n    ) external returns (uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\r\\n     * token1 proportionally of the amount burned. Should be called from a contract that makes safety checks like the\\r\\n     * SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\r\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\r\\n     */\\r\\n    function burn(address _to) external returns (uint256 amount0_, uint256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps tokens. Sends to the defined address the amount of token0 and token1 defined in parameters.\\r\\n     * Tokens to trade should be already sent in the contract.\\r\\n     * Swap function will check if the resulted balance is correct with current reserves and reserves fictive.\\r\\n     * Should be called from a contract that makes safety checks like the SmardexRouter\\r\\n     * @param _to address who will receive tokens\\r\\n     * @param _zeroForOne token0 to token1\\r\\n     * @param _amountSpecified amount of token wanted\\r\\n     * @param _data used for flash swap, data.length must be 0 for regular swap\\r\\n     */\\r\\n    function swap(\\r\\n        address _to,\\r\\n        bool _zeroForOne,\\r\\n        int256 _amountSpecified,\\r\\n        bytes calldata _data\\r\\n    ) external returns (int256 amount0_, int256 amount1_);\\r\\n\\r\\n    /**\\r\\n     * @notice set feesLP and feesPool of the pair\\r\\n     * @notice sum of new feesLp and feesPool must be <= 100_000\\r\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\r\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\r\\n     */\\r\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe0ee503851666f03f283bf91c3ff399bfb3e610b75ed225974e9b25243ea9f75\",\"license\":\"GPL-3.0-or-later\"},\"contracts/core/interfaces/ISmardexSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\ninterface ISmardexSwapCallback {\\r\\n    /**\\r\\n     * @notice callback data for swap from SmardexRouter\\r\\n     * @param path path of the swap, array of token addresses tightly packed\\r\\n     * @param payer address of the payer for the swap\\r\\n     */\\r\\n    struct SwapCallbackData {\\r\\n        bytes path;\\r\\n        address payer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice callback data for swap\\r\\n     * @param _amount0Delta amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _amount1Delta amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\\r\\n     * @param _data for Router path and payer for the swap (see router for details)\\r\\n     */\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x19dee8a83b6c55ff9a4f62aac5ec820140ea09ed6db85511c7c20c6f87977e8e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/core/libraries/SmardexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\nlibrary SmardexLibrary {\\r\\n    /// @notice base of the FEES\\r\\n    uint256 public constant FEES_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice max fees of feesLP and feesPool sum, 10% FEES_BASE\\r\\n    uint256 public constant FEES_MAX = FEES_BASE / 10;\\r\\n\\r\\n    /// @notice precision for approxEq, not in percent but in APPROX_PRECISION_BASE\\r\\n    uint256 public constant APPROX_PRECISION = 1;\\r\\n\\r\\n    /// @notice base of the APPROX_PRECISION\\r\\n    uint256 public constant APPROX_PRECISION_BASE = 1_000_000;\\r\\n\\r\\n    /// @notice number of seconds to reset priceAverage\\r\\n    uint256 private constant MAX_BLOCK_DIFF_SECONDS = 300;\\r\\n\\r\\n    /// @notice parameters of getAmountIn and getAmountOut\\r\\n    struct GetAmountParameters {\\r\\n        uint256 amount;\\r\\n        uint256 reserveIn;\\r\\n        uint256 reserveOut;\\r\\n        uint256 fictiveReserveIn;\\r\\n        uint256 fictiveReserveOut;\\r\\n        uint256 priceAverageIn;\\r\\n        uint256 priceAverageOut;\\r\\n        uint128 feesLP;\\r\\n        uint128 feesPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 numbers are approximately equal, using APPROX_PRECISION\\r\\n     * @param _x number to compare\\r\\n     * @param _y number to compare\\r\\n     * @return true if numbers are approximately equal, false otherwise\\r\\n     */\\r\\n    function approxEq(uint256 _x, uint256 _y) internal pure returns (bool) {\\r\\n        if (_x > _y) {\\r\\n            return _x < (_y + (_y * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        } else {\\r\\n            return _y < (_x + (_x * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check if 2 ratio are approximately equal: _xNum _/ xDen ~= _yNum / _yDen\\r\\n     * @param _xNum numerator of the first ratio to compare\\r\\n     * @param _xDen denominator of the first ratio to compare\\r\\n     * @param _yNum numerator of the second ratio to compare\\r\\n     * @param _yDen denominator of the second ratio to compare\\r\\n     * @return true if ratio are approximately equal, false otherwise\\r\\n     */\\r\\n    function ratioApproxEq(uint256 _xNum, uint256 _xDen, uint256 _yNum, uint256 _yDen) internal pure returns (bool) {\\r\\n        return approxEq(_xNum * _yDen, _xDen * _yNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice update priceAverage given old timestamp, new timestamp and prices\\r\\n     * @param _fictiveReserveIn ratio component of the new price of the in-token\\r\\n     * @param _fictiveReserveOut ratio component of the new price of the out-token\\r\\n     * @param _priceAverageLastTimestamp timestamp of the last priceAverage update (0, if never updated)\\r\\n     * @param _priceAverageIn ratio component of the last priceAverage of the in-token\\r\\n     * @param _priceAverageOut ratio component of the last priceAverage of the out-token\\r\\n     * @param _currentTimestamp timestamp of the priceAverage to update\\r\\n     * @return newPriceAverageIn_ ratio component of the updated priceAverage of the in-token\\r\\n     * @return newPriceAverageOut_ ratio component of the updated priceAverage of the out-token\\r\\n     */\\r\\n    function getUpdatedPriceAverage(\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut,\\r\\n        uint256 _priceAverageLastTimestamp,\\r\\n        uint256 _priceAverageIn,\\r\\n        uint256 _priceAverageOut,\\r\\n        uint256 _currentTimestamp\\r\\n    ) internal pure returns (uint256 newPriceAverageIn_, uint256 newPriceAverageOut_) {\\r\\n        require(_currentTimestamp >= _priceAverageLastTimestamp, \\\"SmardexPair: INVALID_TIMESTAMP\\\");\\r\\n\\r\\n        // very first time\\r\\n        if (_priceAverageLastTimestamp == 0) {\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ = _fictiveReserveOut;\\r\\n        }\\r\\n        // another tx has been done in the same timestamp\\r\\n        else if (_priceAverageLastTimestamp == _currentTimestamp) {\\r\\n            newPriceAverageIn_ = _priceAverageIn;\\r\\n            newPriceAverageOut_ = _priceAverageOut;\\r\\n        }\\r\\n        // need to compute new linear-average price\\r\\n        else {\\r\\n            // compute new price:\\r\\n            uint256 _timeDiff = Math.min(_currentTimestamp - _priceAverageLastTimestamp, MAX_BLOCK_DIFF_SECONDS);\\r\\n\\r\\n            newPriceAverageIn_ = _fictiveReserveIn;\\r\\n            newPriceAverageOut_ =\\r\\n                (((MAX_BLOCK_DIFF_SECONDS - _timeDiff) * _priceAverageOut * newPriceAverageIn_) /\\r\\n                    _priceAverageIn +\\r\\n                    _timeDiff *\\r\\n                    _fictiveReserveOut) /\\r\\n                MAX_BLOCK_DIFF_SECONDS;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountIn so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountIn_ the first amount of in-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountIn\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountIn_ will be set to _amountIn\\r\\n     */\\r\\n    function computeFirstTradeQtyIn(GetAmountParameters memory _param) internal pure returns (uint256 firstAmountIn_) {\\r\\n        // default value\\r\\n        firstAmountIn_ = _param.amount;\\r\\n\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _toSub = _param.fictiveReserveIn * ((FEES_BASE * 2) - (_param.feesPool * 2) - _param.feesLP);\\r\\n            uint256 _toDiv = (FEES_BASE - _param.feesPool) * 2;\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveIn * _param.fictiveReserveOut) * 4) / _param.priceAverageOut) *\\r\\n                _param.priceAverageIn *\\r\\n                ((FEES_BASE - _param.feesPool - _param.feesLP) * (FEES_BASE - _param.feesPool)) +\\r\\n                ((_param.fictiveReserveIn * _param.fictiveReserveIn) * (_param.feesLP * _param.feesLP));\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toSub + _param.amount * _toDiv;\\r\\n            if (_inSqrt < _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountIn_ = (Math.sqrt(_inSqrt) - _toSub) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the firstTradeAmountOut so that the price reach the price Average\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return firstAmountOut_ the first amount of out-token\\r\\n     *\\r\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountOut\\r\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\r\\n     * firstAmountOut_ will be set to _amountOut\\r\\n     */\\r\\n    function computeFirstTradeQtyOut(\\r\\n        GetAmountParameters memory _param\\r\\n    ) internal pure returns (uint256 firstAmountOut_) {\\r\\n        // default value\\r\\n        firstAmountOut_ = _param.amount;\\r\\n        uint256 _reverseFeesTotal = FEES_BASE - _param.feesPool - _param.feesLP;\\r\\n        // if trade is in the good direction\\r\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\r\\n            // pre-compute all operands\\r\\n            uint256 _fictiveReserveOutPredFees = (_param.fictiveReserveIn * _param.feesLP * _param.priceAverageOut) /\\r\\n                _param.priceAverageIn;\\r\\n            uint256 _toAdd = ((_param.fictiveReserveOut * _reverseFeesTotal) * 2) + _fictiveReserveOutPredFees;\\r\\n            uint256 _toDiv = _reverseFeesTotal * 2;\\r\\n\\r\\n            uint256 _inSqrt = (((_param.fictiveReserveOut * _fictiveReserveOutPredFees) * 4) *\\r\\n                (_reverseFeesTotal * (FEES_BASE - _param.feesPool))) /\\r\\n                _param.feesLP +\\r\\n                (_fictiveReserveOutPredFees * _fictiveReserveOutPredFees);\\r\\n\\r\\n            // reverse sqrt check to only compute sqrt if really needed\\r\\n            uint256 _inSqrtCompare = _toAdd - _param.amount * _toDiv;\\r\\n            if (_inSqrt > _inSqrtCompare * _inSqrtCompare) {\\r\\n                firstAmountOut_ = (_toAdd - Math.sqrt(_inSqrt)) / _toDiv;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute fictive reserves\\r\\n     * @param _reserveIn reserve of the in-token\\r\\n     * @param _reserveOut reserve of the out-token\\r\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\r\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token\\r\\n     */\\r\\n    function computeFictiveReserves(\\r\\n        uint256 _reserveIn,\\r\\n        uint256 _reserveOut,\\r\\n        uint256 _fictiveReserveIn,\\r\\n        uint256 _fictiveReserveOut\\r\\n    ) internal pure returns (uint256 newFictiveReserveIn_, uint256 newFictiveReserveOut_) {\\r\\n        if (_reserveOut * _fictiveReserveIn < _reserveIn * _fictiveReserveOut) {\\r\\n            uint256 _temp = (((_reserveOut * _reserveOut) / _fictiveReserveOut) * _fictiveReserveIn) / _reserveIn;\\r\\n            newFictiveReserveIn_ =\\r\\n                (_temp * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut +\\r\\n                (_reserveOut * _fictiveReserveIn) /\\r\\n                _fictiveReserveOut;\\r\\n            newFictiveReserveOut_ = _reserveOut + _temp;\\r\\n        } else {\\r\\n            newFictiveReserveIn_ = (_fictiveReserveIn * _reserveOut) / _fictiveReserveOut + _reserveIn;\\r\\n            newFictiveReserveOut_ = (_reserveIn * _fictiveReserveOut) / _fictiveReserveIn + _reserveOut;\\r\\n        }\\r\\n\\r\\n        // div all values by 4\\r\\n        newFictiveReserveIn_ /= 4;\\r\\n        newFictiveReserveOut_ /= 4;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountIn is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ qty of token that leaves in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _amountInWithFee = _param.amount * (FEES_BASE - _param.feesLP - _param.feesPool);\\r\\n        uint256 _numerator = _amountInWithFee * _param.fictiveReserveOut;\\r\\n        uint256 _denominator = _param.fictiveReserveIn * FEES_BASE + _amountInWithFee;\\r\\n        amountOut_ = _numerator / _denominator;\\r\\n\\r\\n        // update new reserves and add lp-fees to pools\\r\\n        uint256 _amountInWithFeeLp = (_amountInWithFee + (_param.amount * _param.feesLP)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - amountOut_;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - amountOut_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice apply k const rule using fictive reserve, when the amountOut is specified\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ qty of token that arrives in the contract\\r\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\r\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\r\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\r\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\r\\n     */\\r\\n    function applyKConstRuleIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        // k const rule\\r\\n        uint256 _numerator = _param.fictiveReserveIn * _param.amount * FEES_BASE;\\r\\n        uint256 _denominator = (_param.fictiveReserveOut - _param.amount) *\\r\\n            (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n        amountIn_ = _numerator / _denominator + 1;\\r\\n\\r\\n        // update new reserves\\r\\n        uint256 _amountInWithFeeLp = (amountIn_ * (FEES_BASE - _param.feesPool)) / FEES_BASE;\\r\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\r\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\r\\n        newReserveOut_ = _param.reserveOut - _param.amount;\\r\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - _param.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _amountInWithFees = (_param.amount * (FEES_BASE - _param.feesPool - _param.feesLP)) / FEES_BASE;\\r\\n        uint256 _firstAmountIn = computeFirstTradeQtyIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _amountInWithFees,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountIn == _amountInWithFees &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // avoid stack too deep\\r\\n        {\\r\\n            uint256 _firstAmountInNoFees = (_firstAmountIn * FEES_BASE) / (FEES_BASE - _param.feesPool - _param.feesLP);\\r\\n            (\\r\\n                amountOut_,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _firstAmountInNoFees,\\r\\n                    reserveIn: _param.reserveIn,\\r\\n                    reserveOut: _param.reserveOut,\\r\\n                    fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                    fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n\\r\\n            // update amountIn in case there is a second trade\\r\\n            _param.amount -= _firstAmountInNoFees;\\r\\n        }\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountIn < _amountInWithFees) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountOutNoFees;\\r\\n            (\\r\\n                _secondAmountOutNoFees,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleOut(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountOut_ += _secondAmountOutNoFees;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _param contain all params required from struct GetAmountParameters\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        GetAmountParameters memory _param\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        )\\r\\n    {\\r\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            _param.amount < _param.fictiveReserveOut &&\\r\\n                _param.reserveIn != 0 &&\\r\\n                _param.reserveOut != 0 &&\\r\\n                _param.fictiveReserveIn != 0 &&\\r\\n                _param.fictiveReserveOut != 0,\\r\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _firstAmountOut = computeFirstTradeQtyOut(_param);\\r\\n\\r\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\r\\n        if (\\r\\n            _firstAmountOut == _param.amount &&\\r\\n            ratioApproxEq(\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut,\\r\\n                _param.priceAverageIn,\\r\\n                _param.priceAverageOut\\r\\n            )\\r\\n        ) {\\r\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\r\\n                _param.reserveIn,\\r\\n                _param.reserveOut,\\r\\n                _param.fictiveReserveIn,\\r\\n                _param.fictiveReserveOut\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = applyKConstRuleIn(\\r\\n            SmardexLibrary.GetAmountParameters({\\r\\n                amount: _firstAmountOut,\\r\\n                reserveIn: _param.reserveIn,\\r\\n                reserveOut: _param.reserveOut,\\r\\n                fictiveReserveIn: _param.fictiveReserveIn,\\r\\n                fictiveReserveOut: _param.fictiveReserveOut,\\r\\n                priceAverageIn: _param.priceAverageIn,\\r\\n                priceAverageOut: _param.priceAverageOut,\\r\\n                feesLP: _param.feesLP,\\r\\n                feesPool: _param.feesPool\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // if we need a second trade\\r\\n        if (_firstAmountOut < _param.amount) {\\r\\n            // in the second trade ALWAYS recompute fictive reserves\\r\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            );\\r\\n\\r\\n            uint256 _secondAmountIn;\\r\\n            (\\r\\n                _secondAmountIn,\\r\\n                newReserveIn_,\\r\\n                newReserveOut_,\\r\\n                newFictiveReserveIn_,\\r\\n                newFictiveReserveOut_\\r\\n            ) = applyKConstRuleIn(\\r\\n                SmardexLibrary.GetAmountParameters({\\r\\n                    amount: _param.amount - _firstAmountOut,\\r\\n                    reserveIn: newReserveIn_,\\r\\n                    reserveOut: newReserveOut_,\\r\\n                    fictiveReserveIn: newFictiveReserveIn_,\\r\\n                    fictiveReserveOut: newFictiveReserveOut_,\\r\\n                    priceAverageIn: _param.priceAverageIn,\\r\\n                    priceAverageOut: _param.priceAverageOut,\\r\\n                    feesLP: _param.feesLP,\\r\\n                    feesPool: _param.feesPool\\r\\n                })\\r\\n            );\\r\\n            amountIn_ += _secondAmountIn;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda58b880f4a83cfa5bbf6bf17c5c4145f18e311c048f6c3a50da7cb1bc75333b\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/interfaces/ISmardexRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../../core/interfaces/ISmardexSwapCallback.sol\\\";\\r\\nimport \\\"../../core/interfaces/ISmardexMintCallback.sol\\\";\\r\\nimport \\\"../../core/libraries/SmardexLibrary.sol\\\";\\r\\n\\r\\ninterface ISmardexRouter is ISmardexSwapCallback, ISmardexMintCallback {\\r\\n    /**\\r\\n     * @notice get the factory address\\r\\n     * @return address of the factory\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice get WETH address\\r\\n     * @return address of the WETH token (Wrapped Ether)\\r\\n     */\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\\r\\n     * @param _tokenA address of the first token in the pair\\r\\n     * @param _tokenB address of the second token in the pair\\r\\n     * @param _amountADesired The amount of tokenA to add as liquidity\\r\\n     * if the B/A price is <= amountBDesired/amountADesired\\r\\n     * @param _amountBDesired The amount of tokenB to add as liquidity\\r\\n     * if the A/B price is <= amountADesired/amountBDesired\\r\\n     * @param _amountAMin Bounds the extent to which the B/A price can go up before the transaction reverts.\\r\\n     * Must be <= amountADesired.\\r\\n     * @param _amountBMin Bounds the extent to which the A/B price can go up before the transaction reverts.\\r\\n     * Must be <= amountBDesired.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountA_ The amount of tokenA sent to the pool.\\r\\n     * @return amountB_ The amount of tokenB sent to the pool.\\r\\n     * @return liquidity_ The amount of liquidity tokens minted.\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _amountADesired,\\r\\n        uint256 _amountBDesired,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_, uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds liquidity to an ERC-20=WETH pool with ETH. msg.value is the amount of ETH to add as liquidity.\\r\\n     * if the token/WETH price is <= amountTokenDesired/msg.value (WETH depreciates).\\r\\n     * @param _token A pool token.\\r\\n     * @param _amountTokenDesired The amount of token to add as liquidity if the WETH/token price\\r\\n     * is <= msg.value/amountTokenDesired (token depreciates).\\r\\n     * @param _amountTokenMin Bounds the extent to which the WETH/token price can go up before the transaction reverts.\\r\\n     * Must be <= amountTokenDesired.\\r\\n     * @param _amountETHMin Bounds the extent to which the token/WETH price can go up before the transaction reverts.\\r\\n     * Must be <= msg.value.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountToken_ The amount of token sent to the pool.\\r\\n     * @return amountETH_ The amount of ETH converted to WETH and sent to the pool.\\r\\n     * @return liquidity_ The amount of liquidity tokens minted.\\r\\n     */\\r\\n    function addLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _amountTokenDesired,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountToken_, uint256 amountETH_, uint256 liquidity_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=ERC-20 pool.\\r\\n     * @param _tokenA A pool token.\\r\\n     * @param _tokenB A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\r\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountA_ The amount of tokenA received.\\r\\n     * @return amountB_ The amount of tokenB received.\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\r\\n     * @param _token A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\r\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountToken_ The amount of token received.\\r\\n     * @return amountETH_ The amount of ETH received.\\r\\n     */\\r\\n    function removeLiquidityETH(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\r\\n     * @param _tokenA A pool token.\\r\\n     * @param _tokenB A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\r\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     * @return amountA_ The amount of tokenA received.\\r\\n     * @return amountB_ The amount of tokenB received.\\r\\n     */\\r\\n    function removeLiquidityWithPermit(\\r\\n        address _tokenA,\\r\\n        address _tokenB,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountAMin,\\r\\n        uint256 _amountBMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH without pre-approval\\r\\n     * @param _token A pool token.\\r\\n     * @param _liquidity The amount of liquidity tokens to remove.\\r\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\r\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\r\\n     * @param _to Recipient of the liquidity tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     * @return amountToken_ The amount of token received.\\r\\n     * @return amountETH_ The amount of ETH received.\\r\\n     */\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address _token,\\r\\n        uint256 _liquidity,\\r\\n        uint256 _amountTokenMin,\\r\\n        uint256 _amountETHMin,\\r\\n        address _to,\\r\\n        uint256 _deadline,\\r\\n        bool _approveMax,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined\\r\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\r\\n     * elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountIn The amount of input tokens to send.\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The output token amount.\\r\\n     */\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible, along the route determined\\r\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\r\\n     * elements represent intermediate tokens to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOut The amount of output tokens to receive.\\r\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the\\r\\n     * path. The first element of path must be WETH, the last is the output token, and any intermediate elements\\r\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of the output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The input token amount.\\r\\n     */\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of ETH for as few input tokens as possible, along the route determined by the\\r\\n     * path. The first element of path is the input token, the last must be WETH, and any intermediate elements\\r\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountOut The amount of ETH to receive.\\r\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of ETH.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 _amountOut,\\r\\n        uint256 _amountInMax,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path.\\r\\n     * The first element of path is the input token, the last must be WETH, and any intermediate elements represent\\r\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * @param _amountIn The amount of input tokens to send.\\r\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of ETH.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountOut_ The input token amount.\\r\\n     */\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 _amountIn,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 amountOut_);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of tokens for as little ETH as possible, along the route determined by the path.\\r\\n     * The first element of path must be WETH, the last is the output token and any intermediate elements represent\\r\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\r\\n     * msg.value The maximum amount of ETH that can be required before the transaction reverts.\\r\\n     * @param _amountOut The amount of tokens to receive.\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity.\\r\\n     * @param _to Recipient of output tokens.\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @return amountIn_ The input token amount.\\r\\n     */\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 _amountOut,\\r\\n        address[] calldata _path,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external payable returns (uint256 amountIn_);\\r\\n\\r\\n    /**\\r\\n     * @notice Given some asset amount and reserves, returns an amount of the other asset representing equivalent value.\\r\\n     */\\r\\n    function quote(\\r\\n        uint256 _amountA,\\r\\n        uint256 _fictiveReserveA,\\r\\n        uint256 _fictiveReserveB\\r\\n    ) external pure returns (uint256 amountB_);\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user would get by doing a swap\\r\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOut(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap\\r\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountIn(\\r\\n        SmardexLibrary.GetAmountParameters memory _param\\r\\n    )\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\r\\n     *              fetching data from the pair tokenIn/tokenOut\\r\\n     * @param _amountIn quantity of token the user want to swap (to buy)\\r\\n     * @param _tokenIn address of the token the user want to sell\\r\\n     * @param _tokenOut address of the token the user want to buy\\r\\n     * @return amountOut_ The amount of token the user would receive\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountOutFromPair(\\r\\n        uint256 _amountIn,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountOut_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\r\\n     *              fetching data from the pair tokenIn/tokenOut\\r\\n     * @param _amountOut quantity of token the user want to swap (to sell)\\r\\n     * @param _tokenIn address of the token the user want to sell\\r\\n     * @param _tokenOut address of the token the user want to buy\\r\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\r\\n     * @return newReserveIn_ reserves of the selling token after the swap\\r\\n     * @return newReserveOut_ reserves of the buying token after the swap\\r\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\r\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\r\\n     */\\r\\n    function getAmountInFromPair(\\r\\n        uint256 _amountOut,\\r\\n        address _tokenIn,\\r\\n        address _tokenOut\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amountIn_,\\r\\n            uint256 newReserveIn_,\\r\\n            uint256 newReserveOut_,\\r\\n            uint256 newFictiveReserveIn_,\\r\\n            uint256 newFictiveReserveOut_\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x22733781dfec10071d3869814f07fe3b5cdaa65fffb887fc1f5cf9551dd5afef\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n * @custom:url https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\nlibrary BytesLib {\\r\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n                // Get a location of some free memory and store it in tempBytes as\\r\\n                // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n                // The first word of the slice result is potentially a partial\\r\\n                // word read from the original array. To read it, we calculate\\r\\n                // the length of that partial word and start copying that many\\r\\n                // bytes into the array. The first word we copy will start with\\r\\n                // data we don't care about, but the last `lengthmod` bytes will\\r\\n                // land at the beginning of the contents of the new array. When\\r\\n                // we're done copying, we overwrite the full first word with\\r\\n                // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n                // The multiplication in the next line is necessary\\r\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                // the following copy loop was copying the origin's length\\r\\n                // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                    // The multiplication in the next line has the same exact purpose\\r\\n                    // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n                //update free-memory pointer\\r\\n                //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n                //zero out the 32 bytes slice we are about to return\\r\\n                //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c54f1a1198067e6207f02ca6e947cba516d2524cce6ae2e6fe99b998c53cffe\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"./BytesLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Functions for manipulating path data for multihop swaps\\r\\n * @custom:from UniswapV3\\r\\n * @custom:url https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\r\\n * @custom:editor SmarDex team\\r\\n */\\r\\nlibrary Path {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    /// @dev The length of the bytes encoded address\\r\\n    uint256 private constant ADDR_SIZE = 20;\\r\\n\\r\\n    /// @dev The offset of a single token address\\r\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE;\\r\\n    /// @dev The offset of an encoded pool key\\r\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\r\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\r\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\r\\n\\r\\n    /// @notice Returns true if the path contains two or more pools\\r\\n    /// @param path The encoded swap path\\r\\n    /// @return True if path contains two or more pools, otherwise false\\r\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\r\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of pools in the path\\r\\n    /// @param _path The encoded swap path\\r\\n    /// @return The number of pools in the path\\r\\n    function numPools(bytes memory _path) internal pure returns (uint256) {\\r\\n        return ((_path.length - ADDR_SIZE) / NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes the first pool in path\\r\\n    /// @param _path The bytes encoded swap path\\r\\n    /// @return tokenA_ The first token of the given pool\\r\\n    /// @return tokenB_ The second token of the given pool\\r\\n    function decodeFirstPool(bytes memory _path) internal pure returns (address tokenA_, address tokenB_) {\\r\\n        tokenA_ = _path.toAddress(0);\\r\\n        tokenB_ = _path.toAddress(NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the segment corresponding to the first pool in the path\\r\\n    /// @param _path The bytes encoded swap path\\r\\n    /// @return The segment containing all data necessary to target the first pool in the path\\r\\n    function getFirstPool(bytes memory _path) internal pure returns (bytes memory) {\\r\\n        return _path.slice(0, POP_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Skips a token from the buffer and returns the remainder\\r\\n    /// @param _path The swap path\\r\\n    /// @return The remaining token elements in the path\\r\\n    function skipToken(bytes memory _path) internal pure returns (bytes memory) {\\r\\n        return _path.slice(NEXT_OFFSET, _path.length - NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the _path addresses concatenated as a packed bytes array\\r\\n    /// @param _path The swap path\\r\\n    /// @return encoded_ The bytes array containing the packed addresses\\r\\n    function encodeTightlyPacked(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\r\\n        uint256 len = _path.length;\\r\\n        for (uint256 i; i != len; ) {\\r\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i]));\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the _path addresses concatenated in a reversed order as a packed bytes array\\r\\n    /// @param _path The swap path\\r\\n    /// @return encoded_ The bytes array containing the packed addresses\\r\\n    function encodeTightlyPackedReversed(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\r\\n        uint256 len = _path.length;\\r\\n        for (uint256 i = len; i != 0; ) {\\r\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i - 1]));\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae1769066fcf25ef5cedba17a6de86b133ea84c781c2eaa7c23582d46dc64923\",\"license\":\"GPL-2.0-or-later\"},\"contracts/rewards/AutoSwapperL2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../core/libraries/SmardexLibrary.sol\\\";\\r\\nimport \\\"../periphery/libraries/Path.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"../periphery/interfaces/ISmardexRouter.sol\\\";\\r\\nimport \\\"../core/interfaces/ISmardexPair.sol\\\";\\r\\nimport \\\"./interfaces/IAutoSwapper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AutoSwapper\\r\\n * @notice AutoSwapper makes it automatic and/or public to get fees from Smardex and burn it\\r\\n */\\r\\ncontract AutoSwapperL2 is IAutoSwapper, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeCast for uint256;\\r\\n    using SafeCast for int256;\\r\\n    using Path for bytes;\\r\\n\\r\\n    bytes4 private constant SWAP_SELECTOR = bytes4(keccak256(bytes(\\\"swap(address,bool,int256,bytes)\\\")));\\r\\n    uint256 private constant AUTOSWAP_SLIPPAGE = 2; // 2%\\r\\n    uint256 private constant AUTOSWAP_SLIPPAGE_BASE = 100;\\r\\n\\r\\n    // burn address 0x000000000000000000000000000000000000dEaD\\r\\n    address private constant DEAD_ADR = address(0xdead);\\r\\n\\r\\n    ISmardexFactory public immutable factory;\\r\\n    IERC20 public immutable smardexToken;\\r\\n\\r\\n    ISmardexPair private constant DEFAULT_CACHED_PAIR = ISmardexPair(address(0));\\r\\n    ISmardexPair private cachedPair = DEFAULT_CACHED_PAIR;\\r\\n\\r\\n    ISmardexRouter public immutable router;\\r\\n\\r\\n    constructor(ISmardexFactory _factory, IERC20 _smardexToken, ISmardexRouter _router) {\\r\\n        require(address(_factory) != address(0), \\\"AutoSwapper: INVALID_FACTORY_ADDRESS\\\");\\r\\n        require(address(_smardexToken) != address(0), \\\"AutoSwapper: INVALID_SDEX_ADDRESS\\\");\\r\\n\\r\\n        factory = _factory;\\r\\n        smardexToken = _smardexToken;\\r\\n        router = _router;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAutoSwapper\\r\\n    function executeWork(IERC20 _token0, IERC20 _token1) external {\\r\\n        uint256 _amount0 = _swapAndSend(_token0);\\r\\n        uint256 _amount1 = _swapAndSend(_token1);\\r\\n        uint256 _transferredAmount = transferTokens();\\r\\n\\r\\n        emit workExecuted(_token0, _amount0, _token1, _amount1, _transferredAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAutoSwapper\\r\\n    function swapTokenWithPath(\\r\\n        uint256 _amountToSwap,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        uint256 _deadline\\r\\n    ) external onlyOwner {\\r\\n        require(_path.length > 1, \\\"AutoSwapper: INVALID_PATH\\\");\\r\\n        require(_path[_path.length - 1] == address(smardexToken), \\\"AutoSwapper: INVALID_LAST_TOKEN\\\");\\r\\n        IERC20 _token = IERC20(_path[0]);\\r\\n\\r\\n        uint256 _balance = _token.balanceOf(address(this));\\r\\n        require(_amountToSwap <= _balance, \\\"AutoSwapper: INVALID_AMOUNT\\\");\\r\\n\\r\\n        uint256 _amountIn;\\r\\n        if (_amountToSwap != 0) _amountIn = _amountToSwap;\\r\\n        else _amountIn = _balance;\\r\\n        _token.safeApprove(address(router), _amountIn);\\r\\n\\r\\n        router.swapExactTokensForTokens(_amountIn, _amountOutMin, _path, DEAD_ADR, _deadline);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IAutoSwapper\\r\\n    function transferTokens() public returns (uint256 _amount) {\\r\\n        _amount = smardexToken.balanceOf(address(this));\\r\\n        if (_amount != 0) {\\r\\n            smardexToken.safeTransfer(DEAD_ADR, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice private function to swap token in SDEX and burn it\\r\\n     * @param _token address of the token to swap into sdex\\r\\n     * @return amount of input tokens swapped\\r\\n     */\\r\\n    function _swapAndSend(IERC20 _token) private returns (uint256) {\\r\\n        if (_token == smardexToken) {\\r\\n            return 0;\\r\\n        }\\r\\n        SwapCallParams memory _params = SwapCallParams({\\r\\n            zeroForOne: _token < smardexToken,\\r\\n            balanceIn: _token.balanceOf(address(this)),\\r\\n            pair: ISmardexPair(factory.getPair(address(_token), address(smardexToken))),\\r\\n            fictiveReserve0: 0,\\r\\n            fictiveReserve1: 0,\\r\\n            oldPriceAv0: 0,\\r\\n            oldPriceAv1: 0,\\r\\n            oldPriceAvTimestamp: 0,\\r\\n            newPriceAvIn: 0,\\r\\n            newPriceAvOut: 0\\r\\n        });\\r\\n\\r\\n        // basic check on input data\\r\\n        if (_params.balanceIn == 0 || address(_params.pair) == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // get reserves and pricesAv\\r\\n        (_params.fictiveReserve0, _params.fictiveReserve1) = _params.pair.getFictiveReserves();\\r\\n        (_params.oldPriceAv0, _params.oldPriceAv1, _params.oldPriceAvTimestamp) = _params.pair.getPriceAverage();\\r\\n\\r\\n        if (_params.oldPriceAv0 == 0 || _params.oldPriceAv1 == 0) {\\r\\n            (_params.oldPriceAv0, _params.oldPriceAv1) = (_params.fictiveReserve0, _params.fictiveReserve1);\\r\\n        }\\r\\n\\r\\n        if (_params.zeroForOne) {\\r\\n            (_params.newPriceAvIn, _params.newPriceAvOut) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n                _params.fictiveReserve0,\\r\\n                _params.fictiveReserve1,\\r\\n                _params.oldPriceAvTimestamp,\\r\\n                _params.oldPriceAv0,\\r\\n                _params.oldPriceAv1,\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            (_params.newPriceAvIn, _params.newPriceAvOut) = SmardexLibrary.getUpdatedPriceAverage(\\r\\n                _params.fictiveReserve1,\\r\\n                _params.fictiveReserve0,\\r\\n                _params.oldPriceAvTimestamp,\\r\\n                _params.oldPriceAv1,\\r\\n                _params.oldPriceAv0,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // we allow for 2% slippage from previous swaps in block\\r\\n        uint256 _amountOutWithSlippage = (_params.balanceIn *\\r\\n            _params.newPriceAvOut *\\r\\n            (AUTOSWAP_SLIPPAGE_BASE - AUTOSWAP_SLIPPAGE)) / (_params.newPriceAvIn * AUTOSWAP_SLIPPAGE_BASE);\\r\\n        require(_amountOutWithSlippage != 0, \\\"AutoSwapper: slippage calculation failed\\\");\\r\\n\\r\\n        cachedPair = _params.pair;\\r\\n\\r\\n        // we dont check for success as we dont want to revert the whole tx if the swap fails\\r\\n        (bool success, ) = address(_params.pair).call(\\r\\n            abi.encodeWithSelector(\\r\\n                SWAP_SELECTOR,\\r\\n                DEAD_ADR,\\r\\n                _token < smardexToken,\\r\\n                _params.balanceIn.toInt256(),\\r\\n                abi.encode(\\r\\n                    SwapCallbackData({ path: abi.encodePacked(_token, smardexToken), payer: address(this) }),\\r\\n                    _amountOutWithSlippage\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        cachedPair = DEFAULT_CACHED_PAIR;\\r\\n\\r\\n        return success ? _params.balanceIn : 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISmardexSwapCallback\\r\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _dataFromPair) external {\\r\\n        require(_amount0Delta > 0 || _amount1Delta > 0, \\\"SmardexRouter: Callback Invalid amount\\\");\\r\\n        (SwapCallbackData memory _data, uint256 _amountOutWithSlippage) = abi.decode(\\r\\n            _dataFromPair,\\r\\n            (SwapCallbackData, uint256)\\r\\n        );\\r\\n        (address _tokenIn, ) = _data.path.decodeFirstPool();\\r\\n        require(msg.sender == address(cachedPair), \\\"SmarDexRouter: INVALID_PAIR\\\"); // ensure that msg.sender is a pair\\r\\n        // ensure that the trade gives at least the minimum amount of output token (negative delta)\\r\\n        require(\\r\\n            (_amount0Delta < 0 ? uint256(-_amount0Delta) : (-_amount1Delta).toUint256()) >= _amountOutWithSlippage,\\r\\n            \\\"SmardexAutoSwapper: Invalid price\\\"\\r\\n        );\\r\\n        // send positive delta to pair\\r\\n        IERC20(_tokenIn).safeTransfer(\\r\\n            msg.sender,\\r\\n            _amount0Delta > 0 ? uint256(_amount0Delta) : _amount1Delta.toUint256()\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47775cd61cd0ff8bd3f7cf9544db8aacbdd3026506063fec7e2a4ec2e267dd0a\",\"license\":\"BUSL-1.1\"},\"contracts/rewards/interfaces/IAutoSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"../../core/interfaces/ISmardexFactory.sol\\\";\\r\\nimport \\\"../../core/interfaces/ISmardexSwapCallback.sol\\\";\\r\\nimport \\\"../../core/interfaces/ISmardexPair.sol\\\";\\r\\n\\r\\ninterface IAutoSwapper is ISmardexSwapCallback {\\r\\n    /**\\r\\n     * @notice swap parameters used by function _swapAndSend\\r\\n     * @param zeroForOne true if we swap the token0 with token1, false otherwise\\r\\n     * @param balanceIn balance of in-token to be swapped\\r\\n     * @param pair pair address\\r\\n     * @param fictiveReserve0 fictive reserve of token0 of the pair\\r\\n     * @param fictiveReserve1 fictive reserve of token1 of the pair\\r\\n     * @param oldPriceAv0 priceAverage of token0 of the pair before the swap\\r\\n     * @param oldPriceAv1 priceAverage of token1 of the pair before the swap\\r\\n     * @param oldPriceAvTimestamp priceAverageLastTimestamp of the pair before the swap\\r\\n     * @param newPriceAvIn priceAverage of token0 of the pair after the swap\\r\\n     * @param newPriceAvOut priceAverage of token1 of the pair after the swap\\r\\n     */\\r\\n    struct SwapCallParams {\\r\\n        bool zeroForOne;\\r\\n        uint256 balanceIn;\\r\\n        ISmardexPair pair;\\r\\n        uint256 fictiveReserve0;\\r\\n        uint256 fictiveReserve1;\\r\\n        uint256 oldPriceAv0;\\r\\n        uint256 oldPriceAv1;\\r\\n        uint256 oldPriceAvTimestamp;\\r\\n        uint256 newPriceAvIn;\\r\\n        uint256 newPriceAvOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted every time the AutoSwapper swaps and stacks SDEXs\\r\\n     * @param _token0 the first swapped token\\r\\n     * @param _amount0 the amount of token0 swapped\\r\\n     * @param _token1 the second swapped token\\r\\n     * @param _amount1 the amount of token1 swapped\\r\\n     * @param _stakedAmount the staked amount\\r\\n     */\\r\\n    event workExecuted(IERC20 _token0, uint256 _amount0, IERC20 _token1, uint256 _amount1, uint256 _stakedAmount);\\r\\n\\r\\n    /**\\r\\n     * @notice public function for executing swaps on tokens and burn, will be called from a\\r\\n     * Smardex Pair on mint and burn, and can be forced call by anyone\\r\\n     * @param _token0 token to be converted to sdex\\r\\n     * @param _token1 token to be converted to sdex\\r\\n     */\\r\\n    function executeWork(IERC20 _token0, IERC20 _token1) external;\\r\\n\\r\\n    /**\\r\\n     * @notice onlyOwner function to swap token in SDEX and send it to the staking address (or burn on L2)\\r\\n     * @param _amountToSwap amount of tokens from _path[0] to be converted into SDEX\\r\\n     * @param _amountOutMin The minimum SDEX amount required to prevent the transaction from reverting\\r\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\r\\n     * must exist and have liquidity. Last token must be SDEX\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert\\r\\n     */\\r\\n    function swapTokenWithPath(\\r\\n        uint256 _amountToSwap,\\r\\n        uint256 _amountOutMin,\\r\\n        address[] calldata _path,\\r\\n        uint256 _deadline\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice transfer SDEX from here to address dead\\r\\n     * @return _amount the transferred SDEX amount\\r\\n     */\\r\\n    function transferTokens() external returns (uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @notice return the factory address\\r\\n     * @return factory address\\r\\n     */\\r\\n    function factory() external view returns (ISmardexFactory);\\r\\n\\r\\n    /**\\r\\n     * @notice return the smardexToken address\\r\\n     * @return smardexToken address\\r\\n     */\\r\\n    function smardexToken() external view returns (IERC20);\\r\\n}\\r\\n\",\"keccak256\":\"0x156a66ad8d25c98a2041da591f4d1ae4f3532401b7740db250cc7efd95fe8821\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e0604052600180546001600160a01b03191690553480156200002157600080fd5b5060405162001d7a38038062001d7a8339810160408190526200004491620001a0565b6200004f3362000137565b6001600160a01b038316620000b75760405162461bcd60e51b8152602060048201526024808201527f4175746f537761707065723a20494e56414c49445f464143544f52595f4144446044820152635245535360e01b60648201526084015b60405180910390fd5b6001600160a01b038216620001195760405162461bcd60e51b815260206004820152602160248201527f4175746f537761707065723a20494e56414c49445f534445585f4144445245536044820152605360f81b6064820152608401620000ae565b6001600160a01b0392831660805290821660a0521660c052620001f4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200019d57600080fd5b50565b600080600060608486031215620001b657600080fd5b8351620001c38162000187565b6020850151909350620001d68162000187565b6040850151909250620001e98162000187565b809150509250925092565b60805160a05160c051611b0a6200027060003960008181610190015281816103cb015261040701526000818160eb01528181610219015281816104ae01528181610536015281816109f101528181610a4501528181610af301528181610eaa0152610efe0152600081816101560152610b210152611b0a6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461012d578063a1dab4eb1461013e578063c45a015514610151578063f2fde38b14610178578063f887ea401461018b57600080fd5b80630d8e329f146100a35780631792b0bc146100b85780633048c029146100d3578063670b3a0b146100e6578063715018a614610125575b600080fd5b6100b66100b1366004611578565b6101b2565b005b6100c0610496565b6040519081526020015b60405180910390f35b6100b66100e1366004611618565b610562565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ca565b6100b66105e9565b6000546001600160a01b031661010d565b6100b661014c366004611651565b6105fd565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b6100b66101863660046116e1565b61079d565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b6101ba610816565b6001821161020f5760405162461bcd60e51b815260206004820152601960248201527f4175746f537761707065723a20494e56414c49445f504154480000000000000060448201526064015b60405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610246600182611714565b81811061025557610255611727565b905060200201602081019061026a91906116e1565b6001600160a01b0316146102c05760405162461bcd60e51b815260206004820152601f60248201527f4175746f537761707065723a20494e56414c49445f4c4153545f544f4b454e006044820152606401610206565b6000838360008181106102d5576102d5611727565b90506020020160208101906102ea91906116e1565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610334573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610358919061173d565b9050808711156103aa5760405162461bcd60e51b815260206004820152601b60248201527f4175746f537761707065723a20494e56414c49445f414d4f554e5400000000006044820152606401610206565b600087156103b95750866103bc565b50805b6103f06001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000083610870565b6040516338ed173960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906104489084908b908b908b9061dead908c90600401611756565b6020604051808303816000875af1158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b919061173d565b505050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610521919061173d565b9050801561055f5761055f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661dead836109bd565b90565b600061056d836109ed565b9050600061057a836109ed565b90506000610586610496565b604080516001600160a01b03888116825260208201879052871681830152606081018590526080810183905290519192507f0b6eeea8768a790ff3f62dab688244fe95ad07a174472faf825b3a0f2cd74998919081900360a00190a15050505050565b6105f1610816565b6105fb6000611021565b565b600084138061060c5750600083135b6106675760405162461bcd60e51b815260206004820152602660248201527f536d6172646578526f757465723a2043616c6c6261636b20496e76616c696420604482015265185b5bdd5b9d60d21b6064820152608401610206565b60008061067683850185611839565b9150915060006106898360000151611071565b506001549091506001600160a01b031633146106e75760405162461bcd60e51b815260206004820152601b60248201527f536d6172446578526f757465723a20494e56414c49445f5041495200000000006044820152606401610206565b8160008812610706576107016106fc8861190f565b611092565b61070f565b61070f8861190f565b10156107675760405162461bcd60e51b815260206004820152602160248201527f536d61726465784175746f537761707065723a20496e76616c696420707269636044820152606560f81b6064820152608401610206565b61079433600089136107815761077c88611092565b610783565b885b6001600160a01b03841691906109bd565b50505050505050565b6107a5610816565b6001600160a01b03811661080a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610206565b61081381611021565b50565b6000546001600160a01b031633146105fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610206565b8015806108ea5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e8919061173d565b155b6109555760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610206565b6040516001600160a01b0383166024820152604481018290526109b890849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526110e8565b505050565b6040516001600160a01b0383166024820152604481018290526109b890849063a9059cbb60e01b90606401610981565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610a3057506000919050565b60408051610140810182526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908516908110825291516370a0823160e01b815230600482015260009260208301916370a0823190602401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061173d565b815260405163e6a4390560e01b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526020909201917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c919061192b565b6001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050806020015160001480610be9575060408101516001600160a01b0316155b15610bf75750600092915050565b80604001516001600160a01b0316639a20767b6040518163ffffffff1660e01b81526004016040805180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190611948565b82606001836080018281525082815250505080604001516001600160a01b031663ee2046c76040518163ffffffff1660e01b8152600401606060405180830381865afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd4919061196c565b60e084015260c083015260a082018190521580610cf3575060c0810151155b15610d0d576060810151608082015160c083015260a08201525b805115610d4757610d36816060015182608001518360e001518460a001518560c00151426111bd565b610120830152610100820152610d76565b610d69816080015182606001518360e001518460c001518560a00151426111bd565b6101208301526101008201525b60006064826101000151610d8a919061199a565b610d9660026064611714565b8361012001518460200151610dab919061199a565b610db5919061199a565b610dbf91906119b1565b905080600003610e225760405162461bcd60e51b815260206004820152602860248201527f4175746f537761707065723a20736c6970706167652063616c63756c6174696f6044820152671b8819985a5b195960c21b6064820152608401610206565b604082810151600180546001600160a01b0319166001600160a01b039283169081179091558251808401909352601f83527f7377617028616464726573732c626f6f6c2c696e743235362c6279746573290060209384015291840151600092917f1f18b371673edaf789f1294779860fb7f197b936e2358a9ded3d78b4099e834f9161dead917f00000000000000000000000000000000000000000000000000000000000000008116908a161090610ed9906112ac565b604080518082019091526bffffffffffffffffffffffff1960608c811b8216818401527f0000000000000000000000000000000000000000000000000000000000000000901b166074820152806088810160408051601f198184030181529181529082523060209283015251610f5292918a9101611a23565b60408051601f1981840301815290829052610f7294939291602401611a60565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610fb09190611a99565b6000604051808303816000865af19150503d8060008114610fed576040519150601f19603f3d011682016040523d82523d6000602084013e610ff2565b606091505b5050600180546001600160a01b0319169055905080611012576000611018565b82602001515b95945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008061107e8382611316565b915061108b836014611316565b9050915091565b6000808212156110e45760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610206565b5090565b600061113d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113d09092919063ffffffff16565b905080516000148061115e57508080602001905181019061115e9190611ab5565b6109b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610206565b600080858310156112105760405162461bcd60e51b815260206004820152601e60248201527f536d6172646578506169723a20494e56414c49445f54494d455354414d5000006044820152606401610206565b856000036112225750869050856112a1565b8286036112335750839050826112a1565b600061124a6112428886611714565b61012c6113e7565b899350905061012c61125c898361199a565b87858861126b8661012c611714565b611275919061199a565b61127f919061199a565b61128991906119b1565b6112939190611ad7565b61129d91906119b1565b9150505b965096945050505050565b60006001600160ff1b038211156110e45760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610206565b600081611324816014611ad7565b10156113675760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b6044820152606401610206565b611372826014611ad7565b835110156113ba5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610206565b5081810160200151600160601b90045b92915050565b60606113df84846000856113ff565b949350505050565b60008183106113f657816113f8565b825b9392505050565b6060824710156114605760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610206565b600080866001600160a01b0316858760405161147c9190611a99565b60006040518083038185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b50915091506114cf878383876114da565b979650505050505050565b60608315611549578251600003611542576001600160a01b0385163b6115425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610206565b50816113df565b6113df838381511561155e5781518083602001fd5b8060405162461bcd60e51b81526004016102069190611aea565b60008060008060006080868803121561159057600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156115b657600080fd5b818801915088601f8301126115ca57600080fd5b8135818111156115d957600080fd5b8960208260051b85010111156115ee57600080fd5b96999598505060200195606001359392505050565b6001600160a01b038116811461081357600080fd5b6000806040838503121561162b57600080fd5b823561163681611603565b9150602083013561164681611603565b809150509250929050565b6000806000806060858703121561166757600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561168d57600080fd5b818701915087601f8301126116a157600080fd5b8135818111156116b057600080fd5b8860208285010111156116c257600080fd5b95989497505060200194505050565b80356116dc81611603565b919050565b6000602082840312156116f357600080fd5b81356113f881611603565b634e487b7160e01b600052601160045260246000fd5b818103818111156113ca576113ca6116fe565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561174f57600080fd5b5051919050565b868152602080820187905260a0604083018190528201859052600090869060c08401835b888110156117a857833561178d81611603565b6001600160a01b03168252928201929082019060010161177a565b506001600160a01b0396909616606085015250505060800152949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611802576118026117c9565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611831576118316117c9565b604052919050565b6000806040838503121561184c57600080fd5b823567ffffffffffffffff8082111561186457600080fd5b908401906040828703121561187857600080fd5b6118806117df565b82358281111561188f57600080fd5b8301601f810188136118a057600080fd5b80356020848211156118b4576118b46117c9565b6118c6601f8301601f19168201611808565b945081855289818385010111156118dc57600080fd5b818184018287013760008183870101528484526118fa8187016116d1565b84820152929997909201359750505050505050565b6000600160ff1b8201611924576119246116fe565b5060000390565b60006020828403121561193d57600080fd5b81516113f881611603565b6000806040838503121561195b57600080fd5b505080516020909101519092909150565b60008060006060848603121561198157600080fd5b8351925060208401519150604084015190509250925092565b80820281158282048414176113ca576113ca6116fe565b6000826119ce57634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156119ee5781810151838201526020016119d6565b50506000910152565b60008151808452611a0f8160208601602086016119d3565b601f01601f19169290920160200192915050565b6040815260008351604080840152611a3e60808401826119f7565b6020958601516001600160a01b03166060850152929094019290925292915050565b60018060a01b03851681528315156020820152826040820152608060608201526000611a8f60808301846119f7565b9695505050505050565b60008251611aab8184602087016119d3565b9190910192915050565b600060208284031215611ac757600080fd5b815180151581146113f857600080fd5b808201808211156113ca576113ca6116fe565b6020815260006113f860208301846119f756fea164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeWork(address,address)": {
        "params": {
          "_token0": "token to be converted to sdex",
          "_token1": "token to be converted to sdex"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "smardexSwapCallback(int256,int256,bytes)": {
        "params": {
          "_amount0Delta": "amount of token0 for the swap (negative is incoming, positive is required to pay to pair)",
          "_amount1Delta": "amount of token1 for the swap (negative is incoming, positive is required to pay to pair)",
          "_data": "for Router path and payer for the swap (see router for details)"
        }
      },
      "swapTokenWithPath(uint256,uint256,address[],uint256)": {
        "params": {
          "_amountOutMin": "The minimum SDEX amount required to prevent the transaction from reverting",
          "_amountToSwap": "amount of tokens from _path[0] to be converted into SDEX",
          "_deadline": "Unix timestamp after which the transaction will revert",
          "_path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity. Last token must be SDEX"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTokens()": {
        "returns": {
          "_amount": "the transferred SDEX amount"
        }
      }
    },
    "stateVariables": {
      "factory": {
        "return": "factory address",
        "returns": {
          "_0": "factory address"
        }
      },
      "smardexToken": {
        "return": "smardexToken address",
        "returns": {
          "_0": "smardexToken address"
        }
      }
    },
    "title": "AutoSwapper",
    "version": 1
  },
  "userdoc": {
    "events": {
      "workExecuted(address,uint256,address,uint256,uint256)": {
        "notice": "emitted every time the AutoSwapper swaps and stacks SDEXs"
      }
    },
    "kind": "user",
    "methods": {
      "executeWork(address,address)": {
        "notice": "public function for executing swaps on tokens and burn, will be called from a Smardex Pair on mint and burn, and can be forced call by anyone"
      },
      "factory()": {
        "notice": "return the factory address"
      },
      "smardexSwapCallback(int256,int256,bytes)": {
        "notice": "callback data for swap"
      },
      "smardexToken()": {
        "notice": "return the smardexToken address"
      },
      "swapTokenWithPath(uint256,uint256,address[],uint256)": {
        "notice": "onlyOwner function to swap token in SDEX and send it to the staking address (or burn on L2)"
      },
      "transferTokens()": {
        "notice": "transfer SDEX from here to address dead"
      }
    },
    "notice": "AutoSwapper makes it automatic and/or public to get fees from Smardex and burn it",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/rewards/AutoSwapperL2.sol:AutoSwapperL2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6243,
        "contract": "contracts/rewards/AutoSwapperL2.sol:AutoSwapperL2",
        "label": "cachedPair",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISmardexPair)3701"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISmardexPair)3701": {
        "encoding": "inplace",
        "label": "contract ISmardexPair",
        "numberOfBytes": "20"
      }
    }
  }
}